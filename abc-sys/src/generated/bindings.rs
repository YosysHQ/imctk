/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const SIZEOF_VOID_P: u32 = 8;
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_INT: u32 = 4;
pub const ABC_INFINITY: u32 = 1000000000;
pub const APPLE_MACH: u32 = 0;
pub const BRIDGE_NETLIST: u32 = 106;
pub const BRIDGE_ABS_NETLIST: u32 = 107;
pub const GIA_NONE: u32 = 536870911;
pub const GIA_VOID: u32 = 268435455;
pub const GIA_ZER: u32 = 1;
pub const GIA_ONE: u32 = 2;
pub const GIA_UND: u32 = 3;
pub const st__DEFAULT_MAX_DENSITY: u32 = 5;
pub const st__DEFAULT_INIT_TABLE_SIZE: u32 = 11;
pub const st__DEFAULT_GROW_FACTOR: f64 = 2.0;
pub const st__DEFAULT_REORDER_FLAG: u32 = 0;
pub const st__OUT_OF_MEM: i32 = -10000;
pub const STMM_DEFAULT_MAX_DENSITY: u32 = 5;
pub const STMM_DEFAULT_INIT_TABLE_SIZE: u32 = 11;
pub const STMM_DEFAULT_GROW_FACTOR: f64 = 2.0;
pub const STMM_DEFAULT_REORDER_FLAG: u32 = 0;
pub const STMM_OUT_OF_MEM: i32 = -10000;
pub const IO_WRITE_LINE_LENGTH: u32 = 78;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const LEARNT_MAX_START_DEFAULT: u32 = 10000;
pub const LEARNT_MAX_INCRE_DEFAULT: u32 = 1000;
pub const LEARNT_MAX_RATIO_DEFAULT: u32 = 50;
pub type ABC_PTRDIFF_T = isize;
pub type ABC_PTRUINT_T = usize;
pub type ABC_PTRINT_T = isize;
pub type ABC_INT64_T = i64;
pub type ABC_UINT64_T = u64;
pub type word = ABC_UINT64_T;
pub type iword = ABC_INT64_T;
extern "C" {
    #[link_name = "Abc_AbsInt_imctk_abc_sys"]
    pub fn Abc_AbsInt(a: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_MaxInt_imctk_abc_sys"]
    pub fn Abc_MaxInt(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_MinInt_imctk_abc_sys"]
    pub fn Abc_MinInt(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_MaxWord_imctk_abc_sys"]
    pub fn Abc_MaxWord(a: word, b: word) -> word;
}
extern "C" {
    #[link_name = "Abc_MinWord_imctk_abc_sys"]
    pub fn Abc_MinWord(a: word, b: word) -> word;
}
extern "C" {
    #[link_name = "Abc_AbsFloat_imctk_abc_sys"]
    pub fn Abc_AbsFloat(a: f32) -> f32;
}
extern "C" {
    #[link_name = "Abc_MaxFloat_imctk_abc_sys"]
    pub fn Abc_MaxFloat(a: f32, b: f32) -> f32;
}
extern "C" {
    #[link_name = "Abc_MinFloat_imctk_abc_sys"]
    pub fn Abc_MinFloat(a: f32, b: f32) -> f32;
}
extern "C" {
    #[link_name = "Abc_AbsDouble_imctk_abc_sys"]
    pub fn Abc_AbsDouble(a: f64) -> f64;
}
extern "C" {
    #[link_name = "Abc_MaxDouble_imctk_abc_sys"]
    pub fn Abc_MaxDouble(a: f64, b: f64) -> f64;
}
extern "C" {
    #[link_name = "Abc_MinDouble_imctk_abc_sys"]
    pub fn Abc_MinDouble(a: f64, b: f64) -> f64;
}
extern "C" {
    #[link_name = "Abc_Float2Int_imctk_abc_sys"]
    pub fn Abc_Float2Int(Val: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Int2Float_imctk_abc_sys"]
    pub fn Abc_Int2Float(Num: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "Abc_Dbl2Word_imctk_abc_sys"]
    pub fn Abc_Dbl2Word(Dbl: f64) -> word;
}
extern "C" {
    #[link_name = "Abc_Word2Dbl_imctk_abc_sys"]
    pub fn Abc_Word2Dbl(Num: word) -> f64;
}
extern "C" {
    #[link_name = "Abc_Base2Log_imctk_abc_sys"]
    pub fn Abc_Base2Log(n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Base10Log_imctk_abc_sys"]
    pub fn Abc_Base10Log(n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Base16Log_imctk_abc_sys"]
    pub fn Abc_Base16Log(n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_UtilStrsav_imctk_abc_sys"]
    pub fn Abc_UtilStrsav(s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Abc_UtilStrsavTwo_imctk_abc_sys"]
    pub fn Abc_UtilStrsavTwo(
        s: *mut ::std::os::raw::c_char,
        a: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Abc_UtilStrsavNum_imctk_abc_sys"]
    pub fn Abc_UtilStrsavNum(
        s: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Abc_BitByteNum_imctk_abc_sys"]
    pub fn Abc_BitByteNum(nBits: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_BitWordNum_imctk_abc_sys"]
    pub fn Abc_BitWordNum(nBits: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Bit6WordNum_imctk_abc_sys"]
    pub fn Abc_Bit6WordNum(nBits: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_TruthByteNum_imctk_abc_sys"]
    pub fn Abc_TruthByteNum(nVars: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_TruthWordNum_imctk_abc_sys"]
    pub fn Abc_TruthWordNum(nVars: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Truth6WordNum_imctk_abc_sys"]
    pub fn Abc_Truth6WordNum(nVars: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_InfoHasBit_imctk_abc_sys"]
    pub fn Abc_InfoHasBit(
        p: *mut ::std::os::raw::c_uint,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_InfoSetBit_imctk_abc_sys"]
    pub fn Abc_InfoSetBit(p: *mut ::std::os::raw::c_uint, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_InfoXorBit_imctk_abc_sys"]
    pub fn Abc_InfoXorBit(p: *mut ::std::os::raw::c_uint, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_InfoMask_imctk_abc_sys"]
    pub fn Abc_InfoMask(nVar: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Abc_Var2Lit_imctk_abc_sys"]
    pub fn Abc_Var2Lit(
        Var: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2Var_imctk_abc_sys"]
    pub fn Abc_Lit2Var(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LitIsCompl_imctk_abc_sys"]
    pub fn Abc_LitIsCompl(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LitNot_imctk_abc_sys"]
    pub fn Abc_LitNot(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LitNotCond_imctk_abc_sys"]
    pub fn Abc_LitNotCond(
        Lit: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LitRegular_imctk_abc_sys"]
    pub fn Abc_LitRegular(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2LitV_imctk_abc_sys"]
    pub fn Abc_Lit2LitV(
        pMap: *mut ::std::os::raw::c_int,
        Lit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2LitL_imctk_abc_sys"]
    pub fn Abc_Lit2LitL(
        pMap: *mut ::std::os::raw::c_int,
        Lit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Ptr2Int_imctk_abc_sys"]
    pub fn Abc_Ptr2Int(p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Int2Ptr_imctk_abc_sys"]
    pub fn Abc_Int2Ptr(i: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_Ptr2Wrd_imctk_abc_sys"]
    pub fn Abc_Ptr2Wrd(p: *mut ::std::os::raw::c_void) -> word;
}
extern "C" {
    #[link_name = "Abc_Wrd2Ptr_imctk_abc_sys"]
    pub fn Abc_Wrd2Ptr(i: word) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_Var2Lit2_imctk_abc_sys"]
    pub fn Abc_Var2Lit2(
        Var: ::std::os::raw::c_int,
        Att: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2Var2_imctk_abc_sys"]
    pub fn Abc_Lit2Var2(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2Att2_imctk_abc_sys"]
    pub fn Abc_Lit2Att2(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Var2Lit3_imctk_abc_sys"]
    pub fn Abc_Var2Lit3(
        Var: ::std::os::raw::c_int,
        Att: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2Var3_imctk_abc_sys"]
    pub fn Abc_Lit2Var3(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2Att3_imctk_abc_sys"]
    pub fn Abc_Lit2Att3(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Var2Lit4_imctk_abc_sys"]
    pub fn Abc_Var2Lit4(
        Var: ::std::os::raw::c_int,
        Att: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2Var4_imctk_abc_sys"]
    pub fn Abc_Lit2Var4(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_Lit2Att4_imctk_abc_sys"]
    pub fn Abc_Lit2Att4(Lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type abctime = ABC_INT64_T;
extern "C" {
    #[link_name = "Abc_Clock_imctk_abc_sys"]
    pub fn Abc_Clock() -> abctime;
}
extern "C" {
    #[link_name = "Abc_ThreadClock_imctk_abc_sys"]
    pub fn Abc_ThreadClock() -> abctime;
}
pub const Abc_VerbLevel_ABC_PROMPT: Abc_VerbLevel = -2;
pub const Abc_VerbLevel_ABC_ERROR: Abc_VerbLevel = -1;
pub const Abc_VerbLevel_ABC_WARNING: Abc_VerbLevel = 0;
pub const Abc_VerbLevel_ABC_STANDARD: Abc_VerbLevel = 1;
pub const Abc_VerbLevel_ABC_VERBOSE: Abc_VerbLevel = 2;
pub type Abc_VerbLevel = ::std::os::raw::c_int;
extern "C" {
    pub fn Gia_ManToBridgeText(
        pFile: *mut FILE,
        Size: ::std::os::raw::c_int,
        pBuffer: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManToBridgeAbsNetlist(
        pFile: *mut FILE,
        p: *mut ::std::os::raw::c_void,
        pkg_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nsprintf(format: *const ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Abc_PrintInt_imctk_abc_sys"]
    pub fn Abc_PrintInt(i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_PrintTime_imctk_abc_sys"]
    pub fn Abc_PrintTime(
        level: ::std::os::raw::c_int,
        pStr: *const ::std::os::raw::c_char,
        time: abctime,
    );
}
extern "C" {
    #[link_name = "Abc_PrintTimeP_imctk_abc_sys"]
    pub fn Abc_PrintTimeP(
        level: ::std::os::raw::c_int,
        pStr: *const ::std::os::raw::c_char,
        time: abctime,
        Time: abctime,
    );
}
extern "C" {
    #[link_name = "Abc_PrintMemoryP_imctk_abc_sys"]
    pub fn Abc_PrintMemoryP(
        level: ::std::os::raw::c_int,
        pStr: *const ::std::os::raw::c_char,
        mem: ::std::os::raw::c_int,
        Mem: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Abc_PrimeCudd_imctk_abc_sys"]
    pub fn Abc_PrimeCudd(p: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_FileReadContents_imctk_abc_sys"]
    pub fn Abc_FileReadContents(
        pFileName: *mut ::std::os::raw::c_char,
        pnFileSize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_ReverseOrder_imctk_abc_sys"]
    pub fn Abc_ReverseOrder(pA: *mut ::std::os::raw::c_int, nA: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_MergeSort(pInput: *mut ::std::os::raw::c_int, nSize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_MergeSortCost(
        pCosts: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_MergeSortCost2(
        pInput: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        pCost: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_MergeSortCost2Reverse(
        pInput: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        pCost: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_QuickSort1(
        pData: *mut word,
        nSize: ::std::os::raw::c_int,
        fDecrease: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_QuickSort2(
        pData: *mut word,
        nSize: ::std::os::raw::c_int,
        fDecrease: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_QuickSort3(
        pData: *mut word,
        nSize: ::std::os::raw::c_int,
        fDecrease: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_QuickSortCostData(
        pCosts: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        fDecrease: ::std::os::raw::c_int,
        pData: *mut word,
        pResult: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_QuickSortCost(
        pCosts: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        fDecrease: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_Random(fReset: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Abc_RandomW(fReset: ::std::os::raw::c_int) -> word;
}
pub type Vec_Int_t = Vec_Int_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Int_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Int_t_"][::std::mem::size_of::<Vec_Int_t_>() - 16usize];
    ["Alignment of Vec_Int_t_"][::std::mem::align_of::<Vec_Int_t_>() - 8usize];
    ["Offset of field: Vec_Int_t_::nCap"][::std::mem::offset_of!(Vec_Int_t_, nCap) - 0usize];
    ["Offset of field: Vec_Int_t_::nSize"][::std::mem::offset_of!(Vec_Int_t_, nSize) - 4usize];
    ["Offset of field: Vec_Int_t_::pArray"][::std::mem::offset_of!(Vec_Int_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_IntAlloc_imctk_abc_sys"]
    pub fn Vec_IntAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntAllocExact_imctk_abc_sys"]
    pub fn Vec_IntAllocExact(nCap: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntStart_imctk_abc_sys"]
    pub fn Vec_IntStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntStartFull_imctk_abc_sys"]
    pub fn Vec_IntStartFull(nSize: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntStartRange_imctk_abc_sys"]
    pub fn Vec_IntStartRange(
        First: ::std::os::raw::c_int,
        Range: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntStartRandomLimit_imctk_abc_sys"]
    pub fn Vec_IntStartRandomLimit(
        nSize: ::std::os::raw::c_int,
        Upper: ::std::os::raw::c_int,
        Lower: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntRandomizeOrder_imctk_abc_sys"]
    pub fn Vec_IntRandomizeOrder(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntStartNatural_imctk_abc_sys"]
    pub fn Vec_IntStartNatural(nSize: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntAllocArray_imctk_abc_sys"]
    pub fn Vec_IntAllocArray(
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntAllocArrayCopy_imctk_abc_sys"]
    pub fn Vec_IntAllocArrayCopy(
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntDup_imctk_abc_sys"]
    pub fn Vec_IntDup(pVec: *mut Vec_Int_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntDupArray_imctk_abc_sys"]
    pub fn Vec_IntDupArray(pVec: *mut Vec_Int_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntZero_imctk_abc_sys"]
    pub fn Vec_IntZero(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntErase_imctk_abc_sys"]
    pub fn Vec_IntErase(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntFree_imctk_abc_sys"]
    pub fn Vec_IntFree(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntFreeP_imctk_abc_sys"]
    pub fn Vec_IntFreeP(p: *mut *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntReleaseArray_imctk_abc_sys"]
    pub fn Vec_IntReleaseArray(p: *mut Vec_Int_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntReleaseNewArray_imctk_abc_sys"]
    pub fn Vec_IntReleaseNewArray(p: *mut Vec_Int_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntArray_imctk_abc_sys"]
    pub fn Vec_IntArray(p: *mut Vec_Int_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntArrayP_imctk_abc_sys"]
    pub fn Vec_IntArrayP(p: *mut Vec_Int_t) -> *mut *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntLimit_imctk_abc_sys"]
    pub fn Vec_IntLimit(p: *mut Vec_Int_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntSize_imctk_abc_sys"]
    pub fn Vec_IntSize(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCap_imctk_abc_sys"]
    pub fn Vec_IntCap(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntMemory_imctk_abc_sys"]
    pub fn Vec_IntMemory(p: *mut Vec_Int_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_IntEntry_imctk_abc_sys"]
    pub fn Vec_IntEntry(p: *mut Vec_Int_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntEntryP_imctk_abc_sys"]
    pub fn Vec_IntEntryP(p: *mut Vec_Int_t, i: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntWriteEntry_imctk_abc_sys"]
    pub fn Vec_IntWriteEntry(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntAddToEntry_imctk_abc_sys"]
    pub fn Vec_IntAddToEntry(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
        Addition: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntUpdateEntry_imctk_abc_sys"]
    pub fn Vec_IntUpdateEntry(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
        Value: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntDowndateEntry_imctk_abc_sys"]
    pub fn Vec_IntDowndateEntry(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
        Value: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntEntryLast_imctk_abc_sys"]
    pub fn Vec_IntEntryLast(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntGrow_imctk_abc_sys"]
    pub fn Vec_IntGrow(p: *mut Vec_Int_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntGrowResize_imctk_abc_sys"]
    pub fn Vec_IntGrowResize(p: *mut Vec_Int_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntFill_imctk_abc_sys"]
    pub fn Vec_IntFill(
        p: *mut Vec_Int_t,
        nSize: ::std::os::raw::c_int,
        Fill: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntFillTwo_imctk_abc_sys"]
    pub fn Vec_IntFillTwo(
        p: *mut Vec_Int_t,
        nSize: ::std::os::raw::c_int,
        FillEven: ::std::os::raw::c_int,
        FillOdd: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntFillNatural_imctk_abc_sys"]
    pub fn Vec_IntFillNatural(p: *mut Vec_Int_t, nSize: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntFillExtra_imctk_abc_sys"]
    pub fn Vec_IntFillExtra(
        p: *mut Vec_Int_t,
        nSize: ::std::os::raw::c_int,
        Fill: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntGetEntry_imctk_abc_sys"]
    pub fn Vec_IntGetEntry(p: *mut Vec_Int_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntGetEntryFull_imctk_abc_sys"]
    pub fn Vec_IntGetEntryFull(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntGetEntryP_imctk_abc_sys"]
    pub fn Vec_IntGetEntryP(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntSetEntry_imctk_abc_sys"]
    pub fn Vec_IntSetEntry(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntSetEntryFull_imctk_abc_sys"]
    pub fn Vec_IntSetEntryFull(
        p: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntShrink_imctk_abc_sys"]
    pub fn Vec_IntShrink(p: *mut Vec_Int_t, nSizeNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntClear_imctk_abc_sys"]
    pub fn Vec_IntClear(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntPush_imctk_abc_sys"]
    pub fn Vec_IntPush(p: *mut Vec_Int_t, Entry: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntPushReturn_imctk_abc_sys"]
    pub fn Vec_IntPushReturn(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntPushTwo_imctk_abc_sys"]
    pub fn Vec_IntPushTwo(
        p: *mut Vec_Int_t,
        Entry1: ::std::os::raw::c_int,
        Entry2: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntPushThree_imctk_abc_sys"]
    pub fn Vec_IntPushThree(
        p: *mut Vec_Int_t,
        Entry1: ::std::os::raw::c_int,
        Entry2: ::std::os::raw::c_int,
        Entry3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntPushFour_imctk_abc_sys"]
    pub fn Vec_IntPushFour(
        p: *mut Vec_Int_t,
        Entry1: ::std::os::raw::c_int,
        Entry2: ::std::os::raw::c_int,
        Entry3: ::std::os::raw::c_int,
        Entry4: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntPushArray_imctk_abc_sys"]
    pub fn Vec_IntPushArray(
        p: *mut Vec_Int_t,
        pEntries: *mut ::std::os::raw::c_int,
        nEntries: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntShift_imctk_abc_sys"]
    pub fn Vec_IntShift(p: *mut Vec_Int_t, Shift: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntPushFirst_imctk_abc_sys"]
    pub fn Vec_IntPushFirst(p: *mut Vec_Int_t, Entry: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntPushOrder_imctk_abc_sys"]
    pub fn Vec_IntPushOrder(p: *mut Vec_Int_t, Entry: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntPushOrderCost_imctk_abc_sys"]
    pub fn Vec_IntPushOrderCost(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
        vCost: *mut Vec_Int_t,
    );
}
extern "C" {
    #[link_name = "Vec_IntIsOrdered_imctk_abc_sys"]
    pub fn Vec_IntIsOrdered(
        p: *mut Vec_Int_t,
        fReverse: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntIsOrderedCost_imctk_abc_sys"]
    pub fn Vec_IntIsOrderedCost(
        p: *mut Vec_Int_t,
        vCost: *mut Vec_Int_t,
        fReverse: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntPushOrderReverse_imctk_abc_sys"]
    pub fn Vec_IntPushOrderReverse(p: *mut Vec_Int_t, Entry: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntPushUniqueOrder_imctk_abc_sys"]
    pub fn Vec_IntPushUniqueOrder(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntPushUniqueOrderCost_imctk_abc_sys"]
    pub fn Vec_IntPushUniqueOrderCost(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
        vCost: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntPushUnique_imctk_abc_sys"]
    pub fn Vec_IntPushUnique(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntFetch_imctk_abc_sys"]
    pub fn Vec_IntFetch(
        p: *mut Vec_Int_t,
        nWords: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Vec_IntPop_imctk_abc_sys"]
    pub fn Vec_IntPop(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntFind_imctk_abc_sys"]
    pub fn Vec_IntFind(p: *mut Vec_Int_t, Entry: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntRemove_imctk_abc_sys"]
    pub fn Vec_IntRemove(p: *mut Vec_Int_t, Entry: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntRemove1_imctk_abc_sys"]
    pub fn Vec_IntRemove1(p: *mut Vec_Int_t, Entry: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntDrop_imctk_abc_sys"]
    pub fn Vec_IntDrop(p: *mut Vec_Int_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntInsert_imctk_abc_sys"]
    pub fn Vec_IntInsert(
        p: *mut Vec_Int_t,
        iHere: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntFindMax_imctk_abc_sys"]
    pub fn Vec_IntFindMax(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntArgMax_imctk_abc_sys"]
    pub fn Vec_IntArgMax(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntFindMin_imctk_abc_sys"]
    pub fn Vec_IntFindMin(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntArgMin_imctk_abc_sys"]
    pub fn Vec_IntArgMin(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntReverseOrder_imctk_abc_sys"]
    pub fn Vec_IntReverseOrder(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntRemoveOdd_imctk_abc_sys"]
    pub fn Vec_IntRemoveOdd(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntRemoveEven_imctk_abc_sys"]
    pub fn Vec_IntRemoveEven(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntInvert_imctk_abc_sys"]
    pub fn Vec_IntInvert(p: *mut Vec_Int_t, Fill: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntCondense_imctk_abc_sys"]
    pub fn Vec_IntCondense(p: *mut Vec_Int_t, Fill: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntSum_imctk_abc_sys"]
    pub fn Vec_IntSum(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountEntry_imctk_abc_sys"]
    pub fn Vec_IntCountEntry(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountLarger_imctk_abc_sys"]
    pub fn Vec_IntCountLarger(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountSmaller_imctk_abc_sys"]
    pub fn Vec_IntCountSmaller(
        p: *mut Vec_Int_t,
        Entry: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountPositive_imctk_abc_sys"]
    pub fn Vec_IntCountPositive(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountZero_imctk_abc_sys"]
    pub fn Vec_IntCountZero(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntAddPositive_imctk_abc_sys"]
    pub fn Vec_IntAddPositive(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntEqual_imctk_abc_sys"]
    pub fn Vec_IntEqual(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntContained_imctk_abc_sys"]
    pub fn Vec_IntContained(
        pSmall: *mut Vec_Int_t,
        pLarge: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountCommon_imctk_abc_sys"]
    pub fn Vec_IntCountCommon(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntSortCompare1_imctk_abc_sys"]
    pub fn Vec_IntSortCompare1(
        pp1: *mut ::std::os::raw::c_int,
        pp2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntSortCompare2_imctk_abc_sys"]
    pub fn Vec_IntSortCompare2(
        pp1: *mut ::std::os::raw::c_int,
        pp2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntSort_imctk_abc_sys"]
    pub fn Vec_IntSort(p: *mut Vec_Int_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntSortMulti_imctk_abc_sys"]
    pub fn Vec_IntSortMulti(
        p: *mut Vec_Int_t,
        nMulti: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntIsSorted_imctk_abc_sys"]
    pub fn Vec_IntIsSorted(
        p: *mut Vec_Int_t,
        fReverse: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntUniqify_imctk_abc_sys"]
    pub fn Vec_IntUniqify(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountDuplicates_imctk_abc_sys"]
    pub fn Vec_IntCountDuplicates(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCheckUniqueSmall_imctk_abc_sys"]
    pub fn Vec_IntCheckUniqueSmall(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntCountUnique_imctk_abc_sys"]
    pub fn Vec_IntCountUnique(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntUniqifyPairs_imctk_abc_sys"]
    pub fn Vec_IntUniqifyPairs(p: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntUniqueHashKeyDebug_imctk_abc_sys"]
    pub fn Vec_IntUniqueHashKeyDebug(
        pStr: *mut ::std::os::raw::c_uchar,
        nChars: ::std::os::raw::c_int,
        TableMask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Vec_IntUniqueProfile_imctk_abc_sys"]
    pub fn Vec_IntUniqueProfile(
        vData: *mut Vec_Int_t,
        pTable: *mut ::std::os::raw::c_int,
        pNexts: *mut ::std::os::raw::c_int,
        TableMask: ::std::os::raw::c_int,
        nIntSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntUniqueHashKey2_imctk_abc_sys"]
    pub fn Vec_IntUniqueHashKey2(
        pStr: *mut ::std::os::raw::c_uchar,
        nChars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Vec_IntUniqueHashKey_imctk_abc_sys"]
    pub fn Vec_IntUniqueHashKey(
        pStr: *mut ::std::os::raw::c_uchar,
        nChars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Vec_IntUniqueLookup_imctk_abc_sys"]
    pub fn Vec_IntUniqueLookup(
        vData: *mut Vec_Int_t,
        i: ::std::os::raw::c_int,
        nIntSize: ::std::os::raw::c_int,
        pNexts: *mut ::std::os::raw::c_int,
        pStart: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntUniqueCount_imctk_abc_sys"]
    pub fn Vec_IntUniqueCount(
        vData: *mut Vec_Int_t,
        nIntSize: ::std::os::raw::c_int,
        pvMap: *mut *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntUniqifyHash_imctk_abc_sys"]
    pub fn Vec_IntUniqifyHash(
        vData: *mut Vec_Int_t,
        nIntSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntSortCompareUnsigned_imctk_abc_sys"]
    pub fn Vec_IntSortCompareUnsigned(
        pp1: *mut ::std::os::raw::c_uint,
        pp2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntSortUnsigned_imctk_abc_sys"]
    pub fn Vec_IntSortUnsigned(p: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntTwoCountCommon_imctk_abc_sys"]
    pub fn Vec_IntTwoCountCommon(
        vArr1: *mut Vec_Int_t,
        vArr2: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntTwoFindCommon_imctk_abc_sys"]
    pub fn Vec_IntTwoFindCommon(
        vArr1: *mut Vec_Int_t,
        vArr2: *mut Vec_Int_t,
        vArr: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntTwoFindCommonReverse_imctk_abc_sys"]
    pub fn Vec_IntTwoFindCommonReverse(
        vArr1: *mut Vec_Int_t,
        vArr2: *mut Vec_Int_t,
        vArr: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntTwoRemoveCommon_imctk_abc_sys"]
    pub fn Vec_IntTwoRemoveCommon(
        vArr1: *mut Vec_Int_t,
        vArr2: *mut Vec_Int_t,
        vArr: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntTwoRemove_imctk_abc_sys"]
    pub fn Vec_IntTwoRemove(vArr1: *mut Vec_Int_t, vArr2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntTwoMerge1_imctk_abc_sys"]
    pub fn Vec_IntTwoMerge1(vArr1: *mut Vec_Int_t, vArr2: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntTwoRemove1_imctk_abc_sys"]
    pub fn Vec_IntTwoRemove1(vArr1: *mut Vec_Int_t, vArr2: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntTwoMerge2Int_imctk_abc_sys"]
    pub fn Vec_IntTwoMerge2Int(vArr1: *mut Vec_Int_t, vArr2: *mut Vec_Int_t, vArr: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntTwoMerge_imctk_abc_sys"]
    pub fn Vec_IntTwoMerge(vArr1: *mut Vec_Int_t, vArr2: *mut Vec_Int_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_IntTwoMerge2_imctk_abc_sys"]
    pub fn Vec_IntTwoMerge2(vArr1: *mut Vec_Int_t, vArr2: *mut Vec_Int_t, vArr: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntTwoSplit_imctk_abc_sys"]
    pub fn Vec_IntTwoSplit(
        vArr1: *mut Vec_Int_t,
        vArr2: *mut Vec_Int_t,
        vArr: *mut Vec_Int_t,
        vArr1n: *mut Vec_Int_t,
        vArr2n: *mut Vec_Int_t,
    );
}
extern "C" {
    #[link_name = "Vec_IntSelectSort_imctk_abc_sys"]
    pub fn Vec_IntSelectSort(pArray: *mut ::std::os::raw::c_int, nSize: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_IntSelectSortReverse_imctk_abc_sys"]
    pub fn Vec_IntSelectSortReverse(
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntSelectSortCost_imctk_abc_sys"]
    pub fn Vec_IntSelectSortCost(
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        vCosts: *mut Vec_Int_t,
    );
}
extern "C" {
    #[link_name = "Vec_IntSelectSortCostReverse_imctk_abc_sys"]
    pub fn Vec_IntSelectSortCostReverse(
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        vCosts: *mut Vec_Int_t,
    );
}
extern "C" {
    #[link_name = "Vec_IntSelectSortCost2_imctk_abc_sys"]
    pub fn Vec_IntSelectSortCost2(
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        pCosts: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntSelectSortCost2Reverse_imctk_abc_sys"]
    pub fn Vec_IntSelectSortCost2Reverse(
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        pCosts: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntPrint_imctk_abc_sys"]
    pub fn Vec_IntPrint(vVec: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntPrintBinary_imctk_abc_sys"]
    pub fn Vec_IntPrintBinary(vVec: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntCompareVec_imctk_abc_sys"]
    pub fn Vec_IntCompareVec(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_IntClearAppend_imctk_abc_sys"]
    pub fn Vec_IntClearAppend(vVec1: *mut Vec_Int_t, vVec2: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntAppend_imctk_abc_sys"]
    pub fn Vec_IntAppend(vVec1: *mut Vec_Int_t, vVec2: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_IntAppendSkip_imctk_abc_sys"]
    pub fn Vec_IntAppendSkip(
        vVec1: *mut Vec_Int_t,
        vVec2: *mut Vec_Int_t,
        iVar: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntAppendMinus_imctk_abc_sys"]
    pub fn Vec_IntAppendMinus(
        vVec1: *mut Vec_Int_t,
        vVec2: *mut Vec_Int_t,
        fMinus: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntRemapArray_imctk_abc_sys"]
    pub fn Vec_IntRemapArray(
        vOld2New: *mut Vec_Int_t,
        vOld: *mut Vec_Int_t,
        vNew: *mut Vec_Int_t,
        nNew: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntDumpBin_imctk_abc_sys"]
    pub fn Vec_IntDumpBin(
        pFileName: *mut ::std::os::raw::c_char,
        p: *mut Vec_Int_t,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_IntReadBin_imctk_abc_sys"]
    pub fn Vec_IntReadBin(
        pFileName: *mut ::std::os::raw::c_char,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
pub type Vec_Flt_t = Vec_Flt_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Flt_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Flt_t_"][::std::mem::size_of::<Vec_Flt_t_>() - 16usize];
    ["Alignment of Vec_Flt_t_"][::std::mem::align_of::<Vec_Flt_t_>() - 8usize];
    ["Offset of field: Vec_Flt_t_::nCap"][::std::mem::offset_of!(Vec_Flt_t_, nCap) - 0usize];
    ["Offset of field: Vec_Flt_t_::nSize"][::std::mem::offset_of!(Vec_Flt_t_, nSize) - 4usize];
    ["Offset of field: Vec_Flt_t_::pArray"][::std::mem::offset_of!(Vec_Flt_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_FltAlloc_imctk_abc_sys"]
    pub fn Vec_FltAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltAllocExact_imctk_abc_sys"]
    pub fn Vec_FltAllocExact(nCap: ::std::os::raw::c_int) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltStart_imctk_abc_sys"]
    pub fn Vec_FltStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltStartFull_imctk_abc_sys"]
    pub fn Vec_FltStartFull(nSize: ::std::os::raw::c_int) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltAllocArray_imctk_abc_sys"]
    pub fn Vec_FltAllocArray(pArray: *mut f32, nSize: ::std::os::raw::c_int) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltAllocArrayCopy_imctk_abc_sys"]
    pub fn Vec_FltAllocArrayCopy(pArray: *mut f32, nSize: ::std::os::raw::c_int) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltDup_imctk_abc_sys"]
    pub fn Vec_FltDup(pVec: *mut Vec_Flt_t) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltDupArray_imctk_abc_sys"]
    pub fn Vec_FltDupArray(pVec: *mut Vec_Flt_t) -> *mut Vec_Flt_t;
}
extern "C" {
    #[link_name = "Vec_FltZero_imctk_abc_sys"]
    pub fn Vec_FltZero(p: *mut Vec_Flt_t);
}
extern "C" {
    #[link_name = "Vec_FltErase_imctk_abc_sys"]
    pub fn Vec_FltErase(p: *mut Vec_Flt_t);
}
extern "C" {
    #[link_name = "Vec_FltFree_imctk_abc_sys"]
    pub fn Vec_FltFree(p: *mut Vec_Flt_t);
}
extern "C" {
    #[link_name = "Vec_FltFreeP_imctk_abc_sys"]
    pub fn Vec_FltFreeP(p: *mut *mut Vec_Flt_t);
}
extern "C" {
    #[link_name = "Vec_FltReleaseArray_imctk_abc_sys"]
    pub fn Vec_FltReleaseArray(p: *mut Vec_Flt_t) -> *mut f32;
}
extern "C" {
    #[link_name = "Vec_FltArray_imctk_abc_sys"]
    pub fn Vec_FltArray(p: *mut Vec_Flt_t) -> *mut f32;
}
extern "C" {
    #[link_name = "Vec_FltArrayP_imctk_abc_sys"]
    pub fn Vec_FltArrayP(p: *mut Vec_Flt_t) -> *mut *mut f32;
}
extern "C" {
    #[link_name = "Vec_FltSize_imctk_abc_sys"]
    pub fn Vec_FltSize(p: *mut Vec_Flt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltCap_imctk_abc_sys"]
    pub fn Vec_FltCap(p: *mut Vec_Flt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltMemory_imctk_abc_sys"]
    pub fn Vec_FltMemory(p: *mut Vec_Flt_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_FltEntry_imctk_abc_sys"]
    pub fn Vec_FltEntry(p: *mut Vec_Flt_t, i: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "Vec_FltEntryP_imctk_abc_sys"]
    pub fn Vec_FltEntryP(p: *mut Vec_Flt_t, i: ::std::os::raw::c_int) -> *mut f32;
}
extern "C" {
    #[link_name = "Vec_FltWriteEntry_imctk_abc_sys"]
    pub fn Vec_FltWriteEntry(p: *mut Vec_Flt_t, i: ::std::os::raw::c_int, Entry: f32);
}
extern "C" {
    #[link_name = "Vec_FltAddToEntry_imctk_abc_sys"]
    pub fn Vec_FltAddToEntry(p: *mut Vec_Flt_t, i: ::std::os::raw::c_int, Addition: f32);
}
extern "C" {
    #[link_name = "Vec_FltUpdateEntry_imctk_abc_sys"]
    pub fn Vec_FltUpdateEntry(p: *mut Vec_Flt_t, i: ::std::os::raw::c_int, Value: f32);
}
extern "C" {
    #[link_name = "Vec_FltEntryLast_imctk_abc_sys"]
    pub fn Vec_FltEntryLast(p: *mut Vec_Flt_t) -> f32;
}
extern "C" {
    #[link_name = "Vec_FltGrow_imctk_abc_sys"]
    pub fn Vec_FltGrow(p: *mut Vec_Flt_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_FltFill_imctk_abc_sys"]
    pub fn Vec_FltFill(p: *mut Vec_Flt_t, nSize: ::std::os::raw::c_int, Entry: f32);
}
extern "C" {
    #[link_name = "Vec_FltFillExtra_imctk_abc_sys"]
    pub fn Vec_FltFillExtra(p: *mut Vec_Flt_t, nSize: ::std::os::raw::c_int, Fill: f32);
}
extern "C" {
    #[link_name = "Vec_FltShrink_imctk_abc_sys"]
    pub fn Vec_FltShrink(p: *mut Vec_Flt_t, nSizeNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_FltClear_imctk_abc_sys"]
    pub fn Vec_FltClear(p: *mut Vec_Flt_t);
}
extern "C" {
    #[link_name = "Vec_FltPush_imctk_abc_sys"]
    pub fn Vec_FltPush(p: *mut Vec_Flt_t, Entry: f32);
}
extern "C" {
    #[link_name = "Vec_FltPushOrder_imctk_abc_sys"]
    pub fn Vec_FltPushOrder(p: *mut Vec_Flt_t, Entry: f32);
}
extern "C" {
    #[link_name = "Vec_FltPushUnique_imctk_abc_sys"]
    pub fn Vec_FltPushUnique(p: *mut Vec_Flt_t, Entry: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltPop_imctk_abc_sys"]
    pub fn Vec_FltPop(p: *mut Vec_Flt_t) -> f32;
}
extern "C" {
    #[link_name = "Vec_FltFind_imctk_abc_sys"]
    pub fn Vec_FltFind(p: *mut Vec_Flt_t, Entry: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltRemove_imctk_abc_sys"]
    pub fn Vec_FltRemove(p: *mut Vec_Flt_t, Entry: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltFindMax_imctk_abc_sys"]
    pub fn Vec_FltFindMax(p: *mut Vec_Flt_t) -> f32;
}
extern "C" {
    #[link_name = "Vec_FltFindMin_imctk_abc_sys"]
    pub fn Vec_FltFindMin(p: *mut Vec_Flt_t) -> f32;
}
extern "C" {
    #[link_name = "Vec_FltEqual_imctk_abc_sys"]
    pub fn Vec_FltEqual(p1: *mut Vec_Flt_t, p2: *mut Vec_Flt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltPrint_imctk_abc_sys"]
    pub fn Vec_FltPrint(vVec: *mut Vec_Flt_t);
}
extern "C" {
    #[link_name = "Vec_FltSortCompare1_imctk_abc_sys"]
    pub fn Vec_FltSortCompare1(pp1: *mut f32, pp2: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltSortCompare2_imctk_abc_sys"]
    pub fn Vec_FltSortCompare2(pp1: *mut f32, pp2: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_FltSort_imctk_abc_sys"]
    pub fn Vec_FltSort(p: *mut Vec_Flt_t, fReverse: ::std::os::raw::c_int);
}
pub type Vec_Str_t = Vec_Str_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Str_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Str_t_"][::std::mem::size_of::<Vec_Str_t_>() - 16usize];
    ["Alignment of Vec_Str_t_"][::std::mem::align_of::<Vec_Str_t_>() - 8usize];
    ["Offset of field: Vec_Str_t_::nCap"][::std::mem::offset_of!(Vec_Str_t_, nCap) - 0usize];
    ["Offset of field: Vec_Str_t_::nSize"][::std::mem::offset_of!(Vec_Str_t_, nSize) - 4usize];
    ["Offset of field: Vec_Str_t_::pArray"][::std::mem::offset_of!(Vec_Str_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_StrAlloc_imctk_abc_sys"]
    pub fn Vec_StrAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Str_t;
}
extern "C" {
    #[link_name = "Vec_StrAllocExact_imctk_abc_sys"]
    pub fn Vec_StrAllocExact(nCap: ::std::os::raw::c_int) -> *mut Vec_Str_t;
}
extern "C" {
    #[link_name = "Vec_StrStart_imctk_abc_sys"]
    pub fn Vec_StrStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Str_t;
}
extern "C" {
    #[link_name = "Vec_StrAllocArray_imctk_abc_sys"]
    pub fn Vec_StrAllocArray(
        pArray: *mut ::std::os::raw::c_char,
        nSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Str_t;
}
extern "C" {
    #[link_name = "Vec_StrAllocArrayCopy_imctk_abc_sys"]
    pub fn Vec_StrAllocArrayCopy(
        pArray: *mut ::std::os::raw::c_char,
        nSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Str_t;
}
extern "C" {
    #[link_name = "Vec_StrDup_imctk_abc_sys"]
    pub fn Vec_StrDup(pVec: *mut Vec_Str_t) -> *mut Vec_Str_t;
}
extern "C" {
    #[link_name = "Vec_StrDupArray_imctk_abc_sys"]
    pub fn Vec_StrDupArray(pVec: *mut Vec_Str_t) -> *mut Vec_Str_t;
}
extern "C" {
    #[link_name = "Vec_StrZero_imctk_abc_sys"]
    pub fn Vec_StrZero(p: *mut Vec_Str_t);
}
extern "C" {
    #[link_name = "Vec_StrErase_imctk_abc_sys"]
    pub fn Vec_StrErase(p: *mut Vec_Str_t);
}
extern "C" {
    #[link_name = "Vec_StrFree_imctk_abc_sys"]
    pub fn Vec_StrFree(p: *mut Vec_Str_t);
}
extern "C" {
    #[link_name = "Vec_StrFreeP_imctk_abc_sys"]
    pub fn Vec_StrFreeP(p: *mut *mut Vec_Str_t);
}
extern "C" {
    #[link_name = "Vec_StrReleaseArray_imctk_abc_sys"]
    pub fn Vec_StrReleaseArray(p: *mut Vec_Str_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrArray_imctk_abc_sys"]
    pub fn Vec_StrArray(p: *mut Vec_Str_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrLimit_imctk_abc_sys"]
    pub fn Vec_StrLimit(p: *mut Vec_Str_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrSize_imctk_abc_sys"]
    pub fn Vec_StrSize(p: *mut Vec_Str_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrSetSize_imctk_abc_sys"]
    pub fn Vec_StrSetSize(p: *mut Vec_Str_t, nSize: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_StrCap_imctk_abc_sys"]
    pub fn Vec_StrCap(p: *mut Vec_Str_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrMemory_imctk_abc_sys"]
    pub fn Vec_StrMemory(p: *mut Vec_Str_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_StrEntry_imctk_abc_sys"]
    pub fn Vec_StrEntry(p: *mut Vec_Str_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrEntryP_imctk_abc_sys"]
    pub fn Vec_StrEntryP(
        p: *mut Vec_Str_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrWriteEntry_imctk_abc_sys"]
    pub fn Vec_StrWriteEntry(
        p: *mut Vec_Str_t,
        i: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "Vec_StrEntryLast_imctk_abc_sys"]
    pub fn Vec_StrEntryLast(p: *mut Vec_Str_t) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrGrow_imctk_abc_sys"]
    pub fn Vec_StrGrow(p: *mut Vec_Str_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_StrFill_imctk_abc_sys"]
    pub fn Vec_StrFill(
        p: *mut Vec_Str_t,
        nSize: ::std::os::raw::c_int,
        Fill: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "Vec_StrFillExtra_imctk_abc_sys"]
    pub fn Vec_StrFillExtra(
        p: *mut Vec_Str_t,
        nSize: ::std::os::raw::c_int,
        Fill: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "Vec_StrGetEntry_imctk_abc_sys"]
    pub fn Vec_StrGetEntry(p: *mut Vec_Str_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrSetEntry_imctk_abc_sys"]
    pub fn Vec_StrSetEntry(
        p: *mut Vec_Str_t,
        i: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "Vec_StrShrink_imctk_abc_sys"]
    pub fn Vec_StrShrink(p: *mut Vec_Str_t, nSizeNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_StrClear_imctk_abc_sys"]
    pub fn Vec_StrClear(p: *mut Vec_Str_t);
}
extern "C" {
    #[link_name = "Vec_StrPush_imctk_abc_sys"]
    pub fn Vec_StrPush(p: *mut Vec_Str_t, Entry: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Vec_StrPushTwo_imctk_abc_sys"]
    pub fn Vec_StrPushTwo(
        p: *mut Vec_Str_t,
        Entry1: ::std::os::raw::c_char,
        Entry2: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "Vec_StrPushBuffer_imctk_abc_sys"]
    pub fn Vec_StrPushBuffer(
        p: *mut Vec_Str_t,
        pBuffer: *mut ::std::os::raw::c_char,
        nSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_StrPop_imctk_abc_sys"]
    pub fn Vec_StrPop(p: *mut Vec_Str_t) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrIntPrint_imctk_abc_sys"]
    pub fn Vec_StrIntPrint(p: *mut Vec_Str_t);
}
extern "C" {
    #[link_name = "Vec_StrPrintNum_imctk_abc_sys"]
    pub fn Vec_StrPrintNum(p: *mut Vec_Str_t, Num: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_StrPrintNumStar_imctk_abc_sys"]
    pub fn Vec_StrPrintNumStar(
        p: *mut Vec_Str_t,
        Num: ::std::os::raw::c_int,
        nDigits: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_StrPrintStr_imctk_abc_sys"]
    pub fn Vec_StrPrintStr(p: *mut Vec_Str_t, pStr: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Vec_StrAppend_imctk_abc_sys"]
    pub fn Vec_StrAppend(p: *mut Vec_Str_t, pString: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Vec_StrCopy_imctk_abc_sys"]
    pub fn Vec_StrCopy(p: *mut Vec_Str_t, pString: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Vec_StrReverseOrder_imctk_abc_sys"]
    pub fn Vec_StrReverseOrder(p: *mut Vec_Str_t);
}
extern "C" {
    #[link_name = "Vec_StrSum_imctk_abc_sys"]
    pub fn Vec_StrSum(p: *mut Vec_Str_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrCountEntry_imctk_abc_sys"]
    pub fn Vec_StrCountEntry(
        p: *mut Vec_Str_t,
        Entry: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrCountLarger_imctk_abc_sys"]
    pub fn Vec_StrCountLarger(
        p: *mut Vec_Str_t,
        Entry: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrCountSmaller_imctk_abc_sys"]
    pub fn Vec_StrCountSmaller(
        p: *mut Vec_Str_t,
        Entry: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrCountEntryLit_imctk_abc_sys"]
    pub fn Vec_StrCountEntryLit(
        p: *mut Vec_Str_t,
        Entry: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrCountLargerLit_imctk_abc_sys"]
    pub fn Vec_StrCountLargerLit(
        p: *mut Vec_Str_t,
        Entry: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrCountSmallerLit_imctk_abc_sys"]
    pub fn Vec_StrCountSmallerLit(
        p: *mut Vec_Str_t,
        Entry: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrEqual_imctk_abc_sys"]
    pub fn Vec_StrEqual(p1: *mut Vec_Str_t, p2: *mut Vec_Str_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrSortCompare1_imctk_abc_sys"]
    pub fn Vec_StrSortCompare1(
        pp1: *mut ::std::os::raw::c_char,
        pp2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrSortCompare2_imctk_abc_sys"]
    pub fn Vec_StrSortCompare2(
        pp1: *mut ::std::os::raw::c_char,
        pp2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrSort_imctk_abc_sys"]
    pub fn Vec_StrSort(p: *mut Vec_Str_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_StrCompareVec_imctk_abc_sys"]
    pub fn Vec_StrCompareVec(p1: *mut Vec_Str_t, p2: *mut Vec_Str_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrPutI_ne_imctk_abc_sys"]
    pub fn Vec_StrPutI_ne(vOut: *mut Vec_Str_t, Val: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_StrGetI_ne_imctk_abc_sys"]
    pub fn Vec_StrGetI_ne(
        vOut: *mut Vec_Str_t,
        pPos: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrPutI_imctk_abc_sys"]
    pub fn Vec_StrPutI(vOut: *mut Vec_Str_t, Val: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_StrGetI_imctk_abc_sys"]
    pub fn Vec_StrGetI(
        vOut: *mut Vec_Str_t,
        pPos: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_StrPutW_imctk_abc_sys"]
    pub fn Vec_StrPutW(vOut: *mut Vec_Str_t, Val: word);
}
extern "C" {
    #[link_name = "Vec_StrGetW_imctk_abc_sys"]
    pub fn Vec_StrGetW(vOut: *mut Vec_Str_t, pPos: *mut ::std::os::raw::c_int) -> word;
}
extern "C" {
    #[link_name = "Vec_StrPutF_imctk_abc_sys"]
    pub fn Vec_StrPutF(vOut: *mut Vec_Str_t, Val: f32);
}
extern "C" {
    #[link_name = "Vec_StrGetF_imctk_abc_sys"]
    pub fn Vec_StrGetF(vOut: *mut Vec_Str_t, pPos: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "Vec_StrPutD_imctk_abc_sys"]
    pub fn Vec_StrPutD(vOut: *mut Vec_Str_t, Val: f64);
}
extern "C" {
    #[link_name = "Vec_StrGetD_imctk_abc_sys"]
    pub fn Vec_StrGetD(vOut: *mut Vec_Str_t, pPos: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "Vec_StrPutS_imctk_abc_sys"]
    pub fn Vec_StrPutS(vOut: *mut Vec_Str_t, pStr: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Vec_StrGetS_imctk_abc_sys"]
    pub fn Vec_StrGetS(
        vOut: *mut Vec_Str_t,
        pPos: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Vec_StrPutC_imctk_abc_sys"]
    pub fn Vec_StrPutC(vOut: *mut Vec_Str_t, c: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Vec_StrGetC_imctk_abc_sys"]
    pub fn Vec_StrGetC(
        vOut: *mut Vec_Str_t,
        pPos: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
pub type Vec_Ptr_t = Vec_Ptr_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Ptr_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Ptr_t_"][::std::mem::size_of::<Vec_Ptr_t_>() - 16usize];
    ["Alignment of Vec_Ptr_t_"][::std::mem::align_of::<Vec_Ptr_t_>() - 8usize];
    ["Offset of field: Vec_Ptr_t_::nCap"][::std::mem::offset_of!(Vec_Ptr_t_, nCap) - 0usize];
    ["Offset of field: Vec_Ptr_t_::nSize"][::std::mem::offset_of!(Vec_Ptr_t_, nSize) - 4usize];
    ["Offset of field: Vec_Ptr_t_::pArray"][::std::mem::offset_of!(Vec_Ptr_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_PtrAlloc_imctk_abc_sys"]
    pub fn Vec_PtrAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrAllocExact_imctk_abc_sys"]
    pub fn Vec_PtrAllocExact(nCap: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrStart_imctk_abc_sys"]
    pub fn Vec_PtrStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrAllocArray_imctk_abc_sys"]
    pub fn Vec_PtrAllocArray(
        pArray: *mut *mut ::std::os::raw::c_void,
        nSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrAllocArrayCopy_imctk_abc_sys"]
    pub fn Vec_PtrAllocArrayCopy(
        pArray: *mut *mut ::std::os::raw::c_void,
        nSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrDup_imctk_abc_sys"]
    pub fn Vec_PtrDup(pVec: *mut Vec_Ptr_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrDupStr_imctk_abc_sys"]
    pub fn Vec_PtrDupStr(pVec: *mut Vec_Ptr_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrDupArray_imctk_abc_sys"]
    pub fn Vec_PtrDupArray(pVec: *mut Vec_Ptr_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrZero_imctk_abc_sys"]
    pub fn Vec_PtrZero(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrErase_imctk_abc_sys"]
    pub fn Vec_PtrErase(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrFree_imctk_abc_sys"]
    pub fn Vec_PtrFree(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrFreeP_imctk_abc_sys"]
    pub fn Vec_PtrFreeP(p: *mut *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrReleaseArray_imctk_abc_sys"]
    pub fn Vec_PtrReleaseArray(p: *mut Vec_Ptr_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_PtrArray_imctk_abc_sys"]
    pub fn Vec_PtrArray(p: *mut Vec_Ptr_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_PtrSize_imctk_abc_sys"]
    pub fn Vec_PtrSize(p: *mut Vec_Ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrCap_imctk_abc_sys"]
    pub fn Vec_PtrCap(p: *mut Vec_Ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrMemory_imctk_abc_sys"]
    pub fn Vec_PtrMemory(p: *mut Vec_Ptr_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_PtrCountZero_imctk_abc_sys"]
    pub fn Vec_PtrCountZero(p: *mut Vec_Ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrEntry_imctk_abc_sys"]
    pub fn Vec_PtrEntry(p: *mut Vec_Ptr_t, i: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_PtrEntryP_imctk_abc_sys"]
    pub fn Vec_PtrEntryP(
        p: *mut Vec_Ptr_t,
        i: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_PtrWriteEntry_imctk_abc_sys"]
    pub fn Vec_PtrWriteEntry(
        p: *mut Vec_Ptr_t,
        i: ::std::os::raw::c_int,
        Entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_PtrEntryLast_imctk_abc_sys"]
    pub fn Vec_PtrEntryLast(p: *mut Vec_Ptr_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_PtrGrow_imctk_abc_sys"]
    pub fn Vec_PtrGrow(p: *mut Vec_Ptr_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_PtrFill_imctk_abc_sys"]
    pub fn Vec_PtrFill(
        p: *mut Vec_Ptr_t,
        nSize: ::std::os::raw::c_int,
        Entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_PtrFillTwo_imctk_abc_sys"]
    pub fn Vec_PtrFillTwo(
        p: *mut Vec_Ptr_t,
        nSize: ::std::os::raw::c_int,
        EntryEven: *mut ::std::os::raw::c_void,
        EntryOdd: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_PtrFillExtra_imctk_abc_sys"]
    pub fn Vec_PtrFillExtra(
        p: *mut Vec_Ptr_t,
        nSize: ::std::os::raw::c_int,
        Fill: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_PtrGetEntry_imctk_abc_sys"]
    pub fn Vec_PtrGetEntry(
        p: *mut Vec_Ptr_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_PtrSetEntry_imctk_abc_sys"]
    pub fn Vec_PtrSetEntry(
        p: *mut Vec_Ptr_t,
        i: ::std::os::raw::c_int,
        Entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_PtrShrink_imctk_abc_sys"]
    pub fn Vec_PtrShrink(p: *mut Vec_Ptr_t, nSizeNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_PtrClear_imctk_abc_sys"]
    pub fn Vec_PtrClear(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrFreeData_imctk_abc_sys"]
    pub fn Vec_PtrFreeData(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrFreeFree_imctk_abc_sys"]
    pub fn Vec_PtrFreeFree(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrFreeFunc_imctk_abc_sys"]
    pub fn Vec_PtrFreeFunc(
        p: *mut Vec_Ptr_t,
        pFuncItemFree: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    #[link_name = "Vec_PtrCopy_imctk_abc_sys"]
    pub fn Vec_PtrCopy(pDest: *mut Vec_Ptr_t, pSour: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrPrintNames_imctk_abc_sys"]
    pub fn Vec_PtrPrintNames(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrPush_imctk_abc_sys"]
    pub fn Vec_PtrPush(p: *mut Vec_Ptr_t, Entry: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "Vec_PtrPushTwo_imctk_abc_sys"]
    pub fn Vec_PtrPushTwo(
        p: *mut Vec_Ptr_t,
        Entry1: *mut ::std::os::raw::c_void,
        Entry2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_PtrAppend_imctk_abc_sys"]
    pub fn Vec_PtrAppend(vVec1: *mut Vec_Ptr_t, vVec2: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrPushFirst_imctk_abc_sys"]
    pub fn Vec_PtrPushFirst(p: *mut Vec_Ptr_t, Entry: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "Vec_PtrPushUnique_imctk_abc_sys"]
    pub fn Vec_PtrPushUnique(
        p: *mut Vec_Ptr_t,
        Entry: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrPop_imctk_abc_sys"]
    pub fn Vec_PtrPop(p: *mut Vec_Ptr_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_PtrFind_imctk_abc_sys"]
    pub fn Vec_PtrFind(
        p: *mut Vec_Ptr_t,
        Entry: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrFindStr_imctk_abc_sys"]
    pub fn Vec_PtrFindStr(
        p: *mut Vec_Ptr_t,
        Entry: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrRemove_imctk_abc_sys"]
    pub fn Vec_PtrRemove(p: *mut Vec_Ptr_t, Entry: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "Vec_PtrDrop_imctk_abc_sys"]
    pub fn Vec_PtrDrop(p: *mut Vec_Ptr_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_PtrInsert_imctk_abc_sys"]
    pub fn Vec_PtrInsert(
        p: *mut Vec_Ptr_t,
        iHere: ::std::os::raw::c_int,
        Entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_PtrReorder_imctk_abc_sys"]
    pub fn Vec_PtrReorder(p: *mut Vec_Ptr_t, nItems: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_PtrReverseOrder_imctk_abc_sys"]
    pub fn Vec_PtrReverseOrder(p: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrEqual_imctk_abc_sys"]
    pub fn Vec_PtrEqual(p1: *mut Vec_Ptr_t, p2: *mut Vec_Ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrSortComparePtr_imctk_abc_sys"]
    pub fn Vec_PtrSortComparePtr(
        pp1: *mut *mut ::std::os::raw::c_void,
        pp2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrSort_imctk_abc_sys"]
    pub fn Vec_PtrSort(
        p: *mut Vec_Ptr_t,
        Vec_PtrSortCompare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "Vec_PtrUniqify_imctk_abc_sys"]
    pub fn Vec_PtrUniqify(
        p: *mut Vec_Ptr_t,
        Vec_PtrSortCompare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "Vec_PtrUniqify2_imctk_abc_sys"]
    pub fn Vec_PtrUniqify2(
        p: *mut Vec_Ptr_t,
        Vec_PtrSortCompare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        Vec_PtrObjFree: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        vCounts: *mut Vec_Int_t,
    );
}
extern "C" {
    #[link_name = "Vec_PtrAllocSimInfo_imctk_abc_sys"]
    pub fn Vec_PtrAllocSimInfo(
        nEntries: ::std::os::raw::c_int,
        nWords: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_PtrReadWordsSimInfo_imctk_abc_sys"]
    pub fn Vec_PtrReadWordsSimInfo(p: *mut Vec_Ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_PtrCleanSimInfo_imctk_abc_sys"]
    pub fn Vec_PtrCleanSimInfo(
        vInfo: *mut Vec_Ptr_t,
        iWord: ::std::os::raw::c_int,
        nWords: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_PtrFillSimInfo_imctk_abc_sys"]
    pub fn Vec_PtrFillSimInfo(
        vInfo: *mut Vec_Ptr_t,
        iWord: ::std::os::raw::c_int,
        nWords: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_PtrDoubleSimInfo_imctk_abc_sys"]
    pub fn Vec_PtrDoubleSimInfo(vInfo: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrReallocSimInfo_imctk_abc_sys"]
    pub fn Vec_PtrReallocSimInfo(vInfo: *mut Vec_Ptr_t);
}
extern "C" {
    #[link_name = "Vec_PtrAllocTruthTables_imctk_abc_sys"]
    pub fn Vec_PtrAllocTruthTables(nVars: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
pub type Vec_Vec_t = Vec_Vec_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Vec_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Vec_t_"][::std::mem::size_of::<Vec_Vec_t_>() - 16usize];
    ["Alignment of Vec_Vec_t_"][::std::mem::align_of::<Vec_Vec_t_>() - 8usize];
    ["Offset of field: Vec_Vec_t_::nCap"][::std::mem::offset_of!(Vec_Vec_t_, nCap) - 0usize];
    ["Offset of field: Vec_Vec_t_::nSize"][::std::mem::offset_of!(Vec_Vec_t_, nSize) - 4usize];
    ["Offset of field: Vec_Vec_t_::pArray"][::std::mem::offset_of!(Vec_Vec_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_VecAlloc_imctk_abc_sys"]
    pub fn Vec_VecAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Vec_t;
}
extern "C" {
    #[link_name = "Vec_VecStart_imctk_abc_sys"]
    pub fn Vec_VecStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Vec_t;
}
extern "C" {
    #[link_name = "Vec_VecExpand_imctk_abc_sys"]
    pub fn Vec_VecExpand(p: *mut Vec_Vec_t, Level: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_VecExpandInt_imctk_abc_sys"]
    pub fn Vec_VecExpandInt(p: *mut Vec_Vec_t, Level: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_VecSize_imctk_abc_sys"]
    pub fn Vec_VecSize(p: *mut Vec_Vec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecCap_imctk_abc_sys"]
    pub fn Vec_VecCap(p: *mut Vec_Vec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecLevelSize_imctk_abc_sys"]
    pub fn Vec_VecLevelSize(p: *mut Vec_Vec_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecEntry_imctk_abc_sys"]
    pub fn Vec_VecEntry(p: *mut Vec_Vec_t, i: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_VecEntryInt_imctk_abc_sys"]
    pub fn Vec_VecEntryInt(p: *mut Vec_Vec_t, i: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_VecMemory_imctk_abc_sys"]
    pub fn Vec_VecMemory(p: *mut Vec_Vec_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_VecMemoryInt_imctk_abc_sys"]
    pub fn Vec_VecMemoryInt(p: *mut Vec_Vec_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_VecEntryEntry_imctk_abc_sys"]
    pub fn Vec_VecEntryEntry(
        p: *mut Vec_Vec_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_VecEntryEntryInt_imctk_abc_sys"]
    pub fn Vec_VecEntryEntryInt(
        p: *mut Vec_Vec_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecFree_imctk_abc_sys"]
    pub fn Vec_VecFree(p: *mut Vec_Vec_t);
}
extern "C" {
    #[link_name = "Vec_VecErase_imctk_abc_sys"]
    pub fn Vec_VecErase(p: *mut Vec_Vec_t);
}
extern "C" {
    #[link_name = "Vec_VecFreeP_imctk_abc_sys"]
    pub fn Vec_VecFreeP(p: *mut *mut Vec_Vec_t);
}
extern "C" {
    #[link_name = "Vec_VecDup_imctk_abc_sys"]
    pub fn Vec_VecDup(p: *mut Vec_Vec_t) -> *mut Vec_Vec_t;
}
extern "C" {
    #[link_name = "Vec_VecDupInt_imctk_abc_sys"]
    pub fn Vec_VecDupInt(p: *mut Vec_Vec_t) -> *mut Vec_Vec_t;
}
extern "C" {
    #[link_name = "Vec_VecSizeSize_imctk_abc_sys"]
    pub fn Vec_VecSizeSize(p: *mut Vec_Vec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecClear_imctk_abc_sys"]
    pub fn Vec_VecClear(p: *mut Vec_Vec_t);
}
extern "C" {
    #[link_name = "Vec_VecPush_imctk_abc_sys"]
    pub fn Vec_VecPush(
        p: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
        Entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_VecPushInt_imctk_abc_sys"]
    pub fn Vec_VecPushInt(
        p: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_VecPushUnique_imctk_abc_sys"]
    pub fn Vec_VecPushUnique(
        p: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
        Entry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_VecPushUniqueInt_imctk_abc_sys"]
    pub fn Vec_VecPushUniqueInt(
        p: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_VecSortCompare1_imctk_abc_sys"]
    pub fn Vec_VecSortCompare1(
        pp1: *mut *mut Vec_Ptr_t,
        pp2: *mut *mut Vec_Ptr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecSortCompare2_imctk_abc_sys"]
    pub fn Vec_VecSortCompare2(
        pp1: *mut *mut Vec_Ptr_t,
        pp2: *mut *mut Vec_Ptr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecSort_imctk_abc_sys"]
    pub fn Vec_VecSort(p: *mut Vec_Vec_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_VecSortCompare3_imctk_abc_sys"]
    pub fn Vec_VecSortCompare3(
        pp1: *mut *mut Vec_Int_t,
        pp2: *mut *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecSortCompare4_imctk_abc_sys"]
    pub fn Vec_VecSortCompare4(
        pp1: *mut *mut Vec_Int_t,
        pp2: *mut *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_VecSortByFirstInt_imctk_abc_sys"]
    pub fn Vec_VecSortByFirstInt(p: *mut Vec_Vec_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_VecPrintInt_imctk_abc_sys"]
    pub fn Vec_VecPrintInt(p: *mut Vec_Vec_t, fSkipSingles: ::std::os::raw::c_int);
}
pub const Vec_AttrType_t_VEC_ATTR_NONE: Vec_AttrType_t = 0;
pub const Vec_AttrType_t_VEC_ATTR_COPY: Vec_AttrType_t = 1;
pub const Vec_AttrType_t_VEC_ATTR_LOCAL_AIG: Vec_AttrType_t = 2;
pub const Vec_AttrType_t_VEC_ATTR_LOCAL_SOP: Vec_AttrType_t = 3;
pub const Vec_AttrType_t_VEC_ATTR_LOCAL_BDD: Vec_AttrType_t = 4;
pub const Vec_AttrType_t_VEC_ATTR_GLOBAL_AIG: Vec_AttrType_t = 5;
pub const Vec_AttrType_t_VEC_ATTR_GLOBAL_SOP: Vec_AttrType_t = 6;
pub const Vec_AttrType_t_VEC_ATTR_GLOBAL_BDD: Vec_AttrType_t = 7;
pub const Vec_AttrType_t_VEC_ATTR_LEVEL: Vec_AttrType_t = 8;
pub const Vec_AttrType_t_VEC_ATTR_LEVEL_REV: Vec_AttrType_t = 9;
pub const Vec_AttrType_t_VEC_ATTR_RETIME_LAG: Vec_AttrType_t = 10;
pub const Vec_AttrType_t_VEC_ATTR_FRAIG: Vec_AttrType_t = 11;
pub const Vec_AttrType_t_VEC_ATTR_MVVAR: Vec_AttrType_t = 12;
pub const Vec_AttrType_t_VEC_ATTR_DATA1: Vec_AttrType_t = 13;
pub const Vec_AttrType_t_VEC_ATTR_DATA2: Vec_AttrType_t = 14;
pub const Vec_AttrType_t_VEC_ATTR_TOTAL_NUM: Vec_AttrType_t = 15;
pub type Vec_AttrType_t = ::std::os::raw::c_uint;
pub type Vec_Att_t = Vec_Att_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Att_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub pArrayPtr: *mut *mut ::std::os::raw::c_void,
    pub pMan: *mut ::std::os::raw::c_void,
    pub pFuncFreeMan:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub pFuncStartObj: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub pFuncFreeObj: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Att_t_"][::std::mem::size_of::<Vec_Att_t_>() - 48usize];
    ["Alignment of Vec_Att_t_"][::std::mem::align_of::<Vec_Att_t_>() - 8usize];
    ["Offset of field: Vec_Att_t_::nCap"][::std::mem::offset_of!(Vec_Att_t_, nCap) - 0usize];
    ["Offset of field: Vec_Att_t_::pArrayPtr"]
        [::std::mem::offset_of!(Vec_Att_t_, pArrayPtr) - 8usize];
    ["Offset of field: Vec_Att_t_::pMan"][::std::mem::offset_of!(Vec_Att_t_, pMan) - 16usize];
    ["Offset of field: Vec_Att_t_::pFuncFreeMan"]
        [::std::mem::offset_of!(Vec_Att_t_, pFuncFreeMan) - 24usize];
    ["Offset of field: Vec_Att_t_::pFuncStartObj"]
        [::std::mem::offset_of!(Vec_Att_t_, pFuncStartObj) - 32usize];
    ["Offset of field: Vec_Att_t_::pFuncFreeObj"]
        [::std::mem::offset_of!(Vec_Att_t_, pFuncFreeObj) - 40usize];
};
extern "C" {
    #[link_name = "Vec_AttAlloc_imctk_abc_sys"]
    pub fn Vec_AttAlloc(
        nSize: ::std::os::raw::c_int,
        pMan: *mut ::std::os::raw::c_void,
        pFuncFreeMan: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        pFuncStartObj: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        pFuncFreeObj: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> *mut Vec_Att_t;
}
extern "C" {
    #[link_name = "Vec_AttFree_imctk_abc_sys"]
    pub fn Vec_AttFree(
        p: *mut Vec_Att_t,
        fFreeMan: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_AttClear_imctk_abc_sys"]
    pub fn Vec_AttClear(p: *mut Vec_Att_t);
}
extern "C" {
    #[link_name = "Vec_AttFreeEntry_imctk_abc_sys"]
    pub fn Vec_AttFreeEntry(p: *mut Vec_Att_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_AttGrow_imctk_abc_sys"]
    pub fn Vec_AttGrow(p: *mut Vec_Att_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_AttWriteEntry_imctk_abc_sys"]
    pub fn Vec_AttWriteEntry(
        p: *mut Vec_Att_t,
        i: ::std::os::raw::c_int,
        pEntry: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "Vec_AttEntry_imctk_abc_sys"]
    pub fn Vec_AttEntry(p: *mut Vec_Att_t, i: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_AttMan_imctk_abc_sys"]
    pub fn Vec_AttMan(p: *mut Vec_Att_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Vec_AttArray_imctk_abc_sys"]
    pub fn Vec_AttArray(p: *mut Vec_Att_t) -> *mut *mut ::std::os::raw::c_void;
}
pub type Vec_Wrd_t = Vec_Wrd_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Wrd_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Wrd_t_"][::std::mem::size_of::<Vec_Wrd_t_>() - 16usize];
    ["Alignment of Vec_Wrd_t_"][::std::mem::align_of::<Vec_Wrd_t_>() - 8usize];
    ["Offset of field: Vec_Wrd_t_::nCap"][::std::mem::offset_of!(Vec_Wrd_t_, nCap) - 0usize];
    ["Offset of field: Vec_Wrd_t_::nSize"][::std::mem::offset_of!(Vec_Wrd_t_, nSize) - 4usize];
    ["Offset of field: Vec_Wrd_t_::pArray"][::std::mem::offset_of!(Vec_Wrd_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_WrdAlloc_imctk_abc_sys"]
    pub fn Vec_WrdAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdAllocExact_imctk_abc_sys"]
    pub fn Vec_WrdAllocExact(nCap: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdStart_imctk_abc_sys"]
    pub fn Vec_WrdStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdStartFull_imctk_abc_sys"]
    pub fn Vec_WrdStartFull(nSize: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdStartNatural_imctk_abc_sys"]
    pub fn Vec_WrdStartNatural(nSize: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdStartRandom_imctk_abc_sys"]
    pub fn Vec_WrdStartRandom(nSize: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdStartTruthTables_imctk_abc_sys"]
    pub fn Vec_WrdStartTruthTables(nVars: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdStartTruthTablesRev_imctk_abc_sys"]
    pub fn Vec_WrdStartTruthTablesRev(nVars: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdShiftOne_imctk_abc_sys"]
    pub fn Vec_WrdShiftOne(
        p: *mut Vec_Wrd_t,
        nWords: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdAllocArray_imctk_abc_sys"]
    pub fn Vec_WrdAllocArray(pArray: *mut word, nSize: ::std::os::raw::c_int) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdAllocArrayCopy_imctk_abc_sys"]
    pub fn Vec_WrdAllocArrayCopy(pArray: *mut word, nSize: ::std::os::raw::c_int)
        -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdDup_imctk_abc_sys"]
    pub fn Vec_WrdDup(pVec: *mut Vec_Wrd_t) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdDupArray_imctk_abc_sys"]
    pub fn Vec_WrdDupArray(pVec: *mut Vec_Wrd_t) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdErase_imctk_abc_sys"]
    pub fn Vec_WrdErase(p: *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdFree_imctk_abc_sys"]
    pub fn Vec_WrdFree(p: *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdFreeP_imctk_abc_sys"]
    pub fn Vec_WrdFreeP(p: *mut *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdReleaseArray_imctk_abc_sys"]
    pub fn Vec_WrdReleaseArray(p: *mut Vec_Wrd_t) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_WrdArray_imctk_abc_sys"]
    pub fn Vec_WrdArray(p: *mut Vec_Wrd_t) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_WrdLimit_imctk_abc_sys"]
    pub fn Vec_WrdLimit(p: *mut Vec_Wrd_t) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_WrdSize_imctk_abc_sys"]
    pub fn Vec_WrdSize(p: *mut Vec_Wrd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdChangeSize_imctk_abc_sys"]
    pub fn Vec_WrdChangeSize(
        p: *mut Vec_Wrd_t,
        Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdCap_imctk_abc_sys"]
    pub fn Vec_WrdCap(p: *mut Vec_Wrd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdMemory_imctk_abc_sys"]
    pub fn Vec_WrdMemory(p: *mut Vec_Wrd_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_WrdEntry_imctk_abc_sys"]
    pub fn Vec_WrdEntry(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdEntryP_imctk_abc_sys"]
    pub fn Vec_WrdEntryP(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_WrdWriteEntry_imctk_abc_sys"]
    pub fn Vec_WrdWriteEntry(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int, Entry: word);
}
extern "C" {
    #[link_name = "Vec_WrdAddToEntry_imctk_abc_sys"]
    pub fn Vec_WrdAddToEntry(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int, Addition: word) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdEntryLast_imctk_abc_sys"]
    pub fn Vec_WrdEntryLast(p: *mut Vec_Wrd_t) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdGrow_imctk_abc_sys"]
    pub fn Vec_WrdGrow(p: *mut Vec_Wrd_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WrdFill_imctk_abc_sys"]
    pub fn Vec_WrdFill(p: *mut Vec_Wrd_t, nSize: ::std::os::raw::c_int, Fill: word);
}
extern "C" {
    #[link_name = "Vec_WrdFillExtra_imctk_abc_sys"]
    pub fn Vec_WrdFillExtra(p: *mut Vec_Wrd_t, nSize: ::std::os::raw::c_int, Fill: word);
}
extern "C" {
    #[link_name = "Vec_WrdGetEntry_imctk_abc_sys"]
    pub fn Vec_WrdGetEntry(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdGetEntryP_imctk_abc_sys"]
    pub fn Vec_WrdGetEntryP(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_WrdSetEntry_imctk_abc_sys"]
    pub fn Vec_WrdSetEntry(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int, Entry: word);
}
extern "C" {
    #[link_name = "Vec_WrdShrink_imctk_abc_sys"]
    pub fn Vec_WrdShrink(p: *mut Vec_Wrd_t, nSizeNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WrdClear_imctk_abc_sys"]
    pub fn Vec_WrdClear(p: *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdPush_imctk_abc_sys"]
    pub fn Vec_WrdPush(p: *mut Vec_Wrd_t, Entry: word);
}
extern "C" {
    #[link_name = "Vec_WrdPushTwo_imctk_abc_sys"]
    pub fn Vec_WrdPushTwo(p: *mut Vec_Wrd_t, Entry1: word, Entry2: word);
}
extern "C" {
    #[link_name = "Vec_WrdPushThree_imctk_abc_sys"]
    pub fn Vec_WrdPushThree(p: *mut Vec_Wrd_t, Entry1: word, Entry2: word, Entry3: word);
}
extern "C" {
    #[link_name = "Vec_WrdPushFour_imctk_abc_sys"]
    pub fn Vec_WrdPushFour(
        p: *mut Vec_Wrd_t,
        Entry1: word,
        Entry2: word,
        Entry3: word,
        Entry4: word,
    );
}
extern "C" {
    #[link_name = "Vec_WrdPushArray_imctk_abc_sys"]
    pub fn Vec_WrdPushArray(
        p: *mut Vec_Wrd_t,
        pEntries: *mut word,
        nEntries: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WrdPushFirst_imctk_abc_sys"]
    pub fn Vec_WrdPushFirst(p: *mut Vec_Wrd_t, Entry: word);
}
extern "C" {
    #[link_name = "Vec_WrdPushOrder_imctk_abc_sys"]
    pub fn Vec_WrdPushOrder(p: *mut Vec_Wrd_t, Entry: word);
}
extern "C" {
    #[link_name = "Vec_WrdPushUniqueOrder_imctk_abc_sys"]
    pub fn Vec_WrdPushUniqueOrder(p: *mut Vec_Wrd_t, Entry: word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdPushUnique_imctk_abc_sys"]
    pub fn Vec_WrdPushUnique(p: *mut Vec_Wrd_t, Entry: word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdFetch_imctk_abc_sys"]
    pub fn Vec_WrdFetch(p: *mut Vec_Wrd_t, nWords: ::std::os::raw::c_int) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_WrdPop_imctk_abc_sys"]
    pub fn Vec_WrdPop(p: *mut Vec_Wrd_t) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdFind_imctk_abc_sys"]
    pub fn Vec_WrdFind(p: *mut Vec_Wrd_t, Entry: word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdRemove_imctk_abc_sys"]
    pub fn Vec_WrdRemove(p: *mut Vec_Wrd_t, Entry: word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdInsert_imctk_abc_sys"]
    pub fn Vec_WrdInsert(p: *mut Vec_Wrd_t, iHere: ::std::os::raw::c_int, Entry: word);
}
extern "C" {
    #[link_name = "Vec_WrdDrop_imctk_abc_sys"]
    pub fn Vec_WrdDrop(p: *mut Vec_Wrd_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WrdFindMax_imctk_abc_sys"]
    pub fn Vec_WrdFindMax(p: *mut Vec_Wrd_t) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdFindMin_imctk_abc_sys"]
    pub fn Vec_WrdFindMin(p: *mut Vec_Wrd_t) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdReverseOrder_imctk_abc_sys"]
    pub fn Vec_WrdReverseOrder(p: *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdInvert_imctk_abc_sys"]
    pub fn Vec_WrdInvert(p: *mut Vec_Wrd_t, Fill: word) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdSum_imctk_abc_sys"]
    pub fn Vec_WrdSum(p: *mut Vec_Wrd_t) -> word;
}
extern "C" {
    #[link_name = "Vec_WrdCountZero_imctk_abc_sys"]
    pub fn Vec_WrdCountZero(p: *mut Vec_Wrd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdEqual_imctk_abc_sys"]
    pub fn Vec_WrdEqual(p1: *mut Vec_Wrd_t, p2: *mut Vec_Wrd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdCountCommon_imctk_abc_sys"]
    pub fn Vec_WrdCountCommon(p1: *mut Vec_Wrd_t, p2: *mut Vec_Wrd_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdSortCompare1_imctk_abc_sys"]
    pub fn Vec_WrdSortCompare1(pp1: *mut word, pp2: *mut word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdSortCompare2_imctk_abc_sys"]
    pub fn Vec_WrdSortCompare2(pp1: *mut word, pp2: *mut word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdSort_imctk_abc_sys"]
    pub fn Vec_WrdSort(p: *mut Vec_Wrd_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WrdUniqify_imctk_abc_sys"]
    pub fn Vec_WrdUniqify(p: *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdUniqueCount_imctk_abc_sys"]
    pub fn Vec_WrdUniqueCount(
        vData: *mut Vec_Wrd_t,
        nWordSize: ::std::os::raw::c_int,
        pvMap: *mut *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdUniqifyHash_imctk_abc_sys"]
    pub fn Vec_WrdUniqifyHash(
        vData: *mut Vec_Wrd_t,
        nWordSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdTwoCountCommon_imctk_abc_sys"]
    pub fn Vec_WrdTwoCountCommon(
        vArr1: *mut Vec_Wrd_t,
        vArr2: *mut Vec_Wrd_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdSortCompareUnsigned_imctk_abc_sys"]
    pub fn Vec_WrdSortCompareUnsigned(pp1: *mut word, pp2: *mut word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdSortUnsigned_imctk_abc_sys"]
    pub fn Vec_WrdSortUnsigned(p: *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdAppend_imctk_abc_sys"]
    pub fn Vec_WrdAppend(vVec1: *mut Vec_Wrd_t, vVec2: *mut Vec_Wrd_t);
}
extern "C" {
    #[link_name = "Vec_WrdDumpBoolOne_imctk_abc_sys"]
    pub fn Vec_WrdDumpBoolOne(
        pFile: *mut FILE,
        pSim: *mut word,
        nBits: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WrdDumpBool_imctk_abc_sys"]
    pub fn Vec_WrdDumpBool(
        pFileName: *mut ::std::os::raw::c_char,
        p: *mut Vec_Wrd_t,
        nWords: ::std::os::raw::c_int,
        nBits: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WrdDumpHexOne_imctk_abc_sys"]
    pub fn Vec_WrdDumpHexOne(pFile: *mut FILE, pSim: *mut word, nWords: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WrdPrintHex_imctk_abc_sys"]
    pub fn Vec_WrdPrintHex(p: *mut Vec_Wrd_t, nWords: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WrdDumpHex_imctk_abc_sys"]
    pub fn Vec_WrdDumpHex(
        pFileName: *mut ::std::os::raw::c_char,
        p: *mut Vec_Wrd_t,
        nWords: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WrdReadHexOne_imctk_abc_sys"]
    pub fn Vec_WrdReadHexOne(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WrdReadHex_imctk_abc_sys"]
    pub fn Vec_WrdReadHex(
        pFileName: *mut ::std::os::raw::c_char,
        pnWords: *mut ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Wrd_t;
}
extern "C" {
    #[link_name = "Vec_WrdDumpBin_imctk_abc_sys"]
    pub fn Vec_WrdDumpBin(
        pFileName: *mut ::std::os::raw::c_char,
        p: *mut Vec_Wrd_t,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WrdReadBin_imctk_abc_sys"]
    pub fn Vec_WrdReadBin(
        pFileName: *mut ::std::os::raw::c_char,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Wrd_t;
}
pub type Vec_Bit_t = Vec_Bit_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Bit_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Bit_t_"][::std::mem::size_of::<Vec_Bit_t_>() - 16usize];
    ["Alignment of Vec_Bit_t_"][::std::mem::align_of::<Vec_Bit_t_>() - 8usize];
    ["Offset of field: Vec_Bit_t_::nCap"][::std::mem::offset_of!(Vec_Bit_t_, nCap) - 0usize];
    ["Offset of field: Vec_Bit_t_::nSize"][::std::mem::offset_of!(Vec_Bit_t_, nSize) - 4usize];
    ["Offset of field: Vec_Bit_t_::pArray"][::std::mem::offset_of!(Vec_Bit_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_BitAlloc_imctk_abc_sys"]
    pub fn Vec_BitAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Bit_t;
}
extern "C" {
    #[link_name = "Vec_BitStart_imctk_abc_sys"]
    pub fn Vec_BitStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Bit_t;
}
extern "C" {
    #[link_name = "Vec_BitStartFull_imctk_abc_sys"]
    pub fn Vec_BitStartFull(nSize: ::std::os::raw::c_int) -> *mut Vec_Bit_t;
}
extern "C" {
    #[link_name = "Vec_BitDup_imctk_abc_sys"]
    pub fn Vec_BitDup(pVec: *mut Vec_Bit_t) -> *mut Vec_Bit_t;
}
extern "C" {
    #[link_name = "Vec_BitFree_imctk_abc_sys"]
    pub fn Vec_BitFree(p: *mut Vec_Bit_t);
}
extern "C" {
    #[link_name = "Vec_BitFreeP_imctk_abc_sys"]
    pub fn Vec_BitFreeP(p: *mut *mut Vec_Bit_t);
}
extern "C" {
    #[link_name = "Vec_BitReleaseArray_imctk_abc_sys"]
    pub fn Vec_BitReleaseArray(p: *mut Vec_Bit_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitArray_imctk_abc_sys"]
    pub fn Vec_BitArray(p: *mut Vec_Bit_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitSize_imctk_abc_sys"]
    pub fn Vec_BitSize(p: *mut Vec_Bit_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitCap_imctk_abc_sys"]
    pub fn Vec_BitCap(p: *mut Vec_Bit_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitMemory_imctk_abc_sys"]
    pub fn Vec_BitMemory(p: *mut Vec_Bit_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_BitEntry_imctk_abc_sys"]
    pub fn Vec_BitEntry(p: *mut Vec_Bit_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitWriteEntry_imctk_abc_sys"]
    pub fn Vec_BitWriteEntry(
        p: *mut Vec_Bit_t,
        i: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_BitAddEntry_imctk_abc_sys"]
    pub fn Vec_BitAddEntry(p: *mut Vec_Bit_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitEntryLast_imctk_abc_sys"]
    pub fn Vec_BitEntryLast(p: *mut Vec_Bit_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitGrow_imctk_abc_sys"]
    pub fn Vec_BitGrow(p: *mut Vec_Bit_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_BitFill_imctk_abc_sys"]
    pub fn Vec_BitFill(
        p: *mut Vec_Bit_t,
        nSize: ::std::os::raw::c_int,
        Fill: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_BitFillExtra_imctk_abc_sys"]
    pub fn Vec_BitFillExtra(
        p: *mut Vec_Bit_t,
        nSize: ::std::os::raw::c_int,
        Fill: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_BitGetEntry_imctk_abc_sys"]
    pub fn Vec_BitGetEntry(p: *mut Vec_Bit_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitSetEntry_imctk_abc_sys"]
    pub fn Vec_BitSetEntry(
        p: *mut Vec_Bit_t,
        i: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_BitShrink_imctk_abc_sys"]
    pub fn Vec_BitShrink(p: *mut Vec_Bit_t, nSizeNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_BitClear_imctk_abc_sys"]
    pub fn Vec_BitClear(p: *mut Vec_Bit_t);
}
extern "C" {
    #[link_name = "Vec_BitPush_imctk_abc_sys"]
    pub fn Vec_BitPush(p: *mut Vec_Bit_t, Entry: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_BitPop_imctk_abc_sys"]
    pub fn Vec_BitPop(p: *mut Vec_Bit_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitCountWord_imctk_abc_sys"]
    pub fn Vec_BitCountWord(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitCount_imctk_abc_sys"]
    pub fn Vec_BitCount(p: *mut Vec_Bit_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_BitReset_imctk_abc_sys"]
    pub fn Vec_BitReset(p: *mut Vec_Bit_t);
}
extern "C" {
    #[link_name = "Vec_BitPrint_imctk_abc_sys"]
    pub fn Vec_BitPrint(p: *mut Vec_Bit_t);
}
pub type Vec_Mem_t = Vec_Mem_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Mem_t_ {
    pub nEntrySize: ::std::os::raw::c_int,
    pub nEntries: ::std::os::raw::c_int,
    pub LogPageSze: ::std::os::raw::c_int,
    pub PageMask: ::std::os::raw::c_int,
    pub nPageAlloc: ::std::os::raw::c_int,
    pub iPage: ::std::os::raw::c_int,
    pub ppPages: *mut *mut word,
    pub vTable: *mut Vec_Int_t,
    pub vNexts: *mut Vec_Int_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Mem_t_"][::std::mem::size_of::<Vec_Mem_t_>() - 48usize];
    ["Alignment of Vec_Mem_t_"][::std::mem::align_of::<Vec_Mem_t_>() - 8usize];
    ["Offset of field: Vec_Mem_t_::nEntrySize"]
        [::std::mem::offset_of!(Vec_Mem_t_, nEntrySize) - 0usize];
    ["Offset of field: Vec_Mem_t_::nEntries"]
        [::std::mem::offset_of!(Vec_Mem_t_, nEntries) - 4usize];
    ["Offset of field: Vec_Mem_t_::LogPageSze"]
        [::std::mem::offset_of!(Vec_Mem_t_, LogPageSze) - 8usize];
    ["Offset of field: Vec_Mem_t_::PageMask"]
        [::std::mem::offset_of!(Vec_Mem_t_, PageMask) - 12usize];
    ["Offset of field: Vec_Mem_t_::nPageAlloc"]
        [::std::mem::offset_of!(Vec_Mem_t_, nPageAlloc) - 16usize];
    ["Offset of field: Vec_Mem_t_::iPage"][::std::mem::offset_of!(Vec_Mem_t_, iPage) - 20usize];
    ["Offset of field: Vec_Mem_t_::ppPages"][::std::mem::offset_of!(Vec_Mem_t_, ppPages) - 24usize];
    ["Offset of field: Vec_Mem_t_::vTable"][::std::mem::offset_of!(Vec_Mem_t_, vTable) - 32usize];
    ["Offset of field: Vec_Mem_t_::vNexts"][::std::mem::offset_of!(Vec_Mem_t_, vNexts) - 40usize];
};
extern "C" {
    #[link_name = "Vec_MemAlloc__imctk_abc_sys"]
    pub fn Vec_MemAlloc_(
        p: *mut Vec_Mem_t,
        nEntrySize: ::std::os::raw::c_int,
        LogPageSze: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_MemAlloc_imctk_abc_sys"]
    pub fn Vec_MemAlloc(
        nEntrySize: ::std::os::raw::c_int,
        LogPageSze: ::std::os::raw::c_int,
    ) -> *mut Vec_Mem_t;
}
extern "C" {
    #[link_name = "Vec_MemFree_imctk_abc_sys"]
    pub fn Vec_MemFree(p: *mut Vec_Mem_t);
}
extern "C" {
    #[link_name = "Vec_MemFreeP_imctk_abc_sys"]
    pub fn Vec_MemFreeP(p: *mut *mut Vec_Mem_t);
}
extern "C" {
    #[link_name = "Vec_MemDup_imctk_abc_sys"]
    pub fn Vec_MemDup(pVec: *mut Vec_Mem_t) -> *mut Vec_Mem_t;
}
extern "C" {
    #[link_name = "Vec_MemFill_imctk_abc_sys"]
    pub fn Vec_MemFill(pVec: *mut Vec_Mem_t, nEntries: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_MemClean_imctk_abc_sys"]
    pub fn Vec_MemClean(pVec: *mut Vec_Mem_t, nEntries: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_MemEntrySize_imctk_abc_sys"]
    pub fn Vec_MemEntrySize(p: *mut Vec_Mem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_MemEntryNum_imctk_abc_sys"]
    pub fn Vec_MemEntryNum(p: *mut Vec_Mem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_MemPageSize_imctk_abc_sys"]
    pub fn Vec_MemPageSize(p: *mut Vec_Mem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_MemPageNum_imctk_abc_sys"]
    pub fn Vec_MemPageNum(p: *mut Vec_Mem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_MemMemory_imctk_abc_sys"]
    pub fn Vec_MemMemory(p: *mut Vec_Mem_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_MemReadEntry_imctk_abc_sys"]
    pub fn Vec_MemReadEntry(p: *mut Vec_Mem_t, i: ::std::os::raw::c_int) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_MemReadEntryLast_imctk_abc_sys"]
    pub fn Vec_MemReadEntryLast(p: *mut Vec_Mem_t) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_MemWriteEntry_imctk_abc_sys"]
    pub fn Vec_MemWriteEntry(p: *mut Vec_Mem_t, i: ::std::os::raw::c_int, pEntry: *mut word);
}
extern "C" {
    #[link_name = "Vec_MemGetEntry_imctk_abc_sys"]
    pub fn Vec_MemGetEntry(p: *mut Vec_Mem_t, i: ::std::os::raw::c_int) -> *mut word;
}
extern "C" {
    #[link_name = "Vec_MemSetEntry_imctk_abc_sys"]
    pub fn Vec_MemSetEntry(p: *mut Vec_Mem_t, i: ::std::os::raw::c_int, pEntry: *mut word);
}
extern "C" {
    #[link_name = "Vec_MemPush_imctk_abc_sys"]
    pub fn Vec_MemPush(p: *mut Vec_Mem_t, pEntry: *mut word);
}
extern "C" {
    #[link_name = "Vec_MemShrink_imctk_abc_sys"]
    pub fn Vec_MemShrink(p: *mut Vec_Mem_t, nEntriesNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_MemDumpDigit_imctk_abc_sys"]
    pub fn Vec_MemDumpDigit(pFile: *mut FILE, HexDigit: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_MemDump_imctk_abc_sys"]
    pub fn Vec_MemDump(pFile: *mut FILE, pVec: *mut Vec_Mem_t);
}
extern "C" {
    #[link_name = "Vec_MemHashAlloc_imctk_abc_sys"]
    pub fn Vec_MemHashAlloc(p: *mut Vec_Mem_t, nTableSize: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_MemHashFree_imctk_abc_sys"]
    pub fn Vec_MemHashFree(p: *mut Vec_Mem_t);
}
extern "C" {
    #[link_name = "Vec_MemHashKey_imctk_abc_sys"]
    pub fn Vec_MemHashKey(p: *mut Vec_Mem_t, pEntry: *mut word) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Vec_MemHashLookup_imctk_abc_sys"]
    pub fn Vec_MemHashLookup(p: *mut Vec_Mem_t, pEntry: *mut word) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_MemHashProfile_imctk_abc_sys"]
    pub fn Vec_MemHashProfile(p: *mut Vec_Mem_t);
}
extern "C" {
    #[link_name = "Vec_MemHashResize_imctk_abc_sys"]
    pub fn Vec_MemHashResize(p: *mut Vec_Mem_t);
}
extern "C" {
    #[link_name = "Vec_MemHashInsert_imctk_abc_sys"]
    pub fn Vec_MemHashInsert(p: *mut Vec_Mem_t, pEntry: *mut word) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_MemAllocForTTSimple_imctk_abc_sys"]
    pub fn Vec_MemAllocForTTSimple(nVars: ::std::os::raw::c_int) -> *mut Vec_Mem_t;
}
extern "C" {
    #[link_name = "Vec_MemAllocForTT_imctk_abc_sys"]
    pub fn Vec_MemAllocForTT(
        nVars: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> *mut Vec_Mem_t;
}
extern "C" {
    #[link_name = "Vec_MemAddMuxTT_imctk_abc_sys"]
    pub fn Vec_MemAddMuxTT(p: *mut Vec_Mem_t, nVars: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_MemDumpTruthTables_imctk_abc_sys"]
    pub fn Vec_MemDumpTruthTables(
        p: *mut Vec_Mem_t,
        pName: *mut ::std::os::raw::c_char,
        nLutSize: ::std::os::raw::c_int,
    );
}
pub type Vec_Wec_t = Vec_Wec_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec_Wec_t_ {
    pub nCap: ::std::os::raw::c_int,
    pub nSize: ::std::os::raw::c_int,
    pub pArray: *mut Vec_Int_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Vec_Wec_t_"][::std::mem::size_of::<Vec_Wec_t_>() - 16usize];
    ["Alignment of Vec_Wec_t_"][::std::mem::align_of::<Vec_Wec_t_>() - 8usize];
    ["Offset of field: Vec_Wec_t_::nCap"][::std::mem::offset_of!(Vec_Wec_t_, nCap) - 0usize];
    ["Offset of field: Vec_Wec_t_::nSize"][::std::mem::offset_of!(Vec_Wec_t_, nSize) - 4usize];
    ["Offset of field: Vec_Wec_t_::pArray"][::std::mem::offset_of!(Vec_Wec_t_, pArray) - 8usize];
};
extern "C" {
    #[link_name = "Vec_WecAlloc_imctk_abc_sys"]
    pub fn Vec_WecAlloc(nCap: ::std::os::raw::c_int) -> *mut Vec_Wec_t;
}
extern "C" {
    #[link_name = "Vec_WecAllocExact_imctk_abc_sys"]
    pub fn Vec_WecAllocExact(nCap: ::std::os::raw::c_int) -> *mut Vec_Wec_t;
}
extern "C" {
    #[link_name = "Vec_WecStart_imctk_abc_sys"]
    pub fn Vec_WecStart(nSize: ::std::os::raw::c_int) -> *mut Vec_Wec_t;
}
extern "C" {
    #[link_name = "Vec_WecGrow_imctk_abc_sys"]
    pub fn Vec_WecGrow(p: *mut Vec_Wec_t, nCapMin: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecInit_imctk_abc_sys"]
    pub fn Vec_WecInit(p: *mut Vec_Wec_t, nSize: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecEntry_imctk_abc_sys"]
    pub fn Vec_WecEntry(p: *mut Vec_Wec_t, i: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_WecEntryLast_imctk_abc_sys"]
    pub fn Vec_WecEntryLast(p: *mut Vec_Wec_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_WecEntryEntry_imctk_abc_sys"]
    pub fn Vec_WecEntryEntry(
        p: *mut Vec_Wec_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecArray_imctk_abc_sys"]
    pub fn Vec_WecArray(p: *mut Vec_Wec_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_WecLevelId_imctk_abc_sys"]
    pub fn Vec_WecLevelId(p: *mut Vec_Wec_t, vLevel: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecCap_imctk_abc_sys"]
    pub fn Vec_WecCap(p: *mut Vec_Wec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSize_imctk_abc_sys"]
    pub fn Vec_WecSize(p: *mut Vec_Wec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecLevelSize_imctk_abc_sys"]
    pub fn Vec_WecLevelSize(p: *mut Vec_Wec_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSizeSize_imctk_abc_sys"]
    pub fn Vec_WecSizeSize(p: *mut Vec_Wec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSizeUsed_imctk_abc_sys"]
    pub fn Vec_WecSizeUsed(p: *mut Vec_Wec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSizeUsedLimits_imctk_abc_sys"]
    pub fn Vec_WecSizeUsedLimits(
        p: *mut Vec_Wec_t,
        iStart: ::std::os::raw::c_int,
        iStop: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecShrink_imctk_abc_sys"]
    pub fn Vec_WecShrink(p: *mut Vec_Wec_t, nSizeNew: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecClear_imctk_abc_sys"]
    pub fn Vec_WecClear(p: *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecClearLevels_imctk_abc_sys"]
    pub fn Vec_WecClearLevels(p: *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecPush_imctk_abc_sys"]
    pub fn Vec_WecPush(
        p: *mut Vec_Wec_t,
        Level: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WecPushTwo_imctk_abc_sys"]
    pub fn Vec_WecPushTwo(
        p: *mut Vec_Wec_t,
        Level: ::std::os::raw::c_int,
        Entry1: ::std::os::raw::c_int,
        Entry2: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WecPushLevel_imctk_abc_sys"]
    pub fn Vec_WecPushLevel(p: *mut Vec_Wec_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_WecInsertLevel_imctk_abc_sys"]
    pub fn Vec_WecInsertLevel(p: *mut Vec_Wec_t, i: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_WecMemory_imctk_abc_sys"]
    pub fn Vec_WecMemory(p: *mut Vec_Wec_t) -> f64;
}
extern "C" {
    #[link_name = "Vec_WecZero_imctk_abc_sys"]
    pub fn Vec_WecZero(p: *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecErase_imctk_abc_sys"]
    pub fn Vec_WecErase(p: *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecFree_imctk_abc_sys"]
    pub fn Vec_WecFree(p: *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecFreeP_imctk_abc_sys"]
    pub fn Vec_WecFreeP(p: *mut *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecPushUnique_imctk_abc_sys"]
    pub fn Vec_WecPushUnique(
        p: *mut Vec_Wec_t,
        Level: ::std::os::raw::c_int,
        Entry: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WecDup_imctk_abc_sys"]
    pub fn Vec_WecDup(p: *mut Vec_Wec_t) -> *mut Vec_Wec_t;
}
extern "C" {
    #[link_name = "Vec_WecSortCompare1_imctk_abc_sys"]
    pub fn Vec_WecSortCompare1(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSortCompare2_imctk_abc_sys"]
    pub fn Vec_WecSortCompare2(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSort_imctk_abc_sys"]
    pub fn Vec_WecSort(p: *mut Vec_Wec_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecSortCompare3_imctk_abc_sys"]
    pub fn Vec_WecSortCompare3(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSortCompare4_imctk_abc_sys"]
    pub fn Vec_WecSortCompare4(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSortByFirstInt_imctk_abc_sys"]
    pub fn Vec_WecSortByFirstInt(p: *mut Vec_Wec_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecSortCompare5_imctk_abc_sys"]
    pub fn Vec_WecSortCompare5(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSortCompare6_imctk_abc_sys"]
    pub fn Vec_WecSortCompare6(p1: *mut Vec_Int_t, p2: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecSortByLastInt_imctk_abc_sys"]
    pub fn Vec_WecSortByLastInt(p: *mut Vec_Wec_t, fReverse: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecKeepLevels_imctk_abc_sys"]
    pub fn Vec_WecKeepLevels(p: *mut Vec_Wec_t, Limit: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecPrint_imctk_abc_sys"]
    pub fn Vec_WecPrint(p: *mut Vec_Wec_t, fSkipSingles: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Vec_WecPrintLits_imctk_abc_sys"]
    pub fn Vec_WecPrintLits(p: *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecCreateClasses_imctk_abc_sys"]
    pub fn Vec_WecCreateClasses(vMap: *mut Vec_Int_t) -> *mut Vec_Wec_t;
}
extern "C" {
    #[link_name = "Vec_WecCountNonTrivial_imctk_abc_sys"]
    pub fn Vec_WecCountNonTrivial(
        p: *mut Vec_Wec_t,
        pnUsed: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecMaxLevelSize_imctk_abc_sys"]
    pub fn Vec_WecMaxLevelSize(p: *mut Vec_Wec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecCollectFirsts_imctk_abc_sys"]
    pub fn Vec_WecCollectFirsts(p: *mut Vec_Wec_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Vec_WecConvertToVecPtr_imctk_abc_sys"]
    pub fn Vec_WecConvertToVecPtr(p: *mut Vec_Wec_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    #[link_name = "Vec_WecIntHasMark_imctk_abc_sys"]
    pub fn Vec_WecIntHasMark(vVec: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Vec_WecIntSetMark_imctk_abc_sys"]
    pub fn Vec_WecIntSetMark(vVec: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_WecIntXorMark_imctk_abc_sys"]
    pub fn Vec_WecIntXorMark(vVec: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_WecMarkLevels_imctk_abc_sys"]
    pub fn Vec_WecMarkLevels(vCubes: *mut Vec_Wec_t, vLevels: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_WecUnmarkLevels_imctk_abc_sys"]
    pub fn Vec_WecUnmarkLevels(vCubes: *mut Vec_Wec_t, vLevels: *mut Vec_Int_t);
}
extern "C" {
    #[link_name = "Vec_WecRemoveEmpty_imctk_abc_sys"]
    pub fn Vec_WecRemoveEmpty(vCubes: *mut Vec_Wec_t);
}
extern "C" {
    #[link_name = "Vec_WecDumpBin_imctk_abc_sys"]
    pub fn Vec_WecDumpBin(
        pFileName: *mut ::std::os::raw::c_char,
        p: *mut Vec_Wec_t,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Vec_WecReadBin_imctk_abc_sys"]
    pub fn Vec_WecReadBin(
        pFileName: *mut ::std::os::raw::c_char,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Wec_t;
}
pub type Abc_Cex_t = Abc_Cex_t_;
#[repr(C)]
#[derive(Debug)]
pub struct Abc_Cex_t_ {
    pub iPo: ::std::os::raw::c_int,
    pub iFrame: ::std::os::raw::c_int,
    pub nRegs: ::std::os::raw::c_int,
    pub nPis: ::std::os::raw::c_int,
    pub nBits: ::std::os::raw::c_int,
    pub pData: __IncompleteArrayField<::std::os::raw::c_uint>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Abc_Cex_t_"][::std::mem::size_of::<Abc_Cex_t_>() - 20usize];
    ["Alignment of Abc_Cex_t_"][::std::mem::align_of::<Abc_Cex_t_>() - 4usize];
    ["Offset of field: Abc_Cex_t_::iPo"][::std::mem::offset_of!(Abc_Cex_t_, iPo) - 0usize];
    ["Offset of field: Abc_Cex_t_::iFrame"][::std::mem::offset_of!(Abc_Cex_t_, iFrame) - 4usize];
    ["Offset of field: Abc_Cex_t_::nRegs"][::std::mem::offset_of!(Abc_Cex_t_, nRegs) - 8usize];
    ["Offset of field: Abc_Cex_t_::nPis"][::std::mem::offset_of!(Abc_Cex_t_, nPis) - 12usize];
    ["Offset of field: Abc_Cex_t_::nBits"][::std::mem::offset_of!(Abc_Cex_t_, nBits) - 16usize];
    ["Offset of field: Abc_Cex_t_::pData"][::std::mem::offset_of!(Abc_Cex_t_, pData) - 20usize];
};
extern "C" {
    pub fn Abc_CexAlloc(
        nRegs: ::std::os::raw::c_int,
        nTruePis: ::std::os::raw::c_int,
        nFrames: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexAllocFull(
        nRegs: ::std::os::raw::c_int,
        nTruePis: ::std::os::raw::c_int,
        nFrames: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexMakeTriv(
        nRegs: ::std::os::raw::c_int,
        nTruePis: ::std::os::raw::c_int,
        nTruePos: ::std::os::raw::c_int,
        iFrameOut: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexCreate(
        nRegs: ::std::os::raw::c_int,
        nTruePis: ::std::os::raw::c_int,
        pArray: *mut ::std::os::raw::c_int,
        iFrame: ::std::os::raw::c_int,
        iPo: ::std::os::raw::c_int,
        fSkipRegs: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexDup(p: *mut Abc_Cex_t, nRegsNew: ::std::os::raw::c_int) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexDeriveFromCombModel(
        pModel: *mut ::std::os::raw::c_int,
        nPis: ::std::os::raw::c_int,
        nRegs: ::std::os::raw::c_int,
        iPo: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexMerge(
        pCex: *mut Abc_Cex_t,
        pPart: *mut Abc_Cex_t,
        iFrBeg: ::std::os::raw::c_int,
        iFrEnd: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexPrintStats(p: *mut Abc_Cex_t);
}
extern "C" {
    pub fn Abc_CexPrintStatsInputs(p: *mut Abc_Cex_t, nInputs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_CexPrint(p: *mut Abc_Cex_t);
}
extern "C" {
    pub fn Abc_CexFreeP(p: *mut *mut Abc_Cex_t);
}
extern "C" {
    pub fn Abc_CexFree(p: *mut Abc_Cex_t);
}
extern "C" {
    pub fn Abc_CexTransformPhase(
        p: *mut Abc_Cex_t,
        nPisOld: ::std::os::raw::c_int,
        nPosOld: ::std::os::raw::c_int,
        nRegsOld: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexTransformTempor(
        p: *mut Abc_Cex_t,
        nPisOld: ::std::os::raw::c_int,
        nPosOld: ::std::os::raw::c_int,
        nRegsOld: ::std::os::raw::c_int,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexTransformUndc(
        p: *mut Abc_Cex_t,
        pInit: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexPermute(p: *mut Abc_Cex_t, vMapOld2New: *mut Vec_Int_t) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexPermuteTwo(
        p: *mut Abc_Cex_t,
        vPermOld: *mut Vec_Int_t,
        vPermNew: *mut Vec_Int_t,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Abc_CexCountOnes(p: *mut Abc_Cex_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_MmFixed_t_ {
    _unused: [u8; 0],
}
pub type Gia_MmFixed_t = Gia_MmFixed_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_MmFlex_t_ {
    _unused: [u8; 0],
}
pub type Gia_MmFlex_t = Gia_MmFlex_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_MmStep_t_ {
    _unused: [u8; 0],
}
pub type Gia_MmStep_t = Gia_MmStep_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_Dat_t_ {
    _unused: [u8; 0],
}
pub type Gia_Dat_t = Gia_Dat_t_;
pub type Gia_Rpr_t = Gia_Rpr_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_Rpr_t_ {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gia_Rpr_t_"][::std::mem::size_of::<Gia_Rpr_t_>() - 4usize];
    ["Alignment of Gia_Rpr_t_"][::std::mem::align_of::<Gia_Rpr_t_>() - 4usize];
};
impl Gia_Rpr_t_ {
    #[inline]
    pub fn iRepr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_iRepr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn fProved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fProved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fFailed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fFailed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fColorA(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fColorA(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fColorB(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fColorB(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iRepr: ::std::os::raw::c_uint,
        fProved: ::std::os::raw::c_uint,
        fFailed: ::std::os::raw::c_uint,
        fColorA: ::std::os::raw::c_uint,
        fColorB: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let iRepr: u32 = unsafe { ::std::mem::transmute(iRepr) };
            iRepr as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let fProved: u32 = unsafe { ::std::mem::transmute(fProved) };
            fProved as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let fFailed: u32 = unsafe { ::std::mem::transmute(fFailed) };
            fFailed as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let fColorA: u32 = unsafe { ::std::mem::transmute(fColorA) };
            fColorA as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let fColorB: u32 = unsafe { ::std::mem::transmute(fColorB) };
            fColorB as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type Gia_Plc_t = Gia_Plc_t_;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Gia_Plc_t_ {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gia_Plc_t_"][::std::mem::size_of::<Gia_Plc_t_>() - 4usize];
    ["Alignment of Gia_Plc_t_"][::std::mem::align_of::<Gia_Plc_t_>() - 4usize];
};
impl Gia_Plc_t_ {
    #[inline]
    pub fn fFixed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fFixed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xCoord(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_xCoord(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn fUndef(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fUndef(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn yCoord(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_yCoord(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fFixed: ::std::os::raw::c_uint,
        xCoord: ::std::os::raw::c_uint,
        fUndef: ::std::os::raw::c_uint,
        yCoord: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fFixed: u32 = unsafe { ::std::mem::transmute(fFixed) };
            fFixed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 15u8, {
            let xCoord: u32 = unsafe { ::std::mem::transmute(xCoord) };
            xCoord as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let fUndef: u32 = unsafe { ::std::mem::transmute(fUndef) };
            fUndef as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let yCoord: u32 = unsafe { ::std::mem::transmute(yCoord) };
            yCoord as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type Gia_Obj_t = Gia_Obj_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_Obj_t_ {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub Value: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gia_Obj_t_"][::std::mem::size_of::<Gia_Obj_t_>() - 12usize];
    ["Alignment of Gia_Obj_t_"][::std::mem::align_of::<Gia_Obj_t_>() - 4usize];
    ["Offset of field: Gia_Obj_t_::Value"][::std::mem::offset_of!(Gia_Obj_t_, Value) - 8usize];
};
impl Gia_Obj_t_ {
    #[inline]
    pub fn iDiff0(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_iDiff0(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn fCompl0(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fCompl0(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMark0(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMark0(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fTerm(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fTerm(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iDiff1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_iDiff1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn fCompl1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(61usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fCompl1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(61usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMark1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMark1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fPhase(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fPhase(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iDiff0: ::std::os::raw::c_uint,
        fCompl0: ::std::os::raw::c_uint,
        fMark0: ::std::os::raw::c_uint,
        fTerm: ::std::os::raw::c_uint,
        iDiff1: ::std::os::raw::c_uint,
        fCompl1: ::std::os::raw::c_uint,
        fMark1: ::std::os::raw::c_uint,
        fPhase: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 29u8, {
            let iDiff0: u32 = unsafe { ::std::mem::transmute(iDiff0) };
            iDiff0 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let fCompl0: u32 = unsafe { ::std::mem::transmute(fCompl0) };
            fCompl0 as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let fMark0: u32 = unsafe { ::std::mem::transmute(fMark0) };
            fMark0 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let fTerm: u32 = unsafe { ::std::mem::transmute(fTerm) };
            fTerm as u64
        });
        __bindgen_bitfield_unit.set(32usize, 29u8, {
            let iDiff1: u32 = unsafe { ::std::mem::transmute(iDiff1) };
            iDiff1 as u64
        });
        __bindgen_bitfield_unit.set(61usize, 1u8, {
            let fCompl1: u32 = unsafe { ::std::mem::transmute(fCompl1) };
            fCompl1 as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let fMark1: u32 = unsafe { ::std::mem::transmute(fMark1) };
            fMark1 as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let fPhase: u32 = unsafe { ::std::mem::transmute(fPhase) };
            fPhase as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type Gia_Man_t = Gia_Man_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_Man_t_ {
    pub pName: *mut ::std::os::raw::c_char,
    pub pSpec: *mut ::std::os::raw::c_char,
    pub nRegs: ::std::os::raw::c_int,
    pub nRegsAlloc: ::std::os::raw::c_int,
    pub nObjs: ::std::os::raw::c_int,
    pub nObjsAlloc: ::std::os::raw::c_int,
    pub pObjs: *mut Gia_Obj_t,
    pub pMuxes: *mut ::std::os::raw::c_uint,
    pub nXors: ::std::os::raw::c_int,
    pub nMuxes: ::std::os::raw::c_int,
    pub nBufs: ::std::os::raw::c_int,
    pub vCis: *mut Vec_Int_t,
    pub vCos: *mut Vec_Int_t,
    pub vHash: Vec_Int_t,
    pub vHTable: Vec_Int_t,
    pub fAddStrash: ::std::os::raw::c_int,
    pub fSweeper: ::std::os::raw::c_int,
    pub fGiaSimple: ::std::os::raw::c_int,
    pub vRefs: Vec_Int_t,
    pub pRefs: *mut ::std::os::raw::c_int,
    pub pLutRefs: *mut ::std::os::raw::c_int,
    pub vLevels: *mut Vec_Int_t,
    pub nLevels: ::std::os::raw::c_int,
    pub nConstrs: ::std::os::raw::c_int,
    pub nTravIds: ::std::os::raw::c_int,
    pub nFront: ::std::os::raw::c_int,
    pub pReprsOld: *mut ::std::os::raw::c_int,
    pub pReprs: *mut Gia_Rpr_t,
    pub pNexts: *mut ::std::os::raw::c_int,
    pub pSibls: *mut ::std::os::raw::c_int,
    pub pIso: *mut ::std::os::raw::c_int,
    pub nTerLoop: ::std::os::raw::c_int,
    pub nTerStates: ::std::os::raw::c_int,
    pub pFanData: *mut ::std::os::raw::c_int,
    pub nFansAlloc: ::std::os::raw::c_int,
    pub vFanoutNums: *mut Vec_Int_t,
    pub vFanout: *mut Vec_Int_t,
    pub vMapping: *mut Vec_Int_t,
    pub vMapping2: *mut Vec_Wec_t,
    pub vFanouts2: *mut Vec_Wec_t,
    pub vCellMapping: *mut Vec_Int_t,
    pub pSatlutWinman: *mut ::std::os::raw::c_void,
    pub vPacking: *mut Vec_Int_t,
    pub vConfigs: *mut Vec_Int_t,
    pub pCellStr: *mut ::std::os::raw::c_char,
    pub vLutConfigs: *mut Vec_Int_t,
    pub vEdgeDelay: *mut Vec_Int_t,
    pub vEdgeDelayR: *mut Vec_Int_t,
    pub vEdge1: *mut Vec_Int_t,
    pub vEdge2: *mut Vec_Int_t,
    pub pCexComb: *mut Abc_Cex_t,
    pub pCexSeq: *mut Abc_Cex_t,
    pub vSeqModelVec: *mut Vec_Ptr_t,
    pub vCopies: Vec_Int_t,
    pub vCopies2: Vec_Int_t,
    pub vVar2Obj: *mut Vec_Int_t,
    pub vTruths: *mut Vec_Int_t,
    pub vFlopClasses: *mut Vec_Int_t,
    pub vGateClasses: *mut Vec_Int_t,
    pub vObjClasses: *mut Vec_Int_t,
    pub vInitClasses: *mut Vec_Int_t,
    pub vRegClasses: *mut Vec_Int_t,
    pub vRegInits: *mut Vec_Int_t,
    pub vDoms: *mut Vec_Int_t,
    pub vBarBufs: *mut Vec_Int_t,
    pub vXors: *mut Vec_Int_t,
    pub pSwitching: *mut ::std::os::raw::c_uchar,
    pub pPlacement: *mut Gia_Plc_t,
    pub pAigExtra: *mut Gia_Man_t,
    pub vInArrs: *mut Vec_Flt_t,
    pub vOutReqs: *mut Vec_Flt_t,
    pub vCiArrs: *mut Vec_Int_t,
    pub vCoReqs: *mut Vec_Int_t,
    pub vCoArrs: *mut Vec_Int_t,
    pub vCoAttrs: *mut Vec_Int_t,
    pub vWeights: *mut Vec_Int_t,
    pub And2Delay: ::std::os::raw::c_int,
    pub DefInArrs: f32,
    pub DefOutReqs: f32,
    pub vSwitching: *mut Vec_Int_t,
    pub pTravIds: *mut ::std::os::raw::c_int,
    pub nTravIdsAlloc: ::std::os::raw::c_int,
    pub vNamesIn: *mut Vec_Ptr_t,
    pub vNamesOut: *mut Vec_Ptr_t,
    pub vNamesNode: *mut Vec_Ptr_t,
    pub vUserPiIds: *mut Vec_Int_t,
    pub vUserPoIds: *mut Vec_Int_t,
    pub vUserFfIds: *mut Vec_Int_t,
    pub vCiNumsOrig: *mut Vec_Int_t,
    pub vCoNumsOrig: *mut Vec_Int_t,
    pub vIdsOrig: *mut Vec_Int_t,
    pub vIdsEquiv: *mut Vec_Int_t,
    pub vCofVars: *mut Vec_Int_t,
    pub vClockDoms: *mut Vec_Vec_t,
    pub vTiming: *mut Vec_Flt_t,
    pub pManTime: *mut ::std::os::raw::c_void,
    pub pLutLib: *mut ::std::os::raw::c_void,
    pub nHashHit: word,
    pub nHashMiss: word,
    pub pData: *mut ::std::os::raw::c_void,
    pub pData2: *mut ::std::os::raw::c_uint,
    pub iData: ::std::os::raw::c_int,
    pub iData2: ::std::os::raw::c_int,
    pub nAnd2Delay: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub MappedArea: ::std::os::raw::c_int,
    pub MappedDelay: ::std::os::raw::c_int,
    pub fBuiltInSim: ::std::os::raw::c_int,
    pub iPatsPi: ::std::os::raw::c_int,
    pub nSimWords: ::std::os::raw::c_int,
    pub nSimWordsT: ::std::os::raw::c_int,
    pub iPastPiMax: ::std::os::raw::c_int,
    pub nSimWordsMax: ::std::os::raw::c_int,
    pub vSims: *mut Vec_Wrd_t,
    pub vSimsT: *mut Vec_Wrd_t,
    pub vSimsPi: *mut Vec_Wrd_t,
    pub vSimsPo: *mut Vec_Wrd_t,
    pub vClassOld: *mut Vec_Int_t,
    pub vClassNew: *mut Vec_Int_t,
    pub vPats: *mut Vec_Int_t,
    pub vPolars: *mut Vec_Bit_t,
    pub fIncrSim: ::std::os::raw::c_int,
    pub iNextPi: ::std::os::raw::c_int,
    pub iTimeStamp: ::std::os::raw::c_int,
    pub vTimeStamps: *mut Vec_Int_t,
    pub nTtVars: ::std::os::raw::c_int,
    pub nTtWords: ::std::os::raw::c_int,
    pub vTtNums: *mut Vec_Int_t,
    pub vTtNodes: *mut Vec_Int_t,
    pub vTtInputs: *mut Vec_Ptr_t,
    pub vTtMemory: *mut Vec_Wrd_t,
    pub vSuper: *mut Vec_Int_t,
    pub vStore: *mut Vec_Int_t,
    pub iSuppPi: ::std::os::raw::c_int,
    pub nSuppWords: ::std::os::raw::c_int,
    pub vSuppWords: *mut Vec_Wrd_t,
    pub vCopiesTwo: Vec_Int_t,
    pub vSuppVars: Vec_Int_t,
    pub vVarMap: Vec_Int_t,
    pub pUData: *mut Gia_Dat_t,
    pub vStopsF: *mut Vec_Str_t,
    pub vStopsB: *mut Vec_Str_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gia_Man_t_"][::std::mem::size_of::<Gia_Man_t_>() - 1064usize];
    ["Alignment of Gia_Man_t_"][::std::mem::align_of::<Gia_Man_t_>() - 8usize];
    ["Offset of field: Gia_Man_t_::pName"][::std::mem::offset_of!(Gia_Man_t_, pName) - 0usize];
    ["Offset of field: Gia_Man_t_::pSpec"][::std::mem::offset_of!(Gia_Man_t_, pSpec) - 8usize];
    ["Offset of field: Gia_Man_t_::nRegs"][::std::mem::offset_of!(Gia_Man_t_, nRegs) - 16usize];
    ["Offset of field: Gia_Man_t_::nRegsAlloc"]
        [::std::mem::offset_of!(Gia_Man_t_, nRegsAlloc) - 20usize];
    ["Offset of field: Gia_Man_t_::nObjs"][::std::mem::offset_of!(Gia_Man_t_, nObjs) - 24usize];
    ["Offset of field: Gia_Man_t_::nObjsAlloc"]
        [::std::mem::offset_of!(Gia_Man_t_, nObjsAlloc) - 28usize];
    ["Offset of field: Gia_Man_t_::pObjs"][::std::mem::offset_of!(Gia_Man_t_, pObjs) - 32usize];
    ["Offset of field: Gia_Man_t_::pMuxes"][::std::mem::offset_of!(Gia_Man_t_, pMuxes) - 40usize];
    ["Offset of field: Gia_Man_t_::nXors"][::std::mem::offset_of!(Gia_Man_t_, nXors) - 48usize];
    ["Offset of field: Gia_Man_t_::nMuxes"][::std::mem::offset_of!(Gia_Man_t_, nMuxes) - 52usize];
    ["Offset of field: Gia_Man_t_::nBufs"][::std::mem::offset_of!(Gia_Man_t_, nBufs) - 56usize];
    ["Offset of field: Gia_Man_t_::vCis"][::std::mem::offset_of!(Gia_Man_t_, vCis) - 64usize];
    ["Offset of field: Gia_Man_t_::vCos"][::std::mem::offset_of!(Gia_Man_t_, vCos) - 72usize];
    ["Offset of field: Gia_Man_t_::vHash"][::std::mem::offset_of!(Gia_Man_t_, vHash) - 80usize];
    ["Offset of field: Gia_Man_t_::vHTable"][::std::mem::offset_of!(Gia_Man_t_, vHTable) - 96usize];
    ["Offset of field: Gia_Man_t_::fAddStrash"]
        [::std::mem::offset_of!(Gia_Man_t_, fAddStrash) - 112usize];
    ["Offset of field: Gia_Man_t_::fSweeper"]
        [::std::mem::offset_of!(Gia_Man_t_, fSweeper) - 116usize];
    ["Offset of field: Gia_Man_t_::fGiaSimple"]
        [::std::mem::offset_of!(Gia_Man_t_, fGiaSimple) - 120usize];
    ["Offset of field: Gia_Man_t_::vRefs"][::std::mem::offset_of!(Gia_Man_t_, vRefs) - 128usize];
    ["Offset of field: Gia_Man_t_::pRefs"][::std::mem::offset_of!(Gia_Man_t_, pRefs) - 144usize];
    ["Offset of field: Gia_Man_t_::pLutRefs"]
        [::std::mem::offset_of!(Gia_Man_t_, pLutRefs) - 152usize];
    ["Offset of field: Gia_Man_t_::vLevels"]
        [::std::mem::offset_of!(Gia_Man_t_, vLevels) - 160usize];
    ["Offset of field: Gia_Man_t_::nLevels"]
        [::std::mem::offset_of!(Gia_Man_t_, nLevels) - 168usize];
    ["Offset of field: Gia_Man_t_::nConstrs"]
        [::std::mem::offset_of!(Gia_Man_t_, nConstrs) - 172usize];
    ["Offset of field: Gia_Man_t_::nTravIds"]
        [::std::mem::offset_of!(Gia_Man_t_, nTravIds) - 176usize];
    ["Offset of field: Gia_Man_t_::nFront"][::std::mem::offset_of!(Gia_Man_t_, nFront) - 180usize];
    ["Offset of field: Gia_Man_t_::pReprsOld"]
        [::std::mem::offset_of!(Gia_Man_t_, pReprsOld) - 184usize];
    ["Offset of field: Gia_Man_t_::pReprs"][::std::mem::offset_of!(Gia_Man_t_, pReprs) - 192usize];
    ["Offset of field: Gia_Man_t_::pNexts"][::std::mem::offset_of!(Gia_Man_t_, pNexts) - 200usize];
    ["Offset of field: Gia_Man_t_::pSibls"][::std::mem::offset_of!(Gia_Man_t_, pSibls) - 208usize];
    ["Offset of field: Gia_Man_t_::pIso"][::std::mem::offset_of!(Gia_Man_t_, pIso) - 216usize];
    ["Offset of field: Gia_Man_t_::nTerLoop"]
        [::std::mem::offset_of!(Gia_Man_t_, nTerLoop) - 224usize];
    ["Offset of field: Gia_Man_t_::nTerStates"]
        [::std::mem::offset_of!(Gia_Man_t_, nTerStates) - 228usize];
    ["Offset of field: Gia_Man_t_::pFanData"]
        [::std::mem::offset_of!(Gia_Man_t_, pFanData) - 232usize];
    ["Offset of field: Gia_Man_t_::nFansAlloc"]
        [::std::mem::offset_of!(Gia_Man_t_, nFansAlloc) - 240usize];
    ["Offset of field: Gia_Man_t_::vFanoutNums"]
        [::std::mem::offset_of!(Gia_Man_t_, vFanoutNums) - 248usize];
    ["Offset of field: Gia_Man_t_::vFanout"]
        [::std::mem::offset_of!(Gia_Man_t_, vFanout) - 256usize];
    ["Offset of field: Gia_Man_t_::vMapping"]
        [::std::mem::offset_of!(Gia_Man_t_, vMapping) - 264usize];
    ["Offset of field: Gia_Man_t_::vMapping2"]
        [::std::mem::offset_of!(Gia_Man_t_, vMapping2) - 272usize];
    ["Offset of field: Gia_Man_t_::vFanouts2"]
        [::std::mem::offset_of!(Gia_Man_t_, vFanouts2) - 280usize];
    ["Offset of field: Gia_Man_t_::vCellMapping"]
        [::std::mem::offset_of!(Gia_Man_t_, vCellMapping) - 288usize];
    ["Offset of field: Gia_Man_t_::pSatlutWinman"]
        [::std::mem::offset_of!(Gia_Man_t_, pSatlutWinman) - 296usize];
    ["Offset of field: Gia_Man_t_::vPacking"]
        [::std::mem::offset_of!(Gia_Man_t_, vPacking) - 304usize];
    ["Offset of field: Gia_Man_t_::vConfigs"]
        [::std::mem::offset_of!(Gia_Man_t_, vConfigs) - 312usize];
    ["Offset of field: Gia_Man_t_::pCellStr"]
        [::std::mem::offset_of!(Gia_Man_t_, pCellStr) - 320usize];
    ["Offset of field: Gia_Man_t_::vLutConfigs"]
        [::std::mem::offset_of!(Gia_Man_t_, vLutConfigs) - 328usize];
    ["Offset of field: Gia_Man_t_::vEdgeDelay"]
        [::std::mem::offset_of!(Gia_Man_t_, vEdgeDelay) - 336usize];
    ["Offset of field: Gia_Man_t_::vEdgeDelayR"]
        [::std::mem::offset_of!(Gia_Man_t_, vEdgeDelayR) - 344usize];
    ["Offset of field: Gia_Man_t_::vEdge1"][::std::mem::offset_of!(Gia_Man_t_, vEdge1) - 352usize];
    ["Offset of field: Gia_Man_t_::vEdge2"][::std::mem::offset_of!(Gia_Man_t_, vEdge2) - 360usize];
    ["Offset of field: Gia_Man_t_::pCexComb"]
        [::std::mem::offset_of!(Gia_Man_t_, pCexComb) - 368usize];
    ["Offset of field: Gia_Man_t_::pCexSeq"]
        [::std::mem::offset_of!(Gia_Man_t_, pCexSeq) - 376usize];
    ["Offset of field: Gia_Man_t_::vSeqModelVec"]
        [::std::mem::offset_of!(Gia_Man_t_, vSeqModelVec) - 384usize];
    ["Offset of field: Gia_Man_t_::vCopies"]
        [::std::mem::offset_of!(Gia_Man_t_, vCopies) - 392usize];
    ["Offset of field: Gia_Man_t_::vCopies2"]
        [::std::mem::offset_of!(Gia_Man_t_, vCopies2) - 408usize];
    ["Offset of field: Gia_Man_t_::vVar2Obj"]
        [::std::mem::offset_of!(Gia_Man_t_, vVar2Obj) - 424usize];
    ["Offset of field: Gia_Man_t_::vTruths"]
        [::std::mem::offset_of!(Gia_Man_t_, vTruths) - 432usize];
    ["Offset of field: Gia_Man_t_::vFlopClasses"]
        [::std::mem::offset_of!(Gia_Man_t_, vFlopClasses) - 440usize];
    ["Offset of field: Gia_Man_t_::vGateClasses"]
        [::std::mem::offset_of!(Gia_Man_t_, vGateClasses) - 448usize];
    ["Offset of field: Gia_Man_t_::vObjClasses"]
        [::std::mem::offset_of!(Gia_Man_t_, vObjClasses) - 456usize];
    ["Offset of field: Gia_Man_t_::vInitClasses"]
        [::std::mem::offset_of!(Gia_Man_t_, vInitClasses) - 464usize];
    ["Offset of field: Gia_Man_t_::vRegClasses"]
        [::std::mem::offset_of!(Gia_Man_t_, vRegClasses) - 472usize];
    ["Offset of field: Gia_Man_t_::vRegInits"]
        [::std::mem::offset_of!(Gia_Man_t_, vRegInits) - 480usize];
    ["Offset of field: Gia_Man_t_::vDoms"][::std::mem::offset_of!(Gia_Man_t_, vDoms) - 488usize];
    ["Offset of field: Gia_Man_t_::vBarBufs"]
        [::std::mem::offset_of!(Gia_Man_t_, vBarBufs) - 496usize];
    ["Offset of field: Gia_Man_t_::vXors"][::std::mem::offset_of!(Gia_Man_t_, vXors) - 504usize];
    ["Offset of field: Gia_Man_t_::pSwitching"]
        [::std::mem::offset_of!(Gia_Man_t_, pSwitching) - 512usize];
    ["Offset of field: Gia_Man_t_::pPlacement"]
        [::std::mem::offset_of!(Gia_Man_t_, pPlacement) - 520usize];
    ["Offset of field: Gia_Man_t_::pAigExtra"]
        [::std::mem::offset_of!(Gia_Man_t_, pAigExtra) - 528usize];
    ["Offset of field: Gia_Man_t_::vInArrs"]
        [::std::mem::offset_of!(Gia_Man_t_, vInArrs) - 536usize];
    ["Offset of field: Gia_Man_t_::vOutReqs"]
        [::std::mem::offset_of!(Gia_Man_t_, vOutReqs) - 544usize];
    ["Offset of field: Gia_Man_t_::vCiArrs"]
        [::std::mem::offset_of!(Gia_Man_t_, vCiArrs) - 552usize];
    ["Offset of field: Gia_Man_t_::vCoReqs"]
        [::std::mem::offset_of!(Gia_Man_t_, vCoReqs) - 560usize];
    ["Offset of field: Gia_Man_t_::vCoArrs"]
        [::std::mem::offset_of!(Gia_Man_t_, vCoArrs) - 568usize];
    ["Offset of field: Gia_Man_t_::vCoAttrs"]
        [::std::mem::offset_of!(Gia_Man_t_, vCoAttrs) - 576usize];
    ["Offset of field: Gia_Man_t_::vWeights"]
        [::std::mem::offset_of!(Gia_Man_t_, vWeights) - 584usize];
    ["Offset of field: Gia_Man_t_::And2Delay"]
        [::std::mem::offset_of!(Gia_Man_t_, And2Delay) - 592usize];
    ["Offset of field: Gia_Man_t_::DefInArrs"]
        [::std::mem::offset_of!(Gia_Man_t_, DefInArrs) - 596usize];
    ["Offset of field: Gia_Man_t_::DefOutReqs"]
        [::std::mem::offset_of!(Gia_Man_t_, DefOutReqs) - 600usize];
    ["Offset of field: Gia_Man_t_::vSwitching"]
        [::std::mem::offset_of!(Gia_Man_t_, vSwitching) - 608usize];
    ["Offset of field: Gia_Man_t_::pTravIds"]
        [::std::mem::offset_of!(Gia_Man_t_, pTravIds) - 616usize];
    ["Offset of field: Gia_Man_t_::nTravIdsAlloc"]
        [::std::mem::offset_of!(Gia_Man_t_, nTravIdsAlloc) - 624usize];
    ["Offset of field: Gia_Man_t_::vNamesIn"]
        [::std::mem::offset_of!(Gia_Man_t_, vNamesIn) - 632usize];
    ["Offset of field: Gia_Man_t_::vNamesOut"]
        [::std::mem::offset_of!(Gia_Man_t_, vNamesOut) - 640usize];
    ["Offset of field: Gia_Man_t_::vNamesNode"]
        [::std::mem::offset_of!(Gia_Man_t_, vNamesNode) - 648usize];
    ["Offset of field: Gia_Man_t_::vUserPiIds"]
        [::std::mem::offset_of!(Gia_Man_t_, vUserPiIds) - 656usize];
    ["Offset of field: Gia_Man_t_::vUserPoIds"]
        [::std::mem::offset_of!(Gia_Man_t_, vUserPoIds) - 664usize];
    ["Offset of field: Gia_Man_t_::vUserFfIds"]
        [::std::mem::offset_of!(Gia_Man_t_, vUserFfIds) - 672usize];
    ["Offset of field: Gia_Man_t_::vCiNumsOrig"]
        [::std::mem::offset_of!(Gia_Man_t_, vCiNumsOrig) - 680usize];
    ["Offset of field: Gia_Man_t_::vCoNumsOrig"]
        [::std::mem::offset_of!(Gia_Man_t_, vCoNumsOrig) - 688usize];
    ["Offset of field: Gia_Man_t_::vIdsOrig"]
        [::std::mem::offset_of!(Gia_Man_t_, vIdsOrig) - 696usize];
    ["Offset of field: Gia_Man_t_::vIdsEquiv"]
        [::std::mem::offset_of!(Gia_Man_t_, vIdsEquiv) - 704usize];
    ["Offset of field: Gia_Man_t_::vCofVars"]
        [::std::mem::offset_of!(Gia_Man_t_, vCofVars) - 712usize];
    ["Offset of field: Gia_Man_t_::vClockDoms"]
        [::std::mem::offset_of!(Gia_Man_t_, vClockDoms) - 720usize];
    ["Offset of field: Gia_Man_t_::vTiming"]
        [::std::mem::offset_of!(Gia_Man_t_, vTiming) - 728usize];
    ["Offset of field: Gia_Man_t_::pManTime"]
        [::std::mem::offset_of!(Gia_Man_t_, pManTime) - 736usize];
    ["Offset of field: Gia_Man_t_::pLutLib"]
        [::std::mem::offset_of!(Gia_Man_t_, pLutLib) - 744usize];
    ["Offset of field: Gia_Man_t_::nHashHit"]
        [::std::mem::offset_of!(Gia_Man_t_, nHashHit) - 752usize];
    ["Offset of field: Gia_Man_t_::nHashMiss"]
        [::std::mem::offset_of!(Gia_Man_t_, nHashMiss) - 760usize];
    ["Offset of field: Gia_Man_t_::pData"][::std::mem::offset_of!(Gia_Man_t_, pData) - 768usize];
    ["Offset of field: Gia_Man_t_::pData2"][::std::mem::offset_of!(Gia_Man_t_, pData2) - 776usize];
    ["Offset of field: Gia_Man_t_::iData"][::std::mem::offset_of!(Gia_Man_t_, iData) - 784usize];
    ["Offset of field: Gia_Man_t_::iData2"][::std::mem::offset_of!(Gia_Man_t_, iData2) - 788usize];
    ["Offset of field: Gia_Man_t_::nAnd2Delay"]
        [::std::mem::offset_of!(Gia_Man_t_, nAnd2Delay) - 792usize];
    ["Offset of field: Gia_Man_t_::fVerbose"]
        [::std::mem::offset_of!(Gia_Man_t_, fVerbose) - 796usize];
    ["Offset of field: Gia_Man_t_::MappedArea"]
        [::std::mem::offset_of!(Gia_Man_t_, MappedArea) - 800usize];
    ["Offset of field: Gia_Man_t_::MappedDelay"]
        [::std::mem::offset_of!(Gia_Man_t_, MappedDelay) - 804usize];
    ["Offset of field: Gia_Man_t_::fBuiltInSim"]
        [::std::mem::offset_of!(Gia_Man_t_, fBuiltInSim) - 808usize];
    ["Offset of field: Gia_Man_t_::iPatsPi"]
        [::std::mem::offset_of!(Gia_Man_t_, iPatsPi) - 812usize];
    ["Offset of field: Gia_Man_t_::nSimWords"]
        [::std::mem::offset_of!(Gia_Man_t_, nSimWords) - 816usize];
    ["Offset of field: Gia_Man_t_::nSimWordsT"]
        [::std::mem::offset_of!(Gia_Man_t_, nSimWordsT) - 820usize];
    ["Offset of field: Gia_Man_t_::iPastPiMax"]
        [::std::mem::offset_of!(Gia_Man_t_, iPastPiMax) - 824usize];
    ["Offset of field: Gia_Man_t_::nSimWordsMax"]
        [::std::mem::offset_of!(Gia_Man_t_, nSimWordsMax) - 828usize];
    ["Offset of field: Gia_Man_t_::vSims"][::std::mem::offset_of!(Gia_Man_t_, vSims) - 832usize];
    ["Offset of field: Gia_Man_t_::vSimsT"][::std::mem::offset_of!(Gia_Man_t_, vSimsT) - 840usize];
    ["Offset of field: Gia_Man_t_::vSimsPi"]
        [::std::mem::offset_of!(Gia_Man_t_, vSimsPi) - 848usize];
    ["Offset of field: Gia_Man_t_::vSimsPo"]
        [::std::mem::offset_of!(Gia_Man_t_, vSimsPo) - 856usize];
    ["Offset of field: Gia_Man_t_::vClassOld"]
        [::std::mem::offset_of!(Gia_Man_t_, vClassOld) - 864usize];
    ["Offset of field: Gia_Man_t_::vClassNew"]
        [::std::mem::offset_of!(Gia_Man_t_, vClassNew) - 872usize];
    ["Offset of field: Gia_Man_t_::vPats"][::std::mem::offset_of!(Gia_Man_t_, vPats) - 880usize];
    ["Offset of field: Gia_Man_t_::vPolars"]
        [::std::mem::offset_of!(Gia_Man_t_, vPolars) - 888usize];
    ["Offset of field: Gia_Man_t_::fIncrSim"]
        [::std::mem::offset_of!(Gia_Man_t_, fIncrSim) - 896usize];
    ["Offset of field: Gia_Man_t_::iNextPi"]
        [::std::mem::offset_of!(Gia_Man_t_, iNextPi) - 900usize];
    ["Offset of field: Gia_Man_t_::iTimeStamp"]
        [::std::mem::offset_of!(Gia_Man_t_, iTimeStamp) - 904usize];
    ["Offset of field: Gia_Man_t_::vTimeStamps"]
        [::std::mem::offset_of!(Gia_Man_t_, vTimeStamps) - 912usize];
    ["Offset of field: Gia_Man_t_::nTtVars"]
        [::std::mem::offset_of!(Gia_Man_t_, nTtVars) - 920usize];
    ["Offset of field: Gia_Man_t_::nTtWords"]
        [::std::mem::offset_of!(Gia_Man_t_, nTtWords) - 924usize];
    ["Offset of field: Gia_Man_t_::vTtNums"]
        [::std::mem::offset_of!(Gia_Man_t_, vTtNums) - 928usize];
    ["Offset of field: Gia_Man_t_::vTtNodes"]
        [::std::mem::offset_of!(Gia_Man_t_, vTtNodes) - 936usize];
    ["Offset of field: Gia_Man_t_::vTtInputs"]
        [::std::mem::offset_of!(Gia_Man_t_, vTtInputs) - 944usize];
    ["Offset of field: Gia_Man_t_::vTtMemory"]
        [::std::mem::offset_of!(Gia_Man_t_, vTtMemory) - 952usize];
    ["Offset of field: Gia_Man_t_::vSuper"][::std::mem::offset_of!(Gia_Man_t_, vSuper) - 960usize];
    ["Offset of field: Gia_Man_t_::vStore"][::std::mem::offset_of!(Gia_Man_t_, vStore) - 968usize];
    ["Offset of field: Gia_Man_t_::iSuppPi"]
        [::std::mem::offset_of!(Gia_Man_t_, iSuppPi) - 976usize];
    ["Offset of field: Gia_Man_t_::nSuppWords"]
        [::std::mem::offset_of!(Gia_Man_t_, nSuppWords) - 980usize];
    ["Offset of field: Gia_Man_t_::vSuppWords"]
        [::std::mem::offset_of!(Gia_Man_t_, vSuppWords) - 984usize];
    ["Offset of field: Gia_Man_t_::vCopiesTwo"]
        [::std::mem::offset_of!(Gia_Man_t_, vCopiesTwo) - 992usize];
    ["Offset of field: Gia_Man_t_::vSuppVars"]
        [::std::mem::offset_of!(Gia_Man_t_, vSuppVars) - 1008usize];
    ["Offset of field: Gia_Man_t_::vVarMap"]
        [::std::mem::offset_of!(Gia_Man_t_, vVarMap) - 1024usize];
    ["Offset of field: Gia_Man_t_::pUData"][::std::mem::offset_of!(Gia_Man_t_, pUData) - 1040usize];
    ["Offset of field: Gia_Man_t_::vStopsF"]
        [::std::mem::offset_of!(Gia_Man_t_, vStopsF) - 1048usize];
    ["Offset of field: Gia_Man_t_::vStopsB"]
        [::std::mem::offset_of!(Gia_Man_t_, vStopsB) - 1056usize];
};
pub type Gps_Par_t = Gps_Par_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gps_Par_t_ {
    pub fTents: ::std::os::raw::c_int,
    pub fSwitch: ::std::os::raw::c_int,
    pub fCut: ::std::os::raw::c_int,
    pub fNpn: ::std::os::raw::c_int,
    pub fLutProf: ::std::os::raw::c_int,
    pub fMuxXor: ::std::os::raw::c_int,
    pub fMiter: ::std::os::raw::c_int,
    pub fSkipMap: ::std::os::raw::c_int,
    pub fSlacks: ::std::os::raw::c_int,
    pub fNoColor: ::std::os::raw::c_int,
    pub pDumpFile: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gps_Par_t_"][::std::mem::size_of::<Gps_Par_t_>() - 48usize];
    ["Alignment of Gps_Par_t_"][::std::mem::align_of::<Gps_Par_t_>() - 8usize];
    ["Offset of field: Gps_Par_t_::fTents"][::std::mem::offset_of!(Gps_Par_t_, fTents) - 0usize];
    ["Offset of field: Gps_Par_t_::fSwitch"][::std::mem::offset_of!(Gps_Par_t_, fSwitch) - 4usize];
    ["Offset of field: Gps_Par_t_::fCut"][::std::mem::offset_of!(Gps_Par_t_, fCut) - 8usize];
    ["Offset of field: Gps_Par_t_::fNpn"][::std::mem::offset_of!(Gps_Par_t_, fNpn) - 12usize];
    ["Offset of field: Gps_Par_t_::fLutProf"]
        [::std::mem::offset_of!(Gps_Par_t_, fLutProf) - 16usize];
    ["Offset of field: Gps_Par_t_::fMuxXor"][::std::mem::offset_of!(Gps_Par_t_, fMuxXor) - 20usize];
    ["Offset of field: Gps_Par_t_::fMiter"][::std::mem::offset_of!(Gps_Par_t_, fMiter) - 24usize];
    ["Offset of field: Gps_Par_t_::fSkipMap"]
        [::std::mem::offset_of!(Gps_Par_t_, fSkipMap) - 28usize];
    ["Offset of field: Gps_Par_t_::fSlacks"][::std::mem::offset_of!(Gps_Par_t_, fSlacks) - 32usize];
    ["Offset of field: Gps_Par_t_::fNoColor"]
        [::std::mem::offset_of!(Gps_Par_t_, fNoColor) - 36usize];
    ["Offset of field: Gps_Par_t_::pDumpFile"]
        [::std::mem::offset_of!(Gps_Par_t_, pDumpFile) - 40usize];
};
pub type Emb_Par_t = Emb_Par_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Emb_Par_t_ {
    pub nDims: ::std::os::raw::c_int,
    pub nSols: ::std::os::raw::c_int,
    pub nIters: ::std::os::raw::c_int,
    pub fRefine: ::std::os::raw::c_int,
    pub fCluster: ::std::os::raw::c_int,
    pub fDump: ::std::os::raw::c_int,
    pub fDumpLarge: ::std::os::raw::c_int,
    pub fShowImage: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Emb_Par_t_"][::std::mem::size_of::<Emb_Par_t_>() - 36usize];
    ["Alignment of Emb_Par_t_"][::std::mem::align_of::<Emb_Par_t_>() - 4usize];
    ["Offset of field: Emb_Par_t_::nDims"][::std::mem::offset_of!(Emb_Par_t_, nDims) - 0usize];
    ["Offset of field: Emb_Par_t_::nSols"][::std::mem::offset_of!(Emb_Par_t_, nSols) - 4usize];
    ["Offset of field: Emb_Par_t_::nIters"][::std::mem::offset_of!(Emb_Par_t_, nIters) - 8usize];
    ["Offset of field: Emb_Par_t_::fRefine"][::std::mem::offset_of!(Emb_Par_t_, fRefine) - 12usize];
    ["Offset of field: Emb_Par_t_::fCluster"]
        [::std::mem::offset_of!(Emb_Par_t_, fCluster) - 16usize];
    ["Offset of field: Emb_Par_t_::fDump"][::std::mem::offset_of!(Emb_Par_t_, fDump) - 20usize];
    ["Offset of field: Emb_Par_t_::fDumpLarge"]
        [::std::mem::offset_of!(Emb_Par_t_, fDumpLarge) - 24usize];
    ["Offset of field: Emb_Par_t_::fShowImage"]
        [::std::mem::offset_of!(Emb_Par_t_, fShowImage) - 28usize];
    ["Offset of field: Emb_Par_t_::fVerbose"]
        [::std::mem::offset_of!(Emb_Par_t_, fVerbose) - 32usize];
};
pub type Gia_ParFra_t = Gia_ParFra_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_ParFra_t_ {
    pub nFrames: ::std::os::raw::c_int,
    pub fInit: ::std::os::raw::c_int,
    pub fSaveLastLit: ::std::os::raw::c_int,
    pub fDisableSt: ::std::os::raw::c_int,
    pub fOrPos: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gia_ParFra_t_"][::std::mem::size_of::<Gia_ParFra_t_>() - 24usize];
    ["Alignment of Gia_ParFra_t_"][::std::mem::align_of::<Gia_ParFra_t_>() - 4usize];
    ["Offset of field: Gia_ParFra_t_::nFrames"]
        [::std::mem::offset_of!(Gia_ParFra_t_, nFrames) - 0usize];
    ["Offset of field: Gia_ParFra_t_::fInit"]
        [::std::mem::offset_of!(Gia_ParFra_t_, fInit) - 4usize];
    ["Offset of field: Gia_ParFra_t_::fSaveLastLit"]
        [::std::mem::offset_of!(Gia_ParFra_t_, fSaveLastLit) - 8usize];
    ["Offset of field: Gia_ParFra_t_::fDisableSt"]
        [::std::mem::offset_of!(Gia_ParFra_t_, fDisableSt) - 12usize];
    ["Offset of field: Gia_ParFra_t_::fOrPos"]
        [::std::mem::offset_of!(Gia_ParFra_t_, fOrPos) - 16usize];
    ["Offset of field: Gia_ParFra_t_::fVerbose"]
        [::std::mem::offset_of!(Gia_ParFra_t_, fVerbose) - 20usize];
};
pub type Gia_ParSim_t = Gia_ParSim_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_ParSim_t_ {
    pub nWords: ::std::os::raw::c_int,
    pub nIters: ::std::os::raw::c_int,
    pub RandSeed: ::std::os::raw::c_int,
    pub TimeLimit: ::std::os::raw::c_int,
    pub fCheckMiter: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub iOutFail: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gia_ParSim_t_"][::std::mem::size_of::<Gia_ParSim_t_>() - 28usize];
    ["Alignment of Gia_ParSim_t_"][::std::mem::align_of::<Gia_ParSim_t_>() - 4usize];
    ["Offset of field: Gia_ParSim_t_::nWords"]
        [::std::mem::offset_of!(Gia_ParSim_t_, nWords) - 0usize];
    ["Offset of field: Gia_ParSim_t_::nIters"]
        [::std::mem::offset_of!(Gia_ParSim_t_, nIters) - 4usize];
    ["Offset of field: Gia_ParSim_t_::RandSeed"]
        [::std::mem::offset_of!(Gia_ParSim_t_, RandSeed) - 8usize];
    ["Offset of field: Gia_ParSim_t_::TimeLimit"]
        [::std::mem::offset_of!(Gia_ParSim_t_, TimeLimit) - 12usize];
    ["Offset of field: Gia_ParSim_t_::fCheckMiter"]
        [::std::mem::offset_of!(Gia_ParSim_t_, fCheckMiter) - 16usize];
    ["Offset of field: Gia_ParSim_t_::fVerbose"]
        [::std::mem::offset_of!(Gia_ParSim_t_, fVerbose) - 20usize];
    ["Offset of field: Gia_ParSim_t_::iOutFail"]
        [::std::mem::offset_of!(Gia_ParSim_t_, iOutFail) - 24usize];
};
pub type Gia_ManSim_t = Gia_ManSim_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_ManSim_t_ {
    pub pAig: *mut Gia_Man_t,
    pub pPars: *mut Gia_ParSim_t,
    pub nWords: ::std::os::raw::c_int,
    pub vCis2Ids: *mut Vec_Int_t,
    pub vConsts: *mut Vec_Int_t,
    pub pDataSim: *mut ::std::os::raw::c_uint,
    pub pDataSimCis: *mut ::std::os::raw::c_uint,
    pub pDataSimCos: *mut ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gia_ManSim_t_"][::std::mem::size_of::<Gia_ManSim_t_>() - 64usize];
    ["Alignment of Gia_ManSim_t_"][::std::mem::align_of::<Gia_ManSim_t_>() - 8usize];
    ["Offset of field: Gia_ManSim_t_::pAig"][::std::mem::offset_of!(Gia_ManSim_t_, pAig) - 0usize];
    ["Offset of field: Gia_ManSim_t_::pPars"]
        [::std::mem::offset_of!(Gia_ManSim_t_, pPars) - 8usize];
    ["Offset of field: Gia_ManSim_t_::nWords"]
        [::std::mem::offset_of!(Gia_ManSim_t_, nWords) - 16usize];
    ["Offset of field: Gia_ManSim_t_::vCis2Ids"]
        [::std::mem::offset_of!(Gia_ManSim_t_, vCis2Ids) - 24usize];
    ["Offset of field: Gia_ManSim_t_::vConsts"]
        [::std::mem::offset_of!(Gia_ManSim_t_, vConsts) - 32usize];
    ["Offset of field: Gia_ManSim_t_::pDataSim"]
        [::std::mem::offset_of!(Gia_ManSim_t_, pDataSim) - 40usize];
    ["Offset of field: Gia_ManSim_t_::pDataSimCis"]
        [::std::mem::offset_of!(Gia_ManSim_t_, pDataSimCis) - 48usize];
    ["Offset of field: Gia_ManSim_t_::pDataSimCos"]
        [::std::mem::offset_of!(Gia_ManSim_t_, pDataSimCos) - 56usize];
};
pub type Jf_Par_t = Jf_Par_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Jf_Par_t_ {
    pub nLutSize: ::std::os::raw::c_int,
    pub nCutNum: ::std::os::raw::c_int,
    pub nProcNum: ::std::os::raw::c_int,
    pub nRounds: ::std::os::raw::c_int,
    pub nRoundsEla: ::std::os::raw::c_int,
    pub nRelaxRatio: ::std::os::raw::c_int,
    pub nCoarseLimit: ::std::os::raw::c_int,
    pub nAreaTuner: ::std::os::raw::c_int,
    pub nReqTimeFlex: ::std::os::raw::c_int,
    pub nVerbLimit: ::std::os::raw::c_int,
    pub nDelayLut1: ::std::os::raw::c_int,
    pub nDelayLut2: ::std::os::raw::c_int,
    pub nFastEdges: ::std::os::raw::c_int,
    pub DelayTarget: ::std::os::raw::c_int,
    pub fAreaOnly: ::std::os::raw::c_int,
    pub fPinPerm: ::std::os::raw::c_int,
    pub fPinQuick: ::std::os::raw::c_int,
    pub fPinFilter: ::std::os::raw::c_int,
    pub fOptEdge: ::std::os::raw::c_int,
    pub fUseMux7: ::std::os::raw::c_int,
    pub fPower: ::std::os::raw::c_int,
    pub fCoarsen: ::std::os::raw::c_int,
    pub fCutMin: ::std::os::raw::c_int,
    pub fFuncDsd: ::std::os::raw::c_int,
    pub fGenCnf: ::std::os::raw::c_int,
    pub fGenLit: ::std::os::raw::c_int,
    pub fCnfObjIds: ::std::os::raw::c_int,
    pub fAddOrCla: ::std::os::raw::c_int,
    pub fCnfMapping: ::std::os::raw::c_int,
    pub fPureAig: ::std::os::raw::c_int,
    pub fDoAverage: ::std::os::raw::c_int,
    pub fCutHashing: ::std::os::raw::c_int,
    pub fCutSimple: ::std::os::raw::c_int,
    pub fCutGroup: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub nLutSizeMax: ::std::os::raw::c_int,
    pub nCutNumMax: ::std::os::raw::c_int,
    pub nProcNumMax: ::std::os::raw::c_int,
    pub nLutSizeMux: ::std::os::raw::c_int,
    pub Delay: word,
    pub Area: word,
    pub Edge: word,
    pub Clause: word,
    pub Mux7: word,
    pub WordMapDelay: word,
    pub WordMapArea: word,
    pub WordMapDelayTarget: word,
    pub MapDelay: ::std::os::raw::c_int,
    pub MapArea: f32,
    pub MapAreaF: f32,
    pub MapDelayTarget: f32,
    pub Epsilon: f32,
    pub pTimesArr: *mut f32,
    pub pTimesReq: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Jf_Par_t_"][::std::mem::size_of::<Jf_Par_t_>() - 264usize];
    ["Alignment of Jf_Par_t_"][::std::mem::align_of::<Jf_Par_t_>() - 8usize];
    ["Offset of field: Jf_Par_t_::nLutSize"][::std::mem::offset_of!(Jf_Par_t_, nLutSize) - 0usize];
    ["Offset of field: Jf_Par_t_::nCutNum"][::std::mem::offset_of!(Jf_Par_t_, nCutNum) - 4usize];
    ["Offset of field: Jf_Par_t_::nProcNum"][::std::mem::offset_of!(Jf_Par_t_, nProcNum) - 8usize];
    ["Offset of field: Jf_Par_t_::nRounds"][::std::mem::offset_of!(Jf_Par_t_, nRounds) - 12usize];
    ["Offset of field: Jf_Par_t_::nRoundsEla"]
        [::std::mem::offset_of!(Jf_Par_t_, nRoundsEla) - 16usize];
    ["Offset of field: Jf_Par_t_::nRelaxRatio"]
        [::std::mem::offset_of!(Jf_Par_t_, nRelaxRatio) - 20usize];
    ["Offset of field: Jf_Par_t_::nCoarseLimit"]
        [::std::mem::offset_of!(Jf_Par_t_, nCoarseLimit) - 24usize];
    ["Offset of field: Jf_Par_t_::nAreaTuner"]
        [::std::mem::offset_of!(Jf_Par_t_, nAreaTuner) - 28usize];
    ["Offset of field: Jf_Par_t_::nReqTimeFlex"]
        [::std::mem::offset_of!(Jf_Par_t_, nReqTimeFlex) - 32usize];
    ["Offset of field: Jf_Par_t_::nVerbLimit"]
        [::std::mem::offset_of!(Jf_Par_t_, nVerbLimit) - 36usize];
    ["Offset of field: Jf_Par_t_::nDelayLut1"]
        [::std::mem::offset_of!(Jf_Par_t_, nDelayLut1) - 40usize];
    ["Offset of field: Jf_Par_t_::nDelayLut2"]
        [::std::mem::offset_of!(Jf_Par_t_, nDelayLut2) - 44usize];
    ["Offset of field: Jf_Par_t_::nFastEdges"]
        [::std::mem::offset_of!(Jf_Par_t_, nFastEdges) - 48usize];
    ["Offset of field: Jf_Par_t_::DelayTarget"]
        [::std::mem::offset_of!(Jf_Par_t_, DelayTarget) - 52usize];
    ["Offset of field: Jf_Par_t_::fAreaOnly"]
        [::std::mem::offset_of!(Jf_Par_t_, fAreaOnly) - 56usize];
    ["Offset of field: Jf_Par_t_::fPinPerm"][::std::mem::offset_of!(Jf_Par_t_, fPinPerm) - 60usize];
    ["Offset of field: Jf_Par_t_::fPinQuick"]
        [::std::mem::offset_of!(Jf_Par_t_, fPinQuick) - 64usize];
    ["Offset of field: Jf_Par_t_::fPinFilter"]
        [::std::mem::offset_of!(Jf_Par_t_, fPinFilter) - 68usize];
    ["Offset of field: Jf_Par_t_::fOptEdge"][::std::mem::offset_of!(Jf_Par_t_, fOptEdge) - 72usize];
    ["Offset of field: Jf_Par_t_::fUseMux7"][::std::mem::offset_of!(Jf_Par_t_, fUseMux7) - 76usize];
    ["Offset of field: Jf_Par_t_::fPower"][::std::mem::offset_of!(Jf_Par_t_, fPower) - 80usize];
    ["Offset of field: Jf_Par_t_::fCoarsen"][::std::mem::offset_of!(Jf_Par_t_, fCoarsen) - 84usize];
    ["Offset of field: Jf_Par_t_::fCutMin"][::std::mem::offset_of!(Jf_Par_t_, fCutMin) - 88usize];
    ["Offset of field: Jf_Par_t_::fFuncDsd"][::std::mem::offset_of!(Jf_Par_t_, fFuncDsd) - 92usize];
    ["Offset of field: Jf_Par_t_::fGenCnf"][::std::mem::offset_of!(Jf_Par_t_, fGenCnf) - 96usize];
    ["Offset of field: Jf_Par_t_::fGenLit"][::std::mem::offset_of!(Jf_Par_t_, fGenLit) - 100usize];
    ["Offset of field: Jf_Par_t_::fCnfObjIds"]
        [::std::mem::offset_of!(Jf_Par_t_, fCnfObjIds) - 104usize];
    ["Offset of field: Jf_Par_t_::fAddOrCla"]
        [::std::mem::offset_of!(Jf_Par_t_, fAddOrCla) - 108usize];
    ["Offset of field: Jf_Par_t_::fCnfMapping"]
        [::std::mem::offset_of!(Jf_Par_t_, fCnfMapping) - 112usize];
    ["Offset of field: Jf_Par_t_::fPureAig"]
        [::std::mem::offset_of!(Jf_Par_t_, fPureAig) - 116usize];
    ["Offset of field: Jf_Par_t_::fDoAverage"]
        [::std::mem::offset_of!(Jf_Par_t_, fDoAverage) - 120usize];
    ["Offset of field: Jf_Par_t_::fCutHashing"]
        [::std::mem::offset_of!(Jf_Par_t_, fCutHashing) - 124usize];
    ["Offset of field: Jf_Par_t_::fCutSimple"]
        [::std::mem::offset_of!(Jf_Par_t_, fCutSimple) - 128usize];
    ["Offset of field: Jf_Par_t_::fCutGroup"]
        [::std::mem::offset_of!(Jf_Par_t_, fCutGroup) - 132usize];
    ["Offset of field: Jf_Par_t_::fVerbose"]
        [::std::mem::offset_of!(Jf_Par_t_, fVerbose) - 136usize];
    ["Offset of field: Jf_Par_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Jf_Par_t_, fVeryVerbose) - 140usize];
    ["Offset of field: Jf_Par_t_::nLutSizeMax"]
        [::std::mem::offset_of!(Jf_Par_t_, nLutSizeMax) - 144usize];
    ["Offset of field: Jf_Par_t_::nCutNumMax"]
        [::std::mem::offset_of!(Jf_Par_t_, nCutNumMax) - 148usize];
    ["Offset of field: Jf_Par_t_::nProcNumMax"]
        [::std::mem::offset_of!(Jf_Par_t_, nProcNumMax) - 152usize];
    ["Offset of field: Jf_Par_t_::nLutSizeMux"]
        [::std::mem::offset_of!(Jf_Par_t_, nLutSizeMux) - 156usize];
    ["Offset of field: Jf_Par_t_::Delay"][::std::mem::offset_of!(Jf_Par_t_, Delay) - 160usize];
    ["Offset of field: Jf_Par_t_::Area"][::std::mem::offset_of!(Jf_Par_t_, Area) - 168usize];
    ["Offset of field: Jf_Par_t_::Edge"][::std::mem::offset_of!(Jf_Par_t_, Edge) - 176usize];
    ["Offset of field: Jf_Par_t_::Clause"][::std::mem::offset_of!(Jf_Par_t_, Clause) - 184usize];
    ["Offset of field: Jf_Par_t_::Mux7"][::std::mem::offset_of!(Jf_Par_t_, Mux7) - 192usize];
    ["Offset of field: Jf_Par_t_::WordMapDelay"]
        [::std::mem::offset_of!(Jf_Par_t_, WordMapDelay) - 200usize];
    ["Offset of field: Jf_Par_t_::WordMapArea"]
        [::std::mem::offset_of!(Jf_Par_t_, WordMapArea) - 208usize];
    ["Offset of field: Jf_Par_t_::WordMapDelayTarget"]
        [::std::mem::offset_of!(Jf_Par_t_, WordMapDelayTarget) - 216usize];
    ["Offset of field: Jf_Par_t_::MapDelay"]
        [::std::mem::offset_of!(Jf_Par_t_, MapDelay) - 224usize];
    ["Offset of field: Jf_Par_t_::MapArea"][::std::mem::offset_of!(Jf_Par_t_, MapArea) - 228usize];
    ["Offset of field: Jf_Par_t_::MapAreaF"]
        [::std::mem::offset_of!(Jf_Par_t_, MapAreaF) - 232usize];
    ["Offset of field: Jf_Par_t_::MapDelayTarget"]
        [::std::mem::offset_of!(Jf_Par_t_, MapDelayTarget) - 236usize];
    ["Offset of field: Jf_Par_t_::Epsilon"][::std::mem::offset_of!(Jf_Par_t_, Epsilon) - 240usize];
    ["Offset of field: Jf_Par_t_::pTimesArr"]
        [::std::mem::offset_of!(Jf_Par_t_, pTimesArr) - 248usize];
    ["Offset of field: Jf_Par_t_::pTimesReq"]
        [::std::mem::offset_of!(Jf_Par_t_, pTimesReq) - 256usize];
};
extern "C" {
    #[link_name = "Gia_ObjCutSign_imctk_abc_sys"]
    pub fn Gia_ObjCutSign(ObjId: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Gia_WordHasOneBit_imctk_abc_sys"]
    pub fn Gia_WordHasOneBit(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_WordHasOnePair_imctk_abc_sys"]
    pub fn Gia_WordHasOnePair(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_WordCountOnes_imctk_abc_sys"]
    pub fn Gia_WordCountOnes(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_WordFindFirstBit_imctk_abc_sys"]
    pub fn Gia_WordFindFirstBit(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManTruthIsConst0_imctk_abc_sys"]
    pub fn Gia_ManTruthIsConst0(
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManTruthIsConst1_imctk_abc_sys"]
    pub fn Gia_ManTruthIsConst1(
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManTruthCopy_imctk_abc_sys"]
    pub fn Gia_ManTruthCopy(
        pOut: *mut ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ManTruthClear_imctk_abc_sys"]
    pub fn Gia_ManTruthClear(pOut: *mut ::std::os::raw::c_uint, nVars: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ManTruthFill_imctk_abc_sys"]
    pub fn Gia_ManTruthFill(pOut: *mut ::std::os::raw::c_uint, nVars: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ManTruthNot_imctk_abc_sys"]
    pub fn Gia_ManTruthNot(
        pOut: *mut ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ManConst0Lit_imctk_abc_sys"]
    pub fn Gia_ManConst0Lit() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManConst1Lit_imctk_abc_sys"]
    pub fn Gia_ManConst1Lit() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManIsConst0Lit_imctk_abc_sys"]
    pub fn Gia_ManIsConst0Lit(iLit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManIsConst1Lit_imctk_abc_sys"]
    pub fn Gia_ManIsConst1Lit(iLit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManIsConstLit_imctk_abc_sys"]
    pub fn Gia_ManIsConstLit(iLit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_Regular_imctk_abc_sys"]
    pub fn Gia_Regular(p: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_Not_imctk_abc_sys"]
    pub fn Gia_Not(p: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_NotCond_imctk_abc_sys"]
    pub fn Gia_NotCond(p: *mut Gia_Obj_t, c: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_IsComplement_imctk_abc_sys"]
    pub fn Gia_IsComplement(p: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManName_imctk_abc_sys"]
    pub fn Gia_ManName(p: *mut Gia_Man_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Gia_ManCiNum_imctk_abc_sys"]
    pub fn Gia_ManCiNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManCoNum_imctk_abc_sys"]
    pub fn Gia_ManCoNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManPiNum_imctk_abc_sys"]
    pub fn Gia_ManPiNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManPoNum_imctk_abc_sys"]
    pub fn Gia_ManPoNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManRegNum_imctk_abc_sys"]
    pub fn Gia_ManRegNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManObjNum_imctk_abc_sys"]
    pub fn Gia_ManObjNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAndNum_imctk_abc_sys"]
    pub fn Gia_ManAndNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManXorNum_imctk_abc_sys"]
    pub fn Gia_ManXorNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManMuxNum_imctk_abc_sys"]
    pub fn Gia_ManMuxNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManBufNum_imctk_abc_sys"]
    pub fn Gia_ManBufNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAndNotBufNum_imctk_abc_sys"]
    pub fn Gia_ManAndNotBufNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManCandNum_imctk_abc_sys"]
    pub fn Gia_ManCandNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManConstrNum_imctk_abc_sys"]
    pub fn Gia_ManConstrNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManFlipVerbose_imctk_abc_sys"]
    pub fn Gia_ManFlipVerbose(p: *mut Gia_Man_t);
}
extern "C" {
    #[link_name = "Gia_ManHasChoices_imctk_abc_sys"]
    pub fn Gia_ManHasChoices(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManChoiceNum_imctk_abc_sys"]
    pub fn Gia_ManChoiceNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManConst0_imctk_abc_sys"]
    pub fn Gia_ManConst0(p: *mut Gia_Man_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManConst1_imctk_abc_sys"]
    pub fn Gia_ManConst1(p: *mut Gia_Man_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManObj_imctk_abc_sys"]
    pub fn Gia_ManObj(p: *mut Gia_Man_t, v: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManCi_imctk_abc_sys"]
    pub fn Gia_ManCi(p: *mut Gia_Man_t, v: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManCo_imctk_abc_sys"]
    pub fn Gia_ManCo(p: *mut Gia_Man_t, v: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManPi_imctk_abc_sys"]
    pub fn Gia_ManPi(p: *mut Gia_Man_t, v: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManPo_imctk_abc_sys"]
    pub fn Gia_ManPo(p: *mut Gia_Man_t, v: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManRo_imctk_abc_sys"]
    pub fn Gia_ManRo(p: *mut Gia_Man_t, v: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManRi_imctk_abc_sys"]
    pub fn Gia_ManRi(p: *mut Gia_Man_t, v: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjId_imctk_abc_sys"]
    pub fn Gia_ObjId(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCioId_imctk_abc_sys"]
    pub fn Gia_ObjCioId(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetCioId_imctk_abc_sys"]
    pub fn Gia_ObjSetCioId(pObj: *mut Gia_Obj_t, v: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjValue_imctk_abc_sys"]
    pub fn Gia_ObjValue(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetValue_imctk_abc_sys"]
    pub fn Gia_ObjSetValue(pObj: *mut Gia_Obj_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjPhase_imctk_abc_sys"]
    pub fn Gia_ObjPhase(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjPhaseReal_imctk_abc_sys"]
    pub fn Gia_ObjPhaseReal(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjPhaseDiff_imctk_abc_sys"]
    pub fn Gia_ObjPhaseDiff(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCiName_imctk_abc_sys"]
    pub fn Gia_ObjCiName(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Gia_ObjCoName_imctk_abc_sys"]
    pub fn Gia_ObjCoName(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Gia_ObjName_imctk_abc_sys"]
    pub fn Gia_ObjName(p: *mut Gia_Man_t, i: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Gia_ObjNameObj_imctk_abc_sys"]
    pub fn Gia_ObjNameObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Gia_ObjIsTerm_imctk_abc_sys"]
    pub fn Gia_ObjIsTerm(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsAndOrConst0_imctk_abc_sys"]
    pub fn Gia_ObjIsAndOrConst0(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsCi_imctk_abc_sys"]
    pub fn Gia_ObjIsCi(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsCo_imctk_abc_sys"]
    pub fn Gia_ObjIsCo(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsAnd_imctk_abc_sys"]
    pub fn Gia_ObjIsAnd(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsXor_imctk_abc_sys"]
    pub fn Gia_ObjIsXor(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsMuxId_imctk_abc_sys"]
    pub fn Gia_ObjIsMuxId(p: *mut Gia_Man_t, iObj: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsMux_imctk_abc_sys"]
    pub fn Gia_ObjIsMux(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsAndReal_imctk_abc_sys"]
    pub fn Gia_ObjIsAndReal(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsBuf_imctk_abc_sys"]
    pub fn Gia_ObjIsBuf(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsAndNotBuf_imctk_abc_sys"]
    pub fn Gia_ObjIsAndNotBuf(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsCand_imctk_abc_sys"]
    pub fn Gia_ObjIsCand(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsConst0_imctk_abc_sys"]
    pub fn Gia_ObjIsConst0(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManObjIsConst0_imctk_abc_sys"]
    pub fn Gia_ManObjIsConst0(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_Obj2Lit_imctk_abc_sys"]
    pub fn Gia_Obj2Lit(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_Lit2Obj_imctk_abc_sys"]
    pub fn Gia_Lit2Obj(p: *mut Gia_Man_t, iLit: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManCiLit_imctk_abc_sys"]
    pub fn Gia_ManCiLit(p: *mut Gia_Man_t, CiId: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManIdToCioId_imctk_abc_sys"]
    pub fn Gia_ManIdToCioId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManCiIdToId_imctk_abc_sys"]
    pub fn Gia_ManCiIdToId(p: *mut Gia_Man_t, CiId: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManCoIdToId_imctk_abc_sys"]
    pub fn Gia_ManCoIdToId(p: *mut Gia_Man_t, CoId: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsPi_imctk_abc_sys"]
    pub fn Gia_ObjIsPi(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsPo_imctk_abc_sys"]
    pub fn Gia_ObjIsPo(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsRo_imctk_abc_sys"]
    pub fn Gia_ObjIsRo(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsRi_imctk_abc_sys"]
    pub fn Gia_ObjIsRi(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRoToRi_imctk_abc_sys"]
    pub fn Gia_ObjRoToRi(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjRiToRo_imctk_abc_sys"]
    pub fn Gia_ObjRiToRo(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjRoToRiId_imctk_abc_sys"]
    pub fn Gia_ObjRoToRiId(
        p: *mut Gia_Man_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRiToRoId_imctk_abc_sys"]
    pub fn Gia_ObjRiToRoId(
        p: *mut Gia_Man_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjDiff0_imctk_abc_sys"]
    pub fn Gia_ObjDiff0(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjDiff1_imctk_abc_sys"]
    pub fn Gia_ObjDiff1(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninC0_imctk_abc_sys"]
    pub fn Gia_ObjFaninC0(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninC1_imctk_abc_sys"]
    pub fn Gia_ObjFaninC1(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninC2_imctk_abc_sys"]
    pub fn Gia_ObjFaninC2(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninC_imctk_abc_sys"]
    pub fn Gia_ObjFaninC(pObj: *mut Gia_Obj_t, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanin0_imctk_abc_sys"]
    pub fn Gia_ObjFanin0(pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjFanin1_imctk_abc_sys"]
    pub fn Gia_ObjFanin1(pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjFanin2_imctk_abc_sys"]
    pub fn Gia_ObjFanin2(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjFanin_imctk_abc_sys"]
    pub fn Gia_ObjFanin(pObj: *mut Gia_Obj_t, n: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjChild0_imctk_abc_sys"]
    pub fn Gia_ObjChild0(pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjChild1_imctk_abc_sys"]
    pub fn Gia_ObjChild1(pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjChild2_imctk_abc_sys"]
    pub fn Gia_ObjChild2(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjFaninId0_imctk_abc_sys"]
    pub fn Gia_ObjFaninId0(
        pObj: *mut Gia_Obj_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninId1_imctk_abc_sys"]
    pub fn Gia_ObjFaninId1(
        pObj: *mut Gia_Obj_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninId2_imctk_abc_sys"]
    pub fn Gia_ObjFaninId2(
        p: *mut Gia_Man_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninId_imctk_abc_sys"]
    pub fn Gia_ObjFaninId(
        pObj: *mut Gia_Obj_t,
        ObjId: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninId0p_imctk_abc_sys"]
    pub fn Gia_ObjFaninId0p(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninId1p_imctk_abc_sys"]
    pub fn Gia_ObjFaninId1p(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninId2p_imctk_abc_sys"]
    pub fn Gia_ObjFaninId2p(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninIdp_imctk_abc_sys"]
    pub fn Gia_ObjFaninIdp(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninLit0_imctk_abc_sys"]
    pub fn Gia_ObjFaninLit0(
        pObj: *mut Gia_Obj_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninLit1_imctk_abc_sys"]
    pub fn Gia_ObjFaninLit1(
        pObj: *mut Gia_Obj_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninLit2_imctk_abc_sys"]
    pub fn Gia_ObjFaninLit2(
        p: *mut Gia_Man_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninLit0p_imctk_abc_sys"]
    pub fn Gia_ObjFaninLit0p(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninLit1p_imctk_abc_sys"]
    pub fn Gia_ObjFaninLit1p(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFaninLit2p_imctk_abc_sys"]
    pub fn Gia_ObjFaninLit2p(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFlipFaninC0_imctk_abc_sys"]
    pub fn Gia_ObjFlipFaninC0(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjFaninNum_imctk_abc_sys"]
    pub fn Gia_ObjFaninNum(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjWhatFanin_imctk_abc_sys"]
    pub fn Gia_ObjWhatFanin(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        pFanin: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManCoDriverId_imctk_abc_sys"]
    pub fn Gia_ManCoDriverId(
        p: *mut Gia_Man_t,
        iCoIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManPoIsConst_imctk_abc_sys"]
    pub fn Gia_ManPoIsConst(
        p: *mut Gia_Man_t,
        iPoIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManPoIsConst0_imctk_abc_sys"]
    pub fn Gia_ManPoIsConst0(
        p: *mut Gia_Man_t,
        iPoIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManPoIsConst1_imctk_abc_sys"]
    pub fn Gia_ManPoIsConst1(
        p: *mut Gia_Man_t,
        iPoIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCopy_imctk_abc_sys"]
    pub fn Gia_ObjCopy(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjLitCopy_imctk_abc_sys"]
    pub fn Gia_ObjLitCopy(p: *mut Gia_Man_t, iLit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanin0Copy_imctk_abc_sys"]
    pub fn Gia_ObjFanin0Copy(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanin1Copy_imctk_abc_sys"]
    pub fn Gia_ObjFanin1Copy(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanin2Copy_imctk_abc_sys"]
    pub fn Gia_ObjFanin2Copy(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCopyF_imctk_abc_sys"]
    pub fn Gia_ObjCopyF(
        p: *mut Gia_Man_t,
        f: ::std::os::raw::c_int,
        pObj: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetCopyF_imctk_abc_sys"]
    pub fn Gia_ObjSetCopyF(
        p: *mut Gia_Man_t,
        f: ::std::os::raw::c_int,
        pObj: *mut Gia_Obj_t,
        iLit: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ObjCopyArray_imctk_abc_sys"]
    pub fn Gia_ObjCopyArray(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetCopyArray_imctk_abc_sys"]
    pub fn Gia_ObjSetCopyArray(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        iLit: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ManCleanCopyArray_imctk_abc_sys"]
    pub fn Gia_ManCleanCopyArray(p: *mut Gia_Man_t);
}
extern "C" {
    #[link_name = "Gia_ObjCopy2Array_imctk_abc_sys"]
    pub fn Gia_ObjCopy2Array(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetCopy2Array_imctk_abc_sys"]
    pub fn Gia_ObjSetCopy2Array(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        iLit: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ManCleanCopy2Array_imctk_abc_sys"]
    pub fn Gia_ManCleanCopy2Array(p: *mut Gia_Man_t);
}
extern "C" {
    #[link_name = "Gia_ObjFanin0CopyF_imctk_abc_sys"]
    pub fn Gia_ObjFanin0CopyF(
        p: *mut Gia_Man_t,
        f: ::std::os::raw::c_int,
        pObj: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanin1CopyF_imctk_abc_sys"]
    pub fn Gia_ObjFanin1CopyF(
        p: *mut Gia_Man_t,
        f: ::std::os::raw::c_int,
        pObj: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanin0CopyArray_imctk_abc_sys"]
    pub fn Gia_ObjFanin0CopyArray(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanin1CopyArray_imctk_abc_sys"]
    pub fn Gia_ObjFanin1CopyArray(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFromLit_imctk_abc_sys"]
    pub fn Gia_ObjFromLit(p: *mut Gia_Man_t, iLit: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjToLit_imctk_abc_sys"]
    pub fn Gia_ObjToLit(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjPhaseRealLit_imctk_abc_sys"]
    pub fn Gia_ObjPhaseRealLit(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLevelId_imctk_abc_sys"]
    pub fn Gia_ObjLevelId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLevel_imctk_abc_sys"]
    pub fn Gia_ObjLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjUpdateLevelId_imctk_abc_sys"]
    pub fn Gia_ObjUpdateLevelId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ObjSetLevelId_imctk_abc_sys"]
    pub fn Gia_ObjSetLevelId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ObjSetLevel_imctk_abc_sys"]
    pub fn Gia_ObjSetLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t, l: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjSetCoLevel_imctk_abc_sys"]
    pub fn Gia_ObjSetCoLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjSetBufLevel_imctk_abc_sys"]
    pub fn Gia_ObjSetBufLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjSetAndLevel_imctk_abc_sys"]
    pub fn Gia_ObjSetAndLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjSetXorLevel_imctk_abc_sys"]
    pub fn Gia_ObjSetXorLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjSetMuxLevel_imctk_abc_sys"]
    pub fn Gia_ObjSetMuxLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjSetGateLevel_imctk_abc_sys"]
    pub fn Gia_ObjSetGateLevel(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjHasNumId_imctk_abc_sys"]
    pub fn Gia_ObjHasNumId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjNumId_imctk_abc_sys"]
    pub fn Gia_ObjNumId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjNum_imctk_abc_sys"]
    pub fn Gia_ObjNum(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetNumId_imctk_abc_sys"]
    pub fn Gia_ObjSetNumId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int, n: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjSetNum_imctk_abc_sys"]
    pub fn Gia_ObjSetNum(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t, n: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjResetNumId_imctk_abc_sys"]
    pub fn Gia_ObjResetNumId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjRefNumId_imctk_abc_sys"]
    pub fn Gia_ObjRefNumId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRefIncId_imctk_abc_sys"]
    pub fn Gia_ObjRefIncId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRefDecId_imctk_abc_sys"]
    pub fn Gia_ObjRefDecId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRefNum_imctk_abc_sys"]
    pub fn Gia_ObjRefNum(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRefInc_imctk_abc_sys"]
    pub fn Gia_ObjRefInc(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRefDec_imctk_abc_sys"]
    pub fn Gia_ObjRefDec(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjRefFanin0Inc_imctk_abc_sys"]
    pub fn Gia_ObjRefFanin0Inc(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjRefFanin1Inc_imctk_abc_sys"]
    pub fn Gia_ObjRefFanin1Inc(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjRefFanin2Inc_imctk_abc_sys"]
    pub fn Gia_ObjRefFanin2Inc(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjRefFanin0Dec_imctk_abc_sys"]
    pub fn Gia_ObjRefFanin0Dec(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjRefFanin1Dec_imctk_abc_sys"]
    pub fn Gia_ObjRefFanin1Dec(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjRefFanin2Dec_imctk_abc_sys"]
    pub fn Gia_ObjRefFanin2Dec(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjLutRefNumId_imctk_abc_sys"]
    pub fn Gia_ObjLutRefNumId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutRefIncId_imctk_abc_sys"]
    pub fn Gia_ObjLutRefIncId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutRefDecId_imctk_abc_sys"]
    pub fn Gia_ObjLutRefDecId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutRefNum_imctk_abc_sys"]
    pub fn Gia_ObjLutRefNum(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutRefInc_imctk_abc_sys"]
    pub fn Gia_ObjLutRefInc(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutRefDec_imctk_abc_sys"]
    pub fn Gia_ObjLutRefDec(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetTravIdCurrent_imctk_abc_sys"]
    pub fn Gia_ObjSetTravIdCurrent(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjSetTravIdPrevious_imctk_abc_sys"]
    pub fn Gia_ObjSetTravIdPrevious(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjIsTravIdCurrent_imctk_abc_sys"]
    pub fn Gia_ObjIsTravIdCurrent(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsTravIdPrevious_imctk_abc_sys"]
    pub fn Gia_ObjIsTravIdPrevious(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjUpdateTravIdCurrent_imctk_abc_sys"]
    pub fn Gia_ObjUpdateTravIdCurrent(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjUpdateTravIdPrevious_imctk_abc_sys"]
    pub fn Gia_ObjUpdateTravIdPrevious(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetTravIdCurrentId_imctk_abc_sys"]
    pub fn Gia_ObjSetTravIdCurrentId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjSetTravIdPreviousId_imctk_abc_sys"]
    pub fn Gia_ObjSetTravIdPreviousId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjIsTravIdCurrentId_imctk_abc_sys"]
    pub fn Gia_ObjIsTravIdCurrentId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsTravIdPreviousId_imctk_abc_sys"]
    pub fn Gia_ObjIsTravIdPreviousId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjUpdateTravIdCurrentId_imctk_abc_sys"]
    pub fn Gia_ObjUpdateTravIdCurrentId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjUpdateTravIdPreviousId_imctk_abc_sys"]
    pub fn Gia_ObjUpdateTravIdPreviousId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManTimeClean_imctk_abc_sys"]
    pub fn Gia_ManTimeClean(p: *mut Gia_Man_t);
}
extern "C" {
    #[link_name = "Gia_ManTimeStart_imctk_abc_sys"]
    pub fn Gia_ManTimeStart(p: *mut Gia_Man_t);
}
extern "C" {
    #[link_name = "Gia_ManTimeStop_imctk_abc_sys"]
    pub fn Gia_ManTimeStop(p: *mut Gia_Man_t);
}
extern "C" {
    #[link_name = "Gia_ObjTimeArrival_imctk_abc_sys"]
    pub fn Gia_ObjTimeArrival(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "Gia_ObjTimeRequired_imctk_abc_sys"]
    pub fn Gia_ObjTimeRequired(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "Gia_ObjTimeSlack_imctk_abc_sys"]
    pub fn Gia_ObjTimeSlack(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "Gia_ObjTimeArrivalObj_imctk_abc_sys"]
    pub fn Gia_ObjTimeArrivalObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> f32;
}
extern "C" {
    #[link_name = "Gia_ObjTimeRequiredObj_imctk_abc_sys"]
    pub fn Gia_ObjTimeRequiredObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> f32;
}
extern "C" {
    #[link_name = "Gia_ObjTimeSlackObj_imctk_abc_sys"]
    pub fn Gia_ObjTimeSlackObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> f32;
}
extern "C" {
    #[link_name = "Gia_ObjSetTimeArrival_imctk_abc_sys"]
    pub fn Gia_ObjSetTimeArrival(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int, t: f32);
}
extern "C" {
    #[link_name = "Gia_ObjSetTimeRequired_imctk_abc_sys"]
    pub fn Gia_ObjSetTimeRequired(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int, t: f32);
}
extern "C" {
    #[link_name = "Gia_ObjSetTimeSlack_imctk_abc_sys"]
    pub fn Gia_ObjSetTimeSlack(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int, t: f32);
}
extern "C" {
    #[link_name = "Gia_ObjSetTimeArrivalObj_imctk_abc_sys"]
    pub fn Gia_ObjSetTimeArrivalObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t, t: f32);
}
extern "C" {
    #[link_name = "Gia_ObjSetTimeRequiredObj_imctk_abc_sys"]
    pub fn Gia_ObjSetTimeRequiredObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t, t: f32);
}
extern "C" {
    #[link_name = "Gia_ObjSetTimeSlackObj_imctk_abc_sys"]
    pub fn Gia_ObjSetTimeSlackObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t, t: f32);
}
extern "C" {
    #[link_name = "Gia_ObjSimWords_imctk_abc_sys"]
    pub fn Gia_ObjSimWords(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSimPi_imctk_abc_sys"]
    pub fn Gia_ObjSimPi(p: *mut Gia_Man_t, PiId: ::std::os::raw::c_int) -> *mut word;
}
extern "C" {
    #[link_name = "Gia_ObjSim_imctk_abc_sys"]
    pub fn Gia_ObjSim(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> *mut word;
}
extern "C" {
    #[link_name = "Gia_ObjSimObj_imctk_abc_sys"]
    pub fn Gia_ObjSimObj(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut word;
}
extern "C" {
    pub fn Gia_ObjAddFanout(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t, pFanout: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ManAppendObj_imctk_abc_sys"]
    pub fn Gia_ManAppendObj(p: *mut Gia_Man_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ManAppendCi_imctk_abc_sys"]
    pub fn Gia_ManAppendCi(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManQuantSetSuppAnd(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ManBuiltInSimPerform(p: *mut Gia_Man_t, iObj: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ManAppendAnd_imctk_abc_sys"]
    pub fn Gia_ManAppendAnd(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendXorReal_imctk_abc_sys"]
    pub fn Gia_ManAppendXorReal(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendMuxReal_imctk_abc_sys"]
    pub fn Gia_ManAppendMuxReal(
        p: *mut Gia_Man_t,
        iLitC: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
        iLit0: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendBuf_imctk_abc_sys"]
    pub fn Gia_ManAppendBuf(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendCo_imctk_abc_sys"]
    pub fn Gia_ManAppendCo(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendOr_imctk_abc_sys"]
    pub fn Gia_ManAppendOr(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendMux_imctk_abc_sys"]
    pub fn Gia_ManAppendMux(
        p: *mut Gia_Man_t,
        iCtrl: ::std::os::raw::c_int,
        iData1: ::std::os::raw::c_int,
        iData0: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendMaj_imctk_abc_sys"]
    pub fn Gia_ManAppendMaj(
        p: *mut Gia_Man_t,
        iData0: ::std::os::raw::c_int,
        iData1: ::std::os::raw::c_int,
        iData2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendXor_imctk_abc_sys"]
    pub fn Gia_ManAppendXor(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendAnd2_imctk_abc_sys"]
    pub fn Gia_ManAppendAnd2(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendOr2_imctk_abc_sys"]
    pub fn Gia_ManAppendOr2(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendMux2_imctk_abc_sys"]
    pub fn Gia_ManAppendMux2(
        p: *mut Gia_Man_t,
        iCtrl: ::std::os::raw::c_int,
        iData1: ::std::os::raw::c_int,
        iData0: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendMaj2_imctk_abc_sys"]
    pub fn Gia_ManAppendMaj2(
        p: *mut Gia_Man_t,
        iData0: ::std::os::raw::c_int,
        iData1: ::std::os::raw::c_int,
        iData2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendXor2_imctk_abc_sys"]
    pub fn Gia_ManAppendXor2(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManAppendXorReal2_imctk_abc_sys"]
    pub fn Gia_ManAppendXorReal2(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManPatchCoDriver_imctk_abc_sys"]
    pub fn Gia_ManPatchCoDriver(
        p: *mut Gia_Man_t,
        iCoIndex: ::std::os::raw::c_int,
        iLit0: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_XsimNotCond_imctk_abc_sys"]
    pub fn Gia_XsimNotCond(
        Value: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_XsimAndCond_imctk_abc_sys"]
    pub fn Gia_XsimAndCond(
        Value0: ::std::os::raw::c_int,
        fCompl0: ::std::os::raw::c_int,
        Value1: ::std::os::raw::c_int,
        fCompl1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimSetC_imctk_abc_sys"]
    pub fn Gia_ObjTerSimSetC(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjTerSimSet0_imctk_abc_sys"]
    pub fn Gia_ObjTerSimSet0(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjTerSimSet1_imctk_abc_sys"]
    pub fn Gia_ObjTerSimSet1(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjTerSimSetX_imctk_abc_sys"]
    pub fn Gia_ObjTerSimSetX(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGetC_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGetC(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGet0_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGet0(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGet1_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGet1(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGetX_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGetX(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGet0Fanin0_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGet0Fanin0(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGet1Fanin0_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGet1Fanin0(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGet0Fanin1_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGet0Fanin1(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimGet1Fanin1_imctk_abc_sys"]
    pub fn Gia_ObjTerSimGet1Fanin1(pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjTerSimAnd_imctk_abc_sys"]
    pub fn Gia_ObjTerSimAnd(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjTerSimCo_imctk_abc_sys"]
    pub fn Gia_ObjTerSimCo(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjTerSimRo_imctk_abc_sys"]
    pub fn Gia_ObjTerSimRo(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_ObjTerSimPrint_imctk_abc_sys"]
    pub fn Gia_ObjTerSimPrint(pObj: *mut Gia_Obj_t);
}
extern "C" {
    #[link_name = "Gia_AigerReadInt_imctk_abc_sys"]
    pub fn Gia_AigerReadInt(pPos: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_AigerWriteInt_imctk_abc_sys"]
    pub fn Gia_AigerWriteInt(pPos: *mut ::std::os::raw::c_uchar, Value: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_AigerReadUnsigned_imctk_abc_sys"]
    pub fn Gia_AigerReadUnsigned(
        ppPos: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Gia_AigerWriteUnsigned_imctk_abc_sys"]
    pub fn Gia_AigerWriteUnsigned(vStr: *mut Vec_Str_t, x: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "Gia_AigerWriteUnsignedFile_imctk_abc_sys"]
    pub fn Gia_AigerWriteUnsignedFile(pFile: *mut FILE, x: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "Gia_AigerWriteUnsignedBuffer_imctk_abc_sys"]
    pub fn Gia_AigerWriteUnsignedBuffer(
        pBuffer: *mut ::std::os::raw::c_uchar,
        Pos: ::std::os::raw::c_int,
        x: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjReprObj_imctk_abc_sys"]
    pub fn Gia_ObjReprObj(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjRepr_imctk_abc_sys"]
    pub fn Gia_ObjRepr(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetRepr_imctk_abc_sys"]
    pub fn Gia_ObjSetRepr(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int, Num: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjSetReprRev_imctk_abc_sys"]
    pub fn Gia_ObjSetReprRev(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        Num: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ObjUnsetRepr_imctk_abc_sys"]
    pub fn Gia_ObjUnsetRepr(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjHasRepr_imctk_abc_sys"]
    pub fn Gia_ObjHasRepr(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjReprSelf_imctk_abc_sys"]
    pub fn Gia_ObjReprSelf(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSibl_imctk_abc_sys"]
    pub fn Gia_ObjSibl(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSiblObj_imctk_abc_sys"]
    pub fn Gia_ObjSiblObj(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjProved_imctk_abc_sys"]
    pub fn Gia_ObjProved(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetProved_imctk_abc_sys"]
    pub fn Gia_ObjSetProved(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjUnsetProved_imctk_abc_sys"]
    pub fn Gia_ObjUnsetProved(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjFailed_imctk_abc_sys"]
    pub fn Gia_ObjFailed(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetFailed_imctk_abc_sys"]
    pub fn Gia_ObjSetFailed(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjColor_imctk_abc_sys"]
    pub fn Gia_ObjColor(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjColors_imctk_abc_sys"]
    pub fn Gia_ObjColors(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetColor_imctk_abc_sys"]
    pub fn Gia_ObjSetColor(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int, c: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjSetColors_imctk_abc_sys"]
    pub fn Gia_ObjSetColors(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjVisitColor_imctk_abc_sys"]
    pub fn Gia_ObjVisitColor(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjDiffColors_imctk_abc_sys"]
    pub fn Gia_ObjDiffColors(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjDiffColors2_imctk_abc_sys"]
    pub fn Gia_ObjDiffColors2(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjNextObj_imctk_abc_sys"]
    pub fn Gia_ObjNextObj(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjNext_imctk_abc_sys"]
    pub fn Gia_ObjNext(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjSetNext_imctk_abc_sys"]
    pub fn Gia_ObjSetNext(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int, Num: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjIsConst_imctk_abc_sys"]
    pub fn Gia_ObjIsConst(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsHead_imctk_abc_sys"]
    pub fn Gia_ObjIsHead(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsNone_imctk_abc_sys"]
    pub fn Gia_ObjIsNone(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsTail_imctk_abc_sys"]
    pub fn Gia_ObjIsTail(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsClass_imctk_abc_sys"]
    pub fn Gia_ObjIsClass(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjHasSameRepr_imctk_abc_sys"]
    pub fn Gia_ObjHasSameRepr(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsFailedPair_imctk_abc_sys"]
    pub fn Gia_ObjIsFailedPair(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ClassIsPair_imctk_abc_sys"]
    pub fn Gia_ClassIsPair(p: *mut Gia_Man_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ClassUndoPair_imctk_abc_sys"]
    pub fn Gia_ClassUndoPair(p: *mut Gia_Man_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Gia_ObjFoffsetId_imctk_abc_sys"]
    pub fn Gia_ObjFoffsetId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFoffset_imctk_abc_sys"]
    pub fn Gia_ObjFoffset(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanoutNumId_imctk_abc_sys"]
    pub fn Gia_ObjFanoutNumId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanoutNum_imctk_abc_sys"]
    pub fn Gia_ObjFanoutNum(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanoutId_imctk_abc_sys"]
    pub fn Gia_ObjFanoutId(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjFanout0_imctk_abc_sys"]
    pub fn Gia_ObjFanout0(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjFanout_imctk_abc_sys"]
    pub fn Gia_ObjFanout(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        i: ::std::os::raw::c_int,
    ) -> *mut Gia_Obj_t;
}
extern "C" {
    #[link_name = "Gia_ObjSetFanout_imctk_abc_sys"]
    pub fn Gia_ObjSetFanout(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        i: ::std::os::raw::c_int,
        pFan: *mut Gia_Obj_t,
    );
}
extern "C" {
    #[link_name = "Gia_ObjSetFanoutInt_imctk_abc_sys"]
    pub fn Gia_ObjSetFanoutInt(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        i: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Gia_ManHasMapping_imctk_abc_sys"]
    pub fn Gia_ManHasMapping(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsLut_imctk_abc_sys"]
    pub fn Gia_ObjIsLut(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutSize_imctk_abc_sys"]
    pub fn Gia_ObjLutSize(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutFanins_imctk_abc_sys"]
    pub fn Gia_ObjLutFanins(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutFanin_imctk_abc_sys"]
    pub fn Gia_ObjLutFanin(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutMuxId_imctk_abc_sys"]
    pub fn Gia_ObjLutMuxId(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutIsMux_imctk_abc_sys"]
    pub fn Gia_ObjLutIsMux(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManHasMapping2_imctk_abc_sys"]
    pub fn Gia_ManHasMapping2(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsLut2_imctk_abc_sys"]
    pub fn Gia_ObjIsLut2(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutSize2_imctk_abc_sys"]
    pub fn Gia_ObjLutSize2(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutFanins2_imctk_abc_sys"]
    pub fn Gia_ObjLutFanins2(p: *mut Gia_Man_t, Id: ::std::os::raw::c_int) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Gia_ObjLutFanin2_imctk_abc_sys"]
    pub fn Gia_ObjLutFanin2(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutFanoutNum2_imctk_abc_sys"]
    pub fn Gia_ObjLutFanoutNum2(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjLutFanout2_imctk_abc_sys"]
    pub fn Gia_ObjLutFanout2(
        p: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ManHasCellMapping_imctk_abc_sys"]
    pub fn Gia_ManHasCellMapping(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsCell_imctk_abc_sys"]
    pub fn Gia_ObjIsCell(p: *mut Gia_Man_t, iLit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsCellInv_imctk_abc_sys"]
    pub fn Gia_ObjIsCellInv(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjIsCellBuf_imctk_abc_sys"]
    pub fn Gia_ObjIsCellBuf(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCellSize_imctk_abc_sys"]
    pub fn Gia_ObjCellSize(p: *mut Gia_Man_t, iLit: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCellFanins_imctk_abc_sys"]
    pub fn Gia_ObjCellFanins(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCellFanin_imctk_abc_sys"]
    pub fn Gia_ObjCellFanin(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Gia_ObjCellId_imctk_abc_sys"]
    pub fn Gia_ObjCellId(p: *mut Gia_Man_t, iLit: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_FileSize(pFileName: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_AigerReadFromMemory(
        pContents: *mut ::std::os::raw::c_char,
        nFileSize: ::std::os::raw::c_int,
        fGiaSimple: ::std::os::raw::c_int,
        fSkipStrash: ::std::os::raw::c_int,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_AigerRead(
        pFileName: *mut ::std::os::raw::c_char,
        fGiaSimple: ::std::os::raw::c_int,
        fSkipStrash: ::std::os::raw::c_int,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_AigerWrite(
        p: *mut Gia_Man_t,
        pFileName: *mut ::std::os::raw::c_char,
        fWriteSymbols: ::std::os::raw::c_int,
        fCompact: ::std::os::raw::c_int,
        fWriteNewLine: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_AigerWriteS(
        p: *mut Gia_Man_t,
        pFileName: *mut ::std::os::raw::c_char,
        fWriteSymbols: ::std::os::raw::c_int,
        fCompact: ::std::os::raw::c_int,
        fWriteNewLine: ::std::os::raw::c_int,
        fSkipComment: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_DumpAiger(
        p: *mut Gia_Man_t,
        pFilePrefix: *mut ::std::os::raw::c_char,
        iFileNum: ::std::os::raw::c_int,
        nFileNumDigits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_AigerWriteIntoMemoryStr(p: *mut Gia_Man_t) -> *mut Vec_Str_t;
}
extern "C" {
    pub fn Gia_AigerWriteIntoMemoryStrPart(
        p: *mut Gia_Man_t,
        vCis: *mut Vec_Int_t,
        vAnds: *mut Vec_Int_t,
        vCos: *mut Vec_Int_t,
        nRegs: ::std::os::raw::c_int,
    ) -> *mut Vec_Str_t;
}
extern "C" {
    pub fn Gia_AigerWriteSimple(pInit: *mut Gia_Man_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Gia_ManBalance(
        p: *mut Gia_Man_t,
        fSimpleAnd: ::std::os::raw::c_int,
        fStrict: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManAreaBalance(
        p: *mut Gia_Man_t,
        fSimpleAnd: ::std::os::raw::c_int,
        nNewNodesMax: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManAigSyn2(
        p: *mut Gia_Man_t,
        fOldAlgo: ::std::os::raw::c_int,
        fCoarsen: ::std::os::raw::c_int,
        fCutMin: ::std::os::raw::c_int,
        nRelaxRatio: ::std::os::raw::c_int,
        fDelayMin: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManAigSyn3(
        p: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManAigSyn4(
        p: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManConvertAigToTruth(
        p: *mut Gia_Man_t,
        pRoot: *mut Gia_Obj_t,
        vLeaves: *mut Vec_Int_t,
        vTruth: *mut Vec_Int_t,
        vVisited: *mut Vec_Int_t,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Gia_ManPerformBidec(
        p: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManVerifyCex(
        pAig: *mut Gia_Man_t,
        p: *mut Abc_Cex_t,
        fDualOut: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManFindFailedPoCex(
        pAig: *mut Gia_Man_t,
        p: *mut Abc_Cex_t,
        nOutputs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManSetFailedPoCex(pAig: *mut Gia_Man_t, p: *mut Abc_Cex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCounterExampleValueStart(pGia: *mut Gia_Man_t, pCex: *mut Abc_Cex_t);
}
extern "C" {
    pub fn Gia_ManCounterExampleValueStop(pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCounterExampleValueLookup(
        pGia: *mut Gia_Man_t,
        Id: ::std::os::raw::c_int,
        iFrame: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCexExtendToIncludeCurrentStates(
        p: *mut Gia_Man_t,
        pCex: *mut Abc_Cex_t,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Gia_ManCexExtendToIncludeAllObjects(
        p: *mut Gia_Man_t,
        pCex: *mut Abc_Cex_t,
    ) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Cbs_ManSolveMiter(
        pGia: *mut Gia_Man_t,
        nConfs: ::std::os::raw::c_int,
        pvStatus: *mut *mut Vec_Str_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cbs_Man_t_ {
    _unused: [u8; 0],
}
pub type Cbs_Man_t = Cbs_Man_t_;
extern "C" {
    pub fn Cbs_ManAlloc(pGia: *mut Gia_Man_t) -> *mut Cbs_Man_t;
}
extern "C" {
    pub fn Cbs_ManStop(p: *mut Cbs_Man_t);
}
extern "C" {
    pub fn Cbs_ManSolve(p: *mut Cbs_Man_t, pObj: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cbs_ManSolve2(
        p: *mut Cbs_Man_t,
        pObj: *mut Gia_Obj_t,
        pObj2: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cbs_ManSolveMiterNc(
        pGia: *mut Gia_Man_t,
        nConfs: ::std::os::raw::c_int,
        pvStatus: *mut *mut Vec_Str_t,
        f0Proved: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Cbs_ManSetConflictNum(p: *mut Cbs_Man_t, Num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Cbs_ReadModel(p: *mut Cbs_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Tas_ManSolveMiterNc(
        pGia: *mut Gia_Man_t,
        nConfs: ::std::os::raw::c_int,
        pvStatus: *mut *mut Vec_Str_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManPrintFanio(pGia: *mut Gia_Man_t, nNodes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ManDupCof(p: *mut Gia_Man_t, iVar: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupCofAllInt(
        p: *mut Gia_Man_t,
        vSigs: *mut Vec_Int_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupCofAll(
        p: *mut Gia_Man_t,
        nFanLim: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ResubVarNum(vResub: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ResubToTruth6(vResub: *mut Vec_Int_t) -> word;
}
extern "C" {
    pub fn Gia_ManEvalSolutionOne(
        p: *mut Gia_Man_t,
        vSims: *mut Vec_Wrd_t,
        vIsfs: *mut Vec_Wrd_t,
        vCands: *mut Vec_Int_t,
        vSet: *mut Vec_Int_t,
        nWords: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManDeriveSolutionOne(
        p: *mut Gia_Man_t,
        vSims: *mut Vec_Wrd_t,
        vIsfs: *mut Vec_Wrd_t,
        vCands: *mut Vec_Int_t,
        vSet: *mut Vec_Int_t,
        nWords: ::std::os::raw::c_int,
        Type: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManCollectCis(
        p: *mut Gia_Man_t,
        pNodes: *mut ::std::os::raw::c_int,
        nNodes: ::std::os::raw::c_int,
        vSupp: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Gia_ManCollectAnds_rec(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        vNodes: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Gia_ManCollectAnds(
        p: *mut Gia_Man_t,
        pNodes: *mut ::std::os::raw::c_int,
        nNodes: ::std::os::raw::c_int,
        vNodes: *mut Vec_Int_t,
        vLeaves: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Gia_ManCollectAndsAll(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManCollectNodesCis(
        p: *mut Gia_Man_t,
        pNodes: *mut ::std::os::raw::c_int,
        nNodes: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManSuppSize(
        p: *mut Gia_Man_t,
        pNodes: *mut ::std::os::raw::c_int,
        nNodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManConeSize(
        p: *mut Gia_Man_t,
        pNodes: *mut ::std::os::raw::c_int,
        nNodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLevelize(p: *mut Gia_Man_t) -> *mut Vec_Vec_t;
}
extern "C" {
    pub fn Gia_ManLevelizeR(p: *mut Gia_Man_t) -> *mut Vec_Wec_t;
}
extern "C" {
    pub fn Gia_ManOrderReverse(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManCollectTfi(p: *mut Gia_Man_t, vRoots: *mut Vec_Int_t, vNodes: *mut Vec_Int_t);
}
extern "C" {
    pub fn Gia_ManCollectTfo(p: *mut Gia_Man_t, vRoots: *mut Vec_Int_t, vNodes: *mut Vec_Int_t);
}
extern "C" {
    pub fn Gia_ManDupRemapLiterals(vLits: *mut Vec_Int_t, p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManDupRemapEquiv(pNew: *mut Gia_Man_t, p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManDupOrderDfs(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupOrderDfsChoices(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupOrderDfsReverse(
        p: *mut Gia_Man_t,
        fRevFans: ::std::os::raw::c_int,
        fRevOuts: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupOutputGroup(
        p: *mut Gia_Man_t,
        iOutStart: ::std::os::raw::c_int,
        iOutStop: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupOutputVec(p: *mut Gia_Man_t, vOutPres: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupSelectedOutputs(
        p: *mut Gia_Man_t,
        vOutsLeft: *mut Vec_Int_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupOrderAiger(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupLastPis(p: *mut Gia_Man_t, nLastPis: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupFlip(
        p: *mut Gia_Man_t,
        pInitState: *mut ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupCycled(
        pAig: *mut Gia_Man_t,
        pCex: *mut Abc_Cex_t,
        nFrames: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDup(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupNoBuf(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupMap(p: *mut Gia_Man_t, vMap: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDup2(p1: *mut Gia_Man_t, p2: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupWithAttributes(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupRemovePis(p: *mut Gia_Man_t, nRemPis: ::std::os::raw::c_int)
        -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupZero(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupPerm(p: *mut Gia_Man_t, vPiPerm: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupPermFlop(p: *mut Gia_Man_t, vFfPerm: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupPermFlopGap(p: *mut Gia_Man_t, vFfPerm: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupAppend(p: *mut Gia_Man_t, pTwo: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManDupAppendShare(p: *mut Gia_Man_t, pTwo: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManDupAppendNew(pOne: *mut Gia_Man_t, pTwo: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupAppendCones(
        p: *mut Gia_Man_t,
        ppCones: *mut *mut Gia_Man_t,
        nCones: ::std::os::raw::c_int,
        fOnlyRegs: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupSelf(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupFlopClass(p: *mut Gia_Man_t, iClass: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupMarked(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupTimes(p: *mut Gia_Man_t, nTimes: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfs(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfsOnePo(p: *mut Gia_Man_t, iPo: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfsRehash(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupCofactorVar(
        p: *mut Gia_Man_t,
        iVar: ::std::os::raw::c_int,
        Value: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupCofactorObj(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        Value: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupMux(
        iVar: ::std::os::raw::c_int,
        pCof1: *mut Gia_Man_t,
        pCof0: *mut Gia_Man_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupBlock(p: *mut Gia_Man_t, nBlock: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupExist(p: *mut Gia_Man_t, iVar: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupUniv(p: *mut Gia_Man_t, iVar: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfsSkip(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfsCone(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupConeSupp(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
        vCiIds: *mut Vec_Int_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupConeBack(
        p: *mut Gia_Man_t,
        pNew: *mut Gia_Man_t,
        vCiIds: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManDupConeBackObjs(
        p: *mut Gia_Man_t,
        pNew: *mut Gia_Man_t,
        vObjs: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManDupDfsNode(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfsLitArray(p: *mut Gia_Man_t, vLits: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupTrimmed(
        p: *mut Gia_Man_t,
        fTrimCis: ::std::os::raw::c_int,
        fTrimCos: ::std::os::raw::c_int,
        fDualOut: ::std::os::raw::c_int,
        OutValue: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupOntop(p: *mut Gia_Man_t, p2: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupWithNewPo(p1: *mut Gia_Man_t, p2: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfsCiMap(
        p: *mut Gia_Man_t,
        pCi2Lit: *mut ::std::os::raw::c_int,
        vLits: *mut Vec_Int_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManPermuteInputs(
        p: *mut Gia_Man_t,
        nPpis: ::std::os::raw::c_int,
        nExtra: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDfsClasses(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupTopAnd(p: *mut Gia_Man_t, fVerbose: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManMiter(
        pAig0: *mut Gia_Man_t,
        pAig1: *mut Gia_Man_t,
        nInsDup: ::std::os::raw::c_int,
        fDualOut: ::std::os::raw::c_int,
        fSeq: ::std::os::raw::c_int,
        fImplic: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManMiterInverse(
        pBot: *mut Gia_Man_t,
        pTop: *mut Gia_Man_t,
        fDualOut: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupAndOr(
        p: *mut Gia_Man_t,
        nOuts: ::std::os::raw::c_int,
        fUseOr: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupZeroUndc(
        p: *mut Gia_Man_t,
        pInit: *mut ::std::os::raw::c_char,
        nNewPis: ::std::os::raw::c_int,
        fGiaSimple: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManMiter2(
        p: *mut Gia_Man_t,
        pInit: *mut ::std::os::raw::c_char,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTransformMiter(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTransformMiter2(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTransformToDual(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTransformTwoWord2DualOutput(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManChoiceMiter(vGias: *mut Vec_Ptr_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupWithConstraints(p: *mut Gia_Man_t, vPoTypes: *mut Vec_Int_t)
        -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupCones(
        p: *mut Gia_Man_t,
        pPos: *mut ::std::os::raw::c_int,
        nPos: ::std::os::raw::c_int,
        fTrimPis: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupAndCones(
        p: *mut Gia_Man_t,
        pAnds: *mut ::std::os::raw::c_int,
        nAnds: ::std::os::raw::c_int,
        fTrimPis: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupAndConesLimit(
        p: *mut Gia_Man_t,
        pAnds: *mut ::std::os::raw::c_int,
        nAnds: ::std::os::raw::c_int,
        Level: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupAndConesLimit2(
        p: *mut Gia_Man_t,
        pAnds: *mut ::std::os::raw::c_int,
        nAnds: ::std::os::raw::c_int,
        Level: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupOneHot(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupLevelized(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupFromVecs(
        p: *mut Gia_Man_t,
        vCis: *mut Vec_Int_t,
        vAnds: *mut Vec_Int_t,
        vCos: *mut Vec_Int_t,
        nRegs: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupSliced(p: *mut Gia_Man_t, nSuppMax: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupDemiter(p: *mut Gia_Man_t, fVerbose: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDemiterToDual(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDemiterDual(
        p: *mut Gia_Man_t,
        pp0: *mut *mut Gia_Man_t,
        pp1: *mut *mut Gia_Man_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManDemiterTwoWords(
        p: *mut Gia_Man_t,
        pp0: *mut *mut Gia_Man_t,
        pp1: *mut *mut Gia_Man_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManProdAdderGen(
        nArgA: ::std::os::raw::c_int,
        nArgB: ::std::os::raw::c_int,
        Seed: ::std::os::raw::c_int,
        fSigned: ::std::os::raw::c_int,
        fCla: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManEdgeFromArray(p: *mut Gia_Man_t, vArray: *mut Vec_Int_t);
}
extern "C" {
    pub fn Gia_ManEdgeToArray(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManConvertPackingToEdges(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ObjCheckEdge(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        iNext: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManEvalEdgeDelay(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManEvalEdgeCount(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManComputeEdgeDelay(
        p: *mut Gia_Man_t,
        fUseTwo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManComputeEdgeDelay2(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManUpdateMapping(p: *mut Gia_Man_t, vNodes: *mut Vec_Int_t, vWin: *mut Vec_Wec_t);
}
extern "C" {
    pub fn Gia_ManEvalWindow(
        p: *mut Gia_Man_t,
        vLeaves: *mut Vec_Int_t,
        vNodes: *mut Vec_Int_t,
        vWin: *mut Vec_Wec_t,
        vTemp: *mut Vec_Int_t,
        fUseTwo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManDetectSeqSignals(
        p: *mut Gia_Man_t,
        fSetReset: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManUnrollAndCofactor(
        p: *mut Gia_Man_t,
        nFrames: ::std::os::raw::c_int,
        nFanMax: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManRemoveEnables(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManOrigIdsInit(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManOrigIdsStart(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManOrigIdsRemap(p: *mut Gia_Man_t, pNew: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManOrigIdsReduce(p: *mut Gia_Man_t, vPairs: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManComputeGiaEquivs(
        pGia: *mut Gia_Man_t,
        nConfs: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManEquivFixOutputPairs(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCheckTopoOrder(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManDeriveNexts(p: *mut Gia_Man_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManDeriveReprs(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManEquivCountLits(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManEquivCountLitsAll(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManEquivCountClasses(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManEquivPrintOne(
        p: *mut Gia_Man_t,
        i: ::std::os::raw::c_int,
        Counter: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManEquivPrintClasses(p: *mut Gia_Man_t, fVerbose: ::std::os::raw::c_int, Mem: f32);
}
extern "C" {
    pub fn Gia_ManEquivReduce(
        p: *mut Gia_Man_t,
        fUseAll: ::std::os::raw::c_int,
        fDualOut: ::std::os::raw::c_int,
        fSkipPhase: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManEquivReduceAndRemap(
        p: *mut Gia_Man_t,
        fSeq: ::std::os::raw::c_int,
        fMiterPairs: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManEquivSetColors(
        p: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManSpecReduce(
        p: *mut Gia_Man_t,
        fDualOut: ::std::os::raw::c_int,
        fSynthesis: ::std::os::raw::c_int,
        fReduce: ::std::os::raw::c_int,
        fSkipSome: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManSpecReduceInit(
        p: *mut Gia_Man_t,
        pInit: *mut Abc_Cex_t,
        nFrames: ::std::os::raw::c_int,
        fDualOut: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManSpecReduceInitFrames(
        p: *mut Gia_Man_t,
        pInit: *mut Abc_Cex_t,
        nFramesMax: ::std::os::raw::c_int,
        pnFrames: *mut ::std::os::raw::c_int,
        fDualOut: ::std::os::raw::c_int,
        nMinOutputs: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManEquivTransform(p: *mut Gia_Man_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ManEquivImprove(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManEquivToChoices(
        p: *mut Gia_Man_t,
        nSnapshots: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManCountChoiceNodes(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCountChoices(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManFilterEquivsForSpeculation(
        pGia: *mut Gia_Man_t,
        pName1: *mut ::std::os::raw::c_char,
        pName2: *mut ::std::os::raw::c_char,
        fLatchA: ::std::os::raw::c_int,
        fLatchB: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManFilterEquivsUsingParts(
        pGia: *mut Gia_Man_t,
        pName1: *mut ::std::os::raw::c_char,
        pName2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManFilterEquivsUsingLatches(
        pGia: *mut Gia_Man_t,
        fFlopsOnly: ::std::os::raw::c_int,
        fFlopsWith: ::std::os::raw::c_int,
        fUseRiDrivers: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManQuantSetSuppStart(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManQuantSetSuppZero(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManQuantSetSuppCi(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ManQuantUpdateCiSupp(p: *mut Gia_Man_t, iObj: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ManQuantExist(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
        pFuncCiToKeep: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        pData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ObjRemoveFanout(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t, pFanout: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ManFanoutStart(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManFanoutStop(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManStaticFanoutStart(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManStaticFanoutStop(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManStaticMappingFanoutStart(p: *mut Gia_Man_t, pvIndex: *mut *mut Vec_Int_t);
}
extern "C" {
    pub fn For_ManExperiment(
        pGia: *mut Gia_Man_t,
        nIters: ::std::os::raw::c_int,
        fClustered: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManUnrollDup(p: *mut Gia_Man_t, vLimit: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManUnrollAbs(p: *mut Gia_Man_t, nFrames: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Gia_ManUnrollStart(
        pAig: *mut Gia_Man_t,
        pPars: *mut Gia_ParFra_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Gia_ManUnrollAdd(
        pMan: *mut ::std::os::raw::c_void,
        fMax: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Gia_ManUnrollStop(pMan: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Gia_ManUnrollLastLit(pMan: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManFraSetDefaultParams(p: *mut Gia_ParFra_t);
}
extern "C" {
    pub fn Gia_ManFrames(pAig: *mut Gia_Man_t, pPars: *mut Gia_ParFra_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManFramesInitSpecial(
        pAig: *mut Gia_Man_t,
        nFrames: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManFront(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManFrontTest(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManPerformFx(
        p: *mut Gia_Man_t,
        nNewNodesMax: ::std::os::raw::c_int,
        LitCountMax: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManHashAlloc(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManHashStart(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManHashStop(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManHashXorReal(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashMuxReal(
        p: *mut Gia_Man_t,
        iLitC: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
        iLit0: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashAnd(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashOr(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashXor(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashMux(
        p: *mut Gia_Man_t,
        iCtrl: ::std::os::raw::c_int,
        iData1: ::std::os::raw::c_int,
        iData0: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashMaj(
        p: *mut Gia_Man_t,
        iData0: ::std::os::raw::c_int,
        iData1: ::std::os::raw::c_int,
        iData2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashAndTry(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManRehash(p: *mut Gia_Man_t, fAddStrash: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManHashProfile(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManHashLookupInt(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashLookup(
        p: *mut Gia_Man_t,
        p0: *mut Gia_Obj_t,
        p1: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashAndMulti(p: *mut Gia_Man_t, vLits: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashAndMulti2(p: *mut Gia_Man_t, vLits: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHashDualMiter(p: *mut Gia_Man_t, vOuts: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManPrintMappingStats(p: *mut Gia_Man_t, pDumpFile: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Gia_ManPrintPackingStats(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManPrintLutStats(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManLutFaninCount(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLutSizeMax(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLutNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLutLevel(
        p: *mut Gia_Man_t,
        ppLevels: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLutParams(
        p: *mut Gia_Man_t,
        pnCurLuts: *mut ::std::os::raw::c_int,
        pnCurEdges: *mut ::std::os::raw::c_int,
        pnCurLevels: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManSetRefsMapped(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManSetLutRefs(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManSetIfParsDefault(pIfPars: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Gia_ManMappingVerify(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManTransferMapping(p: *mut Gia_Man_t, pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManTransferPacking(p: *mut Gia_Man_t, pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManTransferTiming(p: *mut Gia_Man_t, pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManPerformMapping(
        p: *mut Gia_Man_t,
        pIfPars: *mut ::std::os::raw::c_void,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManPerformSopBalance(
        p: *mut Gia_Man_t,
        nCutNum: ::std::os::raw::c_int,
        nRelaxRatio: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManPerformDsdBalance(
        p: *mut Gia_Man_t,
        nLutSize: ::std::os::raw::c_int,
        nCutNum: ::std::os::raw::c_int,
        nRelaxRatio: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupHashMapping(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Jf_ManSetDefaultPars(pPars: *mut Jf_Par_t);
}
extern "C" {
    pub fn Jf_ManPerformMapping(pGia: *mut Gia_Man_t, pPars: *mut Jf_Par_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Jf_ManDeriveCnf(p: *mut Gia_Man_t, fCnfObjIds: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManIsoCanonicize(
        p: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManIsoReduce(
        p: *mut Gia_Man_t,
        pvPosEquivs: *mut *mut Vec_Ptr_t,
        pvPiPerms: *mut *mut Vec_Ptr_t,
        fEstimate: ::std::os::raw::c_int,
        fDualOut: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManIsoReduce2(
        p: *mut Gia_Man_t,
        pvPosEquivs: *mut *mut Vec_Ptr_t,
        pvPiPerms: *mut *mut Vec_Ptr_t,
        fEstimate: ::std::os::raw::c_int,
        fBetterQual: ::std::os::raw::c_int,
        fDualOut: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Lf_ManSetDefaultPars(pPars: *mut Jf_Par_t);
}
extern "C" {
    pub fn Lf_ManPerformMapping(pGia: *mut Gia_Man_t, pPars: *mut Jf_Par_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManPerformLfMapping(
        p: *mut Gia_Man_t,
        pPars: *mut Jf_Par_t,
        fNormalized: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTestDistance(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManSolveProblem(pGia: *mut Gia_Man_t, pPars: *mut Emb_Par_t);
}
extern "C" {
    pub fn Gia_ManStart(nObjsMax: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManStop(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManStopP(p: *mut *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManMemory(p: *mut Gia_Man_t) -> f64;
}
extern "C" {
    pub fn Gia_ManPrintStats(p: *mut Gia_Man_t, pPars: *mut Gps_Par_t);
}
extern "C" {
    pub fn Gia_ManPrintStatsShort(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManPrintMiterStatus(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManPrintStatsMiter(p: *mut Gia_Man_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ManSetRegNum(p: *mut Gia_Man_t, nRegs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ManReportImprovement(p: *mut Gia_Man_t, pNew: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManPrintNpnClasses(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManDumpVerilog(
        p: *mut Gia_Man_t,
        pFileName: *mut ::std::os::raw::c_char,
        vObjs: *mut Vec_Int_t,
        fVerBufs: ::std::os::raw::c_int,
        fInter: ::std::os::raw::c_int,
        fInterComb: ::std::os::raw::c_int,
        fAssign: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManDumpVerilogNand(p: *mut Gia_Man_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Gia_MmFixedStart(
        nEntrySize: ::std::os::raw::c_int,
        nEntriesMax: ::std::os::raw::c_int,
    ) -> *mut Gia_MmFixed_t;
}
extern "C" {
    pub fn Gia_MmFixedStop(p: *mut Gia_MmFixed_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_MmFixedEntryFetch(p: *mut Gia_MmFixed_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gia_MmFixedEntryRecycle(p: *mut Gia_MmFixed_t, pEntry: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Gia_MmFixedRestart(p: *mut Gia_MmFixed_t);
}
extern "C" {
    pub fn Gia_MmFixedReadMemUsage(p: *mut Gia_MmFixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_MmFixedReadMaxEntriesUsed(p: *mut Gia_MmFixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_MmFlexStart() -> *mut Gia_MmFlex_t;
}
extern "C" {
    pub fn Gia_MmFlexStop(p: *mut Gia_MmFlex_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_MmFlexEntryFetch(
        p: *mut Gia_MmFlex_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gia_MmFlexRestart(p: *mut Gia_MmFlex_t);
}
extern "C" {
    pub fn Gia_MmFlexReadMemUsage(p: *mut Gia_MmFlex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_MmStepStart(nSteps: ::std::os::raw::c_int) -> *mut Gia_MmStep_t;
}
extern "C" {
    pub fn Gia_MmStepStop(p: *mut Gia_MmStep_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_MmStepEntryFetch(
        p: *mut Gia_MmStep_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gia_MmStepEntryRecycle(
        p: *mut Gia_MmStep_t,
        pEntry: *mut ::std::os::raw::c_char,
        nBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_MmStepReadMemUsage(p: *mut Gia_MmStep_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Mf_ManSetDefaultPars(pPars: *mut Jf_Par_t);
}
extern "C" {
    pub fn Mf_ManPerformMapping(pGia: *mut Gia_Man_t, pPars: *mut Jf_Par_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Mf_ManGenerateCnf(
        pGia: *mut Gia_Man_t,
        nLutSize: ::std::os::raw::c_int,
        fCnfObjIds: ::std::os::raw::c_int,
        fAddOrCla: ::std::os::raw::c_int,
        fMapping: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Gia_ManReadMiniAig(
        pFileName: *mut ::std::os::raw::c_char,
        fGiaSimple: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManWriteMiniAig(pGia: *mut Gia_Man_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Gia_ManReadMiniLut(pFileName: *mut ::std::os::raw::c_char) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManWriteMiniLut(pGia: *mut Gia_Man_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Gia_ManCountFraction(
        p: *mut Gia_Man_t,
        vSimI: *mut Vec_Wrd_t,
        vSupp: *mut Vec_Int_t,
        Thresh: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        pCare: *mut ::std::os::raw::c_int,
    ) -> *mut word;
}
extern "C" {
    pub fn Gia_ManCollectSuppNew(
        p: *mut Gia_Man_t,
        iOut: ::std::os::raw::c_int,
        nOuts: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManCountMuxXor(
        p: *mut Gia_Man_t,
        pnMuxes: *mut ::std::os::raw::c_int,
        pnXors: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManPrintMuxStats(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManDupMuxes(p: *mut Gia_Man_t, Limit: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupNoMuxes(p: *mut Gia_Man_t, fSkipBufs: ::std::os::raw::c_int)
        -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_SatVerifyPattern(
        p: *mut Gia_Man_t,
        pRoot: *mut Gia_Obj_t,
        vCex: *mut Vec_Int_t,
        vVisit: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Gia_ManRetimeForward(
        p: *mut Gia_Man_t,
        nMaxIters: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Sat_ManTest(
        pGia: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        nConfsMax: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManSeqMarkUsed(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCombMarkUsed(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCleanup(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManCleanupOutputs(
        p: *mut Gia_Man_t,
        nOutputs: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManSeqCleanup(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManSeqStructSweep(
        p: *mut Gia_Man_t,
        fConst: ::std::os::raw::c_int,
        fEquiv: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManShow(
        pMan: *mut Gia_Man_t,
        vBold: *mut Vec_Int_t,
        fAdders: ::std::os::raw::c_int,
        fFadds: ::std::os::raw::c_int,
        fPath: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManMapShrink4(
        p: *mut Gia_Man_t,
        fKeepLevel: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManMapShrink6(
        p: *mut Gia_Man_t,
        nFanoutMax: ::std::os::raw::c_int,
        fKeepLevel: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManExtractWindow(
        p: *mut Gia_Man_t,
        LevelMax: ::std::os::raw::c_int,
        nTimeWindow: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManPerformSopBalanceWin(
        p: *mut Gia_Man_t,
        LevelMax: ::std::os::raw::c_int,
        nTimeWindow: ::std::os::raw::c_int,
        nCutNum: ::std::os::raw::c_int,
        nRelaxRatio: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManPerformDsdBalanceWin(
        p: *mut Gia_Man_t,
        LevelMax: ::std::os::raw::c_int,
        nTimeWindow: ::std::os::raw::c_int,
        nLutSize: ::std::os::raw::c_int,
        nCutNum: ::std::os::raw::c_int,
        nRelaxRatio: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_SortFloats(
        pArray: *mut f32,
        pPerm: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManSimSetDefaultParams(p: *mut Gia_ParSim_t);
}
extern "C" {
    pub fn Gia_ManSimSimulate(
        pAig: *mut Gia_Man_t,
        pPars: *mut Gia_ParSim_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SimDataExt(
        p: *mut Gia_ManSim_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Gia_SimDataCiExt(
        p: *mut Gia_ManSim_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Gia_SimDataCoExt(
        p: *mut Gia_ManSim_t,
        i: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Gia_ManSimInfoInit(p: *mut Gia_ManSim_t);
}
extern "C" {
    pub fn Gia_ManSimInfoTransfer(p: *mut Gia_ManSim_t);
}
extern "C" {
    pub fn Gia_ManSimulateRound(p: *mut Gia_ManSim_t);
}
extern "C" {
    pub fn Gia_ManBuiltInSimStart(
        p: *mut Gia_Man_t,
        nWords: ::std::os::raw::c_int,
        nObjs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManBuiltInSimCheckOver(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManBuiltInSimCheckEqual(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManBuiltInSimResimulateCone(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManBuiltInSimResimulate(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManBuiltInSimAddPat(
        p: *mut Gia_Man_t,
        vPat: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManIncrSimStart(
        p: *mut Gia_Man_t,
        nWords: ::std::os::raw::c_int,
        nObjs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManIncrSimSet(p: *mut Gia_Man_t, vObjLits: *mut Vec_Int_t);
}
extern "C" {
    pub fn Gia_ManIncrSimCheckOver(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManIncrSimCheckEqual(
        p: *mut Gia_Man_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManSimPatSim(p: *mut Gia_Man_t) -> *mut Vec_Wrd_t;
}
extern "C" {
    pub fn Gia_ManSimPatSimOut(
        pGia: *mut Gia_Man_t,
        vSimsPi: *mut Vec_Wrd_t,
        fOuts: ::std::os::raw::c_int,
    ) -> *mut Vec_Wrd_t;
}
extern "C" {
    pub fn Gia_ManSim2ArrayOne(vSimsPi: *mut Vec_Wrd_t, vRes: *mut Vec_Int_t);
}
extern "C" {
    pub fn Gia_ManSim2Array(vSims: *mut Vec_Ptr_t) -> *mut Vec_Wec_t;
}
extern "C" {
    pub fn Gia_ManArray2SimOne(vRes: *mut Vec_Int_t) -> *mut Vec_Wrd_t;
}
extern "C" {
    pub fn Gia_ManArray2Sim(vRes: *mut Vec_Wec_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Gia_ManPtrWrdDumpBin(
        pFileName: *mut ::std::os::raw::c_char,
        p: *mut Vec_Ptr_t,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManPtrWrdReadBin(
        pFileName: *mut ::std::os::raw::c_char,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Gia_ManComputeRange(p: *mut Gia_Man_t) -> *mut Vec_Str_t;
}
extern "C" {
    pub fn Gia_ManDelayTraceLut(p: *mut Gia_Man_t) -> f32;
}
extern "C" {
    pub fn Gia_ManDelayTraceLutPrint(p: *mut Gia_Man_t, fVerbose: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn Gia_ManSpeedup(
        p: *mut Gia_Man_t,
        Percentage: ::std::os::raw::c_int,
        Degree: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManComputeOneWinStart(
        p: *mut Gia_Man_t,
        nAnds: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManComputeOneWin(
        p: *mut Gia_Man_t,
        iPivot: ::std::os::raw::c_int,
        pvRoots: *mut *mut Vec_Int_t,
        pvNodes: *mut *mut Vec_Int_t,
        pvLeaves: *mut *mut Vec_Int_t,
        pvAnds: *mut *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManStgPrint(
        pFile: *mut FILE,
        vLines: *mut Vec_Int_t,
        nIns: ::std::os::raw::c_int,
        nOuts: ::std::os::raw::c_int,
        nStates: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManStgRead(
        pFileName: *mut ::std::os::raw::c_char,
        kHot: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_ManMin_t_ {
    _unused: [u8; 0],
}
pub type Gia_ManMin_t = Gia_ManMin_t_;
extern "C" {
    pub fn Gia_ManSuppStart(pGia: *mut Gia_Man_t) -> *mut Gia_ManMin_t;
}
extern "C" {
    pub fn Gia_ManSuppStop(p: *mut Gia_ManMin_t);
}
extern "C" {
    pub fn Gia_ManSupportAnd(
        p: *mut Gia_ManMin_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gia_Man2Min_t_ {
    _unused: [u8; 0],
}
pub type Gia_Man2Min_t = Gia_Man2Min_t_;
extern "C" {
    pub fn Gia_Man2SuppStart(pGia: *mut Gia_Man_t) -> *mut Gia_Man2Min_t;
}
extern "C" {
    pub fn Gia_Man2SuppStop(p: *mut Gia_Man2Min_t);
}
extern "C" {
    pub fn Gia_Man2SupportAnd(
        p: *mut Gia_Man2Min_t,
        iLit0: ::std::os::raw::c_int,
        iLit1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManFraigSweepSimple(
        p: *mut Gia_Man_t,
        pPars: *mut ::std::os::raw::c_void,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManSweepWithBoxes(
        p: *mut Gia_Man_t,
        pParsC: *mut ::std::os::raw::c_void,
        pParsS: *mut ::std::os::raw::c_void,
        fConst: ::std::os::raw::c_int,
        fEquiv: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVerbEquivs: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManCheckIntegrityWithBoxes(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_SweeperStart(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_SweeperStop(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_SweeperIsRunning(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperPrintStats(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_SweeperSetConflictLimit(p: *mut Gia_Man_t, nConfMax: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_SweeperSetRuntimeLimit(p: *mut Gia_Man_t, nSeconds: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_SweeperGetCex(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_SweeperProbeCreate(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperProbeDelete(
        p: *mut Gia_Man_t,
        ProbeId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperProbeUpdate(
        p: *mut Gia_Man_t,
        ProbeId: ::std::os::raw::c_int,
        iLitNew: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperProbeLit(
        p: *mut Gia_Man_t,
        ProbeId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperCollectValidProbeIds(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_SweeperCondPop(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperCondPush(p: *mut Gia_Man_t, ProbeId: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_SweeperCondVector(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_SweeperCondCheckUnsat(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperCheckEquiv(
        p: *mut Gia_Man_t,
        ProbeId1: ::std::os::raw::c_int,
        ProbeId2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperExtractUserLogic(
        p: *mut Gia_Man_t,
        vProbeIds: *mut Vec_Int_t,
        vInNames: *mut Vec_Ptr_t,
        vOutNames: *mut Vec_Ptr_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_SweeperLogicDump(
        p: *mut Gia_Man_t,
        vProbeIds: *mut Vec_Int_t,
        fDumpConds: ::std::os::raw::c_int,
        pFileName: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Gia_SweeperCleanup(
        p: *mut Gia_Man_t,
        pCommLime: *mut ::std::os::raw::c_char,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_SweeperGraft(
        pDst: *mut Gia_Man_t,
        vProbes: *mut Vec_Int_t,
        pSrc: *mut Gia_Man_t,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_SweeperFraig(
        p: *mut Gia_Man_t,
        vProbeIds: *mut Vec_Int_t,
        pCommLime: *mut ::std::os::raw::c_char,
        nWords: ::std::os::raw::c_int,
        nConfs: ::std::os::raw::c_int,
        fVerify: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_SweeperRun(
        p: *mut Gia_Man_t,
        vProbeIds: *mut Vec_Int_t,
        pCommLime: *mut ::std::os::raw::c_char,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManEvaluateSwitching(p: *mut Gia_Man_t) -> f32;
}
extern "C" {
    pub fn Gia_ManComputeSwitching(
        p: *mut Gia_Man_t,
        nFrames: ::std::os::raw::c_int,
        nPref: ::std::os::raw::c_int,
        fProbOne: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn Gia_ManComputeSwitchProbs(
        pGia: *mut Gia_Man_t,
        nFrames: ::std::os::raw::c_int,
        nPref: ::std::os::raw::c_int,
        fProbOne: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManPrintOutputProb(p: *mut Gia_Man_t) -> *mut Vec_Flt_t;
}
extern "C" {
    pub fn Gia_ManBoxNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManRegBoxNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManNonRegBoxNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManBlackBoxNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManBoxCiNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManBoxCoNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManClockDomainNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManIsSeqWithBoxes(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManIsNormalized(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManOrderWithBoxes(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManDupNormalize(
        p: *mut Gia_Man_t,
        fHashMapping: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupUnnormalize(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupUnshuffleInputs(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManLevelWithBoxes(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLutLevelWithBoxes(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManUpdateTimMan(
        p: *mut Gia_Man_t,
        vBoxPres: *mut Vec_Int_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Gia_ManUpdateTimMan2(
        p: *mut Gia_Man_t,
        vBoxesLeft: *mut Vec_Int_t,
        nTermsDiff: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Gia_ManUpdateExtraAig(
        pTime: *mut ::std::os::raw::c_void,
        pAig: *mut Gia_Man_t,
        vBoxPres: *mut Vec_Int_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManUpdateExtraAig2(
        pTime: *mut ::std::os::raw::c_void,
        pAig: *mut Gia_Man_t,
        vBoxesLeft: *mut Vec_Int_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManDupCollapse(
        p: *mut Gia_Man_t,
        pBoxes: *mut Gia_Man_t,
        vBoxPres: *mut Vec_Int_t,
        fSeq: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManVerifyWithBoxes(
        pGia: *mut Gia_Man_t,
        nBTLimit: ::std::os::raw::c_int,
        nTimeLim: ::std::os::raw::c_int,
        fSeq: ::std::os::raw::c_int,
        fDumpFiles: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        pFileSpec: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_LutComputeTruth6(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        vTruths: *mut Vec_Wrd_t,
    ) -> word;
}
extern "C" {
    pub fn Gia_ObjComputeTruthTable6Lut(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        vTemp: *mut Vec_Wrd_t,
    ) -> word;
}
extern "C" {
    pub fn Gia_ObjComputeTruthTable6(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        vSupp: *mut Vec_Int_t,
        vTruths: *mut Vec_Wrd_t,
    ) -> word;
}
extern "C" {
    pub fn Gia_ObjComputeTruth6Cis(
        p: *mut Gia_Man_t,
        iLit: ::std::os::raw::c_int,
        vSupp: *mut Vec_Int_t,
        vTemp: *mut Vec_Wrd_t,
    ) -> word;
}
extern "C" {
    pub fn Gia_ObjCollectInternal(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ObjComputeTruthTable(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t) -> *mut word;
}
extern "C" {
    pub fn Gia_ObjComputeTruthTableStart(p: *mut Gia_Man_t, nVarsMax: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ObjComputeTruthTableStop(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ObjComputeTruthTableCut(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        vLeaves: *mut Vec_Int_t,
    ) -> *mut word;
}
extern "C" {
    pub fn Gia_ManReduceConst(
        pAig: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManRandom(fReset: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Gia_ManRandomW(fReset: ::std::os::raw::c_int) -> word;
}
extern "C" {
    pub fn Gia_ManRandomInfo(
        vInfo: *mut Vec_Ptr_t,
        iInputStart: ::std::os::raw::c_int,
        iWordStart: ::std::os::raw::c_int,
        iWordStop: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_TimeStamp() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gia_FileNameGenericAppend(
        pBase: *mut ::std::os::raw::c_char,
        pSuffix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gia_ManIncrementTravId(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCleanMark01(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManSetMark0(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCleanMark0(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCheckMark0(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManSetMark1(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCleanMark1(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCheckMark1(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCleanValue(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCleanLevels(p: *mut Gia_Man_t, Size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ManCleanTruth(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManFillValue(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ObjSetPhase(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ManSetPhase(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManSetPhasePattern(p: *mut Gia_Man_t, vCiValues: *mut Vec_Int_t);
}
extern "C" {
    pub fn Gia_ManSetPhase1(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCleanPhase(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCheckCoPhase(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLevelNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManLevelRNum(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManGetCiLevels(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManSetLevels(p: *mut Gia_Man_t, vCiLevels: *mut Vec_Int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManReverseLevel(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManRequiredLevel(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManCreateValueRefs(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCreateRefs(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCreateMuxRefs(p: *mut Gia_Man_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCrossCut(
        p: *mut Gia_Man_t,
        fReverse: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCollectPoIds(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ObjIsMuxType(pNode: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ObjRecognizeExor(
        pObj: *mut Gia_Obj_t,
        ppFan0: *mut *mut Gia_Obj_t,
        ppFan1: *mut *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ObjRecognizeMux(
        pNode: *mut Gia_Obj_t,
        ppNodeT: *mut *mut Gia_Obj_t,
        ppNodeE: *mut *mut Gia_Obj_t,
    ) -> *mut Gia_Obj_t;
}
extern "C" {
    pub fn Gia_ObjRecognizeMuxLits(
        p: *mut Gia_Man_t,
        pNode: *mut Gia_Obj_t,
        iLitT: *mut ::std::os::raw::c_int,
        iLitE: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_NodeMffcSize(p: *mut Gia_Man_t, pNode: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_NodeMffcSizeMark(p: *mut Gia_Man_t, pNode: *mut Gia_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_NodeMffcSizeSupp(
        p: *mut Gia_Man_t,
        pNode: *mut Gia_Obj_t,
        vSupp: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_NodeMffcMapping(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManHasDangling(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManMarkDangling(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManGetDangling(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ObjPrint(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ManPrint(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManPrintCo(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ManPrintCone(
        p: *mut Gia_Man_t,
        pObj: *mut Gia_Obj_t,
        pLeaves: *mut ::std::os::raw::c_int,
        nLeaves: ::std::os::raw::c_int,
        vNodes: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Gia_ManPrintConeMulti(
        p: *mut Gia_Man_t,
        vObjs: *mut Vec_Int_t,
        vLeaves: *mut Vec_Int_t,
        vNodes: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Gia_ManPrintCone2(p: *mut Gia_Man_t, pObj: *mut Gia_Obj_t);
}
extern "C" {
    pub fn Gia_ManInvertConstraints(pAig: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManInvertPos(pAig: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCompare(p1: *mut Gia_Man_t, p2: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManMarkFanoutDrivers(p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManSwapPos(p: *mut Gia_Man_t, i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Gia_ManSaveValue(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManLoadValue(p: *mut Gia_Man_t, vValues: *mut Vec_Int_t);
}
extern "C" {
    pub fn Gia_ManFirstFanouts(p: *mut Gia_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManCheckSuppOverlap(
        p: *mut Gia_Man_t,
        iNode1: ::std::os::raw::c_int,
        iNode2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCountPisWithFanout(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManCountPosWithNonZeroDrivers(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManUpdateCopy(vCopy: *mut Vec_Int_t, p: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManComputeDistance(
        p: *mut Gia_Man_t,
        iObj: ::std::os::raw::c_int,
        vObjs: *mut Vec_Int_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Gia_ManTtopt(
        p: *mut Gia_Man_t,
        nIns: ::std::os::raw::c_int,
        nOuts: ::std::os::raw::c_int,
        nRounds: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTtoptCare(
        p: *mut Gia_Man_t,
        nIns: ::std::os::raw::c_int,
        nOuts: ::std::os::raw::c_int,
        nRounds: ::std::os::raw::c_int,
        pFileName: *mut ::std::os::raw::c_char,
        nRarity: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTransductionBdd(
        pGia: *mut Gia_Man_t,
        nType: ::std::os::raw::c_int,
        fMspf: ::std::os::raw::c_int,
        nRandom: ::std::os::raw::c_int,
        nSortType: ::std::os::raw::c_int,
        nPiShuffle: ::std::os::raw::c_int,
        nParameter: ::std::os::raw::c_int,
        fLevel: ::std::os::raw::c_int,
        pExdc: *mut Gia_Man_t,
        fNewLine: ::std::os::raw::c_int,
        nVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManTransductionTt(
        pGia: *mut Gia_Man_t,
        nType: ::std::os::raw::c_int,
        fMspf: ::std::os::raw::c_int,
        nRandom: ::std::os::raw::c_int,
        nSortType: ::std::os::raw::c_int,
        nPiShuffle: ::std::os::raw::c_int,
        nParameter: ::std::os::raw::c_int,
        fLevel: ::std::os::raw::c_int,
        pExdc: *mut Gia_Man_t,
        fNewLine: ::std::os::raw::c_int,
        nVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tas_Man_t_ {
    _unused: [u8; 0],
}
pub type Tas_Man_t = Tas_Man_t_;
extern "C" {
    pub fn Tas_ManAlloc(pAig: *mut Gia_Man_t, nBTLimit: ::std::os::raw::c_int) -> *mut Tas_Man_t;
}
extern "C" {
    pub fn Tas_ManStop(p: *mut Tas_Man_t);
}
extern "C" {
    pub fn Tas_ReadModel(p: *mut Tas_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Tas_ManSatPrintStats(p: *mut Tas_Man_t);
}
extern "C" {
    pub fn Tas_ManSolve(
        p: *mut Tas_Man_t,
        pObj: *mut Gia_Obj_t,
        pObj2: *mut Gia_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tas_ManSolveArray(p: *mut Tas_Man_t, vObjs: *mut Vec_Ptr_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Bnd_Man_t_ {
    _unused: [u8; 0],
}
pub type Bnd_Man_t = Bnd_Man_t_;
extern "C" {
    pub fn Bnd_ManStart(
        pSpec: *mut Gia_Man_t,
        pImpl: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Bnd_Man_t;
}
extern "C" {
    pub fn Bnd_ManStop();
}
extern "C" {
    pub fn Bnd_ManGetNInternal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Bnd_ManGetNExtra() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Bnd_ManMap(
        iLit: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
        spec: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Bnd_ManMerge(
        id1: ::std::os::raw::c_int,
        id2: ::std::os::raw::c_int,
        phaseDiff: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Bnd_ManFinalizeMappings();
}
extern "C" {
    pub fn Bnd_ManPrintMappings();
}
extern "C" {
    pub fn Bnd_ManStackGias(pSpec: *mut Gia_Man_t, pImpl: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Bnd_ManCheckCoMerged(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Bnd_ManCheckBound(
        p: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Bnd_ManFindBound(p: *mut Gia_Man_t, pImpl: *mut Gia_Man_t);
}
extern "C" {
    pub fn Bnd_ManGenSpecOut(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Bnd_ManGenImplOut(p: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Bnd_ManGenPatched(
        pOut: *mut Gia_Man_t,
        pSpec: *mut Gia_Man_t,
        pPatch: *mut Gia_Man_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Bnd_ManGenPatched1(pOut: *mut Gia_Man_t, pSpec: *mut Gia_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Bnd_ManGenPatched2(
        pImpl: *mut Gia_Man_t,
        pPatch: *mut Gia_Man_t,
        fSkiptStrash: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Bnd_ManSetEqOut(eq: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Bnd_ManSetEqRes(eq: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Bnd_ManPrintStats();
}
extern "C" {
    pub fn Bnd_ManCutBoundary(
        p: *mut Gia_Man_t,
        vEI: *mut Vec_Int_t,
        vEO: *mut Vec_Int_t,
        vEI_phase: *mut Vec_Bit_t,
        vEO_phase: *mut Vec_Bit_t,
    ) -> *mut Gia_Man_t;
}
pub type Aig_Man_t = Aig_Man_t_;
pub type Aig_Obj_t = Aig_Obj_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Aig_MmFixed_t_ {
    _unused: [u8; 0],
}
pub type Aig_MmFixed_t = Aig_MmFixed_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Aig_MmFlex_t_ {
    _unused: [u8; 0],
}
pub type Aig_MmFlex_t = Aig_MmFlex_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Aig_MmStep_t_ {
    _unused: [u8; 0],
}
pub type Aig_MmStep_t = Aig_MmStep_t_;
pub const Aig_Type_t_AIG_OBJ_NONE: Aig_Type_t = 0;
pub const Aig_Type_t_AIG_OBJ_CONST1: Aig_Type_t = 1;
pub const Aig_Type_t_AIG_OBJ_CI: Aig_Type_t = 2;
pub const Aig_Type_t_AIG_OBJ_CO: Aig_Type_t = 3;
pub const Aig_Type_t_AIG_OBJ_BUF: Aig_Type_t = 4;
pub const Aig_Type_t_AIG_OBJ_AND: Aig_Type_t = 5;
pub const Aig_Type_t_AIG_OBJ_EXOR: Aig_Type_t = 6;
pub const Aig_Type_t_AIG_OBJ_VOID: Aig_Type_t = 7;
pub type Aig_Type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Aig_Obj_t_ {
    pub __bindgen_anon_1: Aig_Obj_t___bindgen_ty_1,
    pub pFanin0: *mut Aig_Obj_t,
    pub pFanin1: *mut Aig_Obj_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub TravId: ::std::os::raw::c_int,
    pub Id: ::std::os::raw::c_int,
    pub __bindgen_anon_2: Aig_Obj_t___bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Aig_Obj_t___bindgen_ty_1 {
    pub pNext: *mut Aig_Obj_t,
    pub CioId: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Aig_Obj_t___bindgen_ty_1"]
        [::std::mem::size_of::<Aig_Obj_t___bindgen_ty_1>() - 8usize];
    ["Alignment of Aig_Obj_t___bindgen_ty_1"]
        [::std::mem::align_of::<Aig_Obj_t___bindgen_ty_1>() - 8usize];
    ["Offset of field: Aig_Obj_t___bindgen_ty_1::pNext"]
        [::std::mem::offset_of!(Aig_Obj_t___bindgen_ty_1, pNext) - 0usize];
    ["Offset of field: Aig_Obj_t___bindgen_ty_1::CioId"]
        [::std::mem::offset_of!(Aig_Obj_t___bindgen_ty_1, CioId) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Aig_Obj_t___bindgen_ty_2 {
    pub pData: *mut ::std::os::raw::c_void,
    pub iData: ::std::os::raw::c_int,
    pub dData: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Aig_Obj_t___bindgen_ty_2"]
        [::std::mem::size_of::<Aig_Obj_t___bindgen_ty_2>() - 8usize];
    ["Alignment of Aig_Obj_t___bindgen_ty_2"]
        [::std::mem::align_of::<Aig_Obj_t___bindgen_ty_2>() - 8usize];
    ["Offset of field: Aig_Obj_t___bindgen_ty_2::pData"]
        [::std::mem::offset_of!(Aig_Obj_t___bindgen_ty_2, pData) - 0usize];
    ["Offset of field: Aig_Obj_t___bindgen_ty_2::iData"]
        [::std::mem::offset_of!(Aig_Obj_t___bindgen_ty_2, iData) - 0usize];
    ["Offset of field: Aig_Obj_t___bindgen_ty_2::dData"]
        [::std::mem::offset_of!(Aig_Obj_t___bindgen_ty_2, dData) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Aig_Obj_t_"][::std::mem::size_of::<Aig_Obj_t_>() - 48usize];
    ["Alignment of Aig_Obj_t_"][::std::mem::align_of::<Aig_Obj_t_>() - 8usize];
    ["Offset of field: Aig_Obj_t_::pFanin0"][::std::mem::offset_of!(Aig_Obj_t_, pFanin0) - 8usize];
    ["Offset of field: Aig_Obj_t_::pFanin1"][::std::mem::offset_of!(Aig_Obj_t_, pFanin1) - 16usize];
    ["Offset of field: Aig_Obj_t_::TravId"][::std::mem::offset_of!(Aig_Obj_t_, TravId) - 32usize];
    ["Offset of field: Aig_Obj_t_::Id"][::std::mem::offset_of!(Aig_Obj_t_, Id) - 36usize];
};
impl Aig_Obj_t_ {
    #[inline]
    pub fn Type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_Type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fPhase(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fPhase(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMarkA(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMarkA(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMarkB(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMarkB(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nRefs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_nRefs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn Level(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_Level(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn nCuts(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_nCuts(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Type: ::std::os::raw::c_uint,
        fPhase: ::std::os::raw::c_uint,
        fMarkA: ::std::os::raw::c_uint,
        fMarkB: ::std::os::raw::c_uint,
        nRefs: ::std::os::raw::c_uint,
        Level: ::std::os::raw::c_uint,
        nCuts: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let Type: u32 = unsafe { ::std::mem::transmute(Type) };
            Type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fPhase: u32 = unsafe { ::std::mem::transmute(fPhase) };
            fPhase as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let fMarkA: u32 = unsafe { ::std::mem::transmute(fMarkA) };
            fMarkA as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let fMarkB: u32 = unsafe { ::std::mem::transmute(fMarkB) };
            fMarkB as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let nRefs: u32 = unsafe { ::std::mem::transmute(nRefs) };
            nRefs as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let Level: u32 = unsafe { ::std::mem::transmute(Level) };
            Level as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let nCuts: u32 = unsafe { ::std::mem::transmute(nCuts) };
            nCuts as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Aig_Man_t_ {
    pub pName: *mut ::std::os::raw::c_char,
    pub pSpec: *mut ::std::os::raw::c_char,
    pub vCis: *mut Vec_Ptr_t,
    pub vCos: *mut Vec_Ptr_t,
    pub vObjs: *mut Vec_Ptr_t,
    pub vBufs: *mut Vec_Ptr_t,
    pub pConst1: *mut Aig_Obj_t,
    pub Ghost: Aig_Obj_t,
    pub nRegs: ::std::os::raw::c_int,
    pub nTruePis: ::std::os::raw::c_int,
    pub nTruePos: ::std::os::raw::c_int,
    pub nAsserts: ::std::os::raw::c_int,
    pub nConstrs: ::std::os::raw::c_int,
    pub nBarBufs: ::std::os::raw::c_int,
    pub nObjs: [::std::os::raw::c_int; 7usize],
    pub nDeleted: ::std::os::raw::c_int,
    pub pTable: *mut *mut Aig_Obj_t,
    pub nTableSize: ::std::os::raw::c_int,
    pub pFanData: *mut ::std::os::raw::c_int,
    pub nFansAlloc: ::std::os::raw::c_int,
    pub vLevels: *mut Vec_Vec_t,
    pub nBufReplaces: ::std::os::raw::c_int,
    pub nBufFixes: ::std::os::raw::c_int,
    pub nBufMax: ::std::os::raw::c_int,
    pub pOrderData: *mut ::std::os::raw::c_uint,
    pub nOrderAlloc: ::std::os::raw::c_int,
    pub iPrev: ::std::os::raw::c_int,
    pub iNext: ::std::os::raw::c_int,
    pub nAndTotal: ::std::os::raw::c_int,
    pub nAndPrev: ::std::os::raw::c_int,
    pub pEquivs: *mut *mut Aig_Obj_t,
    pub pReprs: *mut *mut Aig_Obj_t,
    pub nReprsAlloc: ::std::os::raw::c_int,
    pub pMemObjs: *mut Aig_MmFixed_t,
    pub vLevelR: *mut Vec_Int_t,
    pub nLevelMax: ::std::os::raw::c_int,
    pub pData: *mut ::std::os::raw::c_void,
    pub pData2: *mut ::std::os::raw::c_void,
    pub nTravIds: ::std::os::raw::c_int,
    pub fCatchExor: ::std::os::raw::c_int,
    pub fAddStrash: ::std::os::raw::c_int,
    pub pObjCopies: *mut *mut Aig_Obj_t,
    pub pImpFunc: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void),
    >,
    pub pImpData: *mut ::std::os::raw::c_void,
    pub pManTime: *mut ::std::os::raw::c_void,
    pub pManCuts: *mut ::std::os::raw::c_void,
    pub pFastSim: *mut ::std::os::raw::c_int,
    pub pTerSimData: *mut ::std::os::raw::c_uint,
    pub vMapped: *mut Vec_Ptr_t,
    pub vFlopNums: *mut Vec_Int_t,
    pub vFlopReprs: *mut Vec_Int_t,
    pub pSeqModel: *mut Abc_Cex_t,
    pub vSeqModelVec: *mut Vec_Ptr_t,
    pub pManExdc: *mut Aig_Man_t,
    pub vOnehots: *mut Vec_Ptr_t,
    pub fCreatePios: ::std::os::raw::c_int,
    pub vEquPairs: *mut Vec_Int_t,
    pub vClockDoms: *mut Vec_Vec_t,
    pub vProbs: *mut Vec_Int_t,
    pub vCiNumsOrig: *mut Vec_Int_t,
    pub nComplEdges: ::std::os::raw::c_int,
    pub Time2Quit: abctime,
    pub time1: abctime,
    pub time2: abctime,
    pub unfold2_type_I: *mut Vec_Ptr_t,
    pub unfold2_type_II: *mut Vec_Ptr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Aig_Man_t_"][::std::mem::size_of::<Aig_Man_t_>() - 528usize];
    ["Alignment of Aig_Man_t_"][::std::mem::align_of::<Aig_Man_t_>() - 8usize];
    ["Offset of field: Aig_Man_t_::pName"][::std::mem::offset_of!(Aig_Man_t_, pName) - 0usize];
    ["Offset of field: Aig_Man_t_::pSpec"][::std::mem::offset_of!(Aig_Man_t_, pSpec) - 8usize];
    ["Offset of field: Aig_Man_t_::vCis"][::std::mem::offset_of!(Aig_Man_t_, vCis) - 16usize];
    ["Offset of field: Aig_Man_t_::vCos"][::std::mem::offset_of!(Aig_Man_t_, vCos) - 24usize];
    ["Offset of field: Aig_Man_t_::vObjs"][::std::mem::offset_of!(Aig_Man_t_, vObjs) - 32usize];
    ["Offset of field: Aig_Man_t_::vBufs"][::std::mem::offset_of!(Aig_Man_t_, vBufs) - 40usize];
    ["Offset of field: Aig_Man_t_::pConst1"][::std::mem::offset_of!(Aig_Man_t_, pConst1) - 48usize];
    ["Offset of field: Aig_Man_t_::Ghost"][::std::mem::offset_of!(Aig_Man_t_, Ghost) - 56usize];
    ["Offset of field: Aig_Man_t_::nRegs"][::std::mem::offset_of!(Aig_Man_t_, nRegs) - 104usize];
    ["Offset of field: Aig_Man_t_::nTruePis"]
        [::std::mem::offset_of!(Aig_Man_t_, nTruePis) - 108usize];
    ["Offset of field: Aig_Man_t_::nTruePos"]
        [::std::mem::offset_of!(Aig_Man_t_, nTruePos) - 112usize];
    ["Offset of field: Aig_Man_t_::nAsserts"]
        [::std::mem::offset_of!(Aig_Man_t_, nAsserts) - 116usize];
    ["Offset of field: Aig_Man_t_::nConstrs"]
        [::std::mem::offset_of!(Aig_Man_t_, nConstrs) - 120usize];
    ["Offset of field: Aig_Man_t_::nBarBufs"]
        [::std::mem::offset_of!(Aig_Man_t_, nBarBufs) - 124usize];
    ["Offset of field: Aig_Man_t_::nObjs"][::std::mem::offset_of!(Aig_Man_t_, nObjs) - 128usize];
    ["Offset of field: Aig_Man_t_::nDeleted"]
        [::std::mem::offset_of!(Aig_Man_t_, nDeleted) - 156usize];
    ["Offset of field: Aig_Man_t_::pTable"][::std::mem::offset_of!(Aig_Man_t_, pTable) - 160usize];
    ["Offset of field: Aig_Man_t_::nTableSize"]
        [::std::mem::offset_of!(Aig_Man_t_, nTableSize) - 168usize];
    ["Offset of field: Aig_Man_t_::pFanData"]
        [::std::mem::offset_of!(Aig_Man_t_, pFanData) - 176usize];
    ["Offset of field: Aig_Man_t_::nFansAlloc"]
        [::std::mem::offset_of!(Aig_Man_t_, nFansAlloc) - 184usize];
    ["Offset of field: Aig_Man_t_::vLevels"]
        [::std::mem::offset_of!(Aig_Man_t_, vLevels) - 192usize];
    ["Offset of field: Aig_Man_t_::nBufReplaces"]
        [::std::mem::offset_of!(Aig_Man_t_, nBufReplaces) - 200usize];
    ["Offset of field: Aig_Man_t_::nBufFixes"]
        [::std::mem::offset_of!(Aig_Man_t_, nBufFixes) - 204usize];
    ["Offset of field: Aig_Man_t_::nBufMax"]
        [::std::mem::offset_of!(Aig_Man_t_, nBufMax) - 208usize];
    ["Offset of field: Aig_Man_t_::pOrderData"]
        [::std::mem::offset_of!(Aig_Man_t_, pOrderData) - 216usize];
    ["Offset of field: Aig_Man_t_::nOrderAlloc"]
        [::std::mem::offset_of!(Aig_Man_t_, nOrderAlloc) - 224usize];
    ["Offset of field: Aig_Man_t_::iPrev"][::std::mem::offset_of!(Aig_Man_t_, iPrev) - 228usize];
    ["Offset of field: Aig_Man_t_::iNext"][::std::mem::offset_of!(Aig_Man_t_, iNext) - 232usize];
    ["Offset of field: Aig_Man_t_::nAndTotal"]
        [::std::mem::offset_of!(Aig_Man_t_, nAndTotal) - 236usize];
    ["Offset of field: Aig_Man_t_::nAndPrev"]
        [::std::mem::offset_of!(Aig_Man_t_, nAndPrev) - 240usize];
    ["Offset of field: Aig_Man_t_::pEquivs"]
        [::std::mem::offset_of!(Aig_Man_t_, pEquivs) - 248usize];
    ["Offset of field: Aig_Man_t_::pReprs"][::std::mem::offset_of!(Aig_Man_t_, pReprs) - 256usize];
    ["Offset of field: Aig_Man_t_::nReprsAlloc"]
        [::std::mem::offset_of!(Aig_Man_t_, nReprsAlloc) - 264usize];
    ["Offset of field: Aig_Man_t_::pMemObjs"]
        [::std::mem::offset_of!(Aig_Man_t_, pMemObjs) - 272usize];
    ["Offset of field: Aig_Man_t_::vLevelR"]
        [::std::mem::offset_of!(Aig_Man_t_, vLevelR) - 280usize];
    ["Offset of field: Aig_Man_t_::nLevelMax"]
        [::std::mem::offset_of!(Aig_Man_t_, nLevelMax) - 288usize];
    ["Offset of field: Aig_Man_t_::pData"][::std::mem::offset_of!(Aig_Man_t_, pData) - 296usize];
    ["Offset of field: Aig_Man_t_::pData2"][::std::mem::offset_of!(Aig_Man_t_, pData2) - 304usize];
    ["Offset of field: Aig_Man_t_::nTravIds"]
        [::std::mem::offset_of!(Aig_Man_t_, nTravIds) - 312usize];
    ["Offset of field: Aig_Man_t_::fCatchExor"]
        [::std::mem::offset_of!(Aig_Man_t_, fCatchExor) - 316usize];
    ["Offset of field: Aig_Man_t_::fAddStrash"]
        [::std::mem::offset_of!(Aig_Man_t_, fAddStrash) - 320usize];
    ["Offset of field: Aig_Man_t_::pObjCopies"]
        [::std::mem::offset_of!(Aig_Man_t_, pObjCopies) - 328usize];
    ["Offset of field: Aig_Man_t_::pImpFunc"]
        [::std::mem::offset_of!(Aig_Man_t_, pImpFunc) - 336usize];
    ["Offset of field: Aig_Man_t_::pImpData"]
        [::std::mem::offset_of!(Aig_Man_t_, pImpData) - 344usize];
    ["Offset of field: Aig_Man_t_::pManTime"]
        [::std::mem::offset_of!(Aig_Man_t_, pManTime) - 352usize];
    ["Offset of field: Aig_Man_t_::pManCuts"]
        [::std::mem::offset_of!(Aig_Man_t_, pManCuts) - 360usize];
    ["Offset of field: Aig_Man_t_::pFastSim"]
        [::std::mem::offset_of!(Aig_Man_t_, pFastSim) - 368usize];
    ["Offset of field: Aig_Man_t_::pTerSimData"]
        [::std::mem::offset_of!(Aig_Man_t_, pTerSimData) - 376usize];
    ["Offset of field: Aig_Man_t_::vMapped"]
        [::std::mem::offset_of!(Aig_Man_t_, vMapped) - 384usize];
    ["Offset of field: Aig_Man_t_::vFlopNums"]
        [::std::mem::offset_of!(Aig_Man_t_, vFlopNums) - 392usize];
    ["Offset of field: Aig_Man_t_::vFlopReprs"]
        [::std::mem::offset_of!(Aig_Man_t_, vFlopReprs) - 400usize];
    ["Offset of field: Aig_Man_t_::pSeqModel"]
        [::std::mem::offset_of!(Aig_Man_t_, pSeqModel) - 408usize];
    ["Offset of field: Aig_Man_t_::vSeqModelVec"]
        [::std::mem::offset_of!(Aig_Man_t_, vSeqModelVec) - 416usize];
    ["Offset of field: Aig_Man_t_::pManExdc"]
        [::std::mem::offset_of!(Aig_Man_t_, pManExdc) - 424usize];
    ["Offset of field: Aig_Man_t_::vOnehots"]
        [::std::mem::offset_of!(Aig_Man_t_, vOnehots) - 432usize];
    ["Offset of field: Aig_Man_t_::fCreatePios"]
        [::std::mem::offset_of!(Aig_Man_t_, fCreatePios) - 440usize];
    ["Offset of field: Aig_Man_t_::vEquPairs"]
        [::std::mem::offset_of!(Aig_Man_t_, vEquPairs) - 448usize];
    ["Offset of field: Aig_Man_t_::vClockDoms"]
        [::std::mem::offset_of!(Aig_Man_t_, vClockDoms) - 456usize];
    ["Offset of field: Aig_Man_t_::vProbs"][::std::mem::offset_of!(Aig_Man_t_, vProbs) - 464usize];
    ["Offset of field: Aig_Man_t_::vCiNumsOrig"]
        [::std::mem::offset_of!(Aig_Man_t_, vCiNumsOrig) - 472usize];
    ["Offset of field: Aig_Man_t_::nComplEdges"]
        [::std::mem::offset_of!(Aig_Man_t_, nComplEdges) - 480usize];
    ["Offset of field: Aig_Man_t_::Time2Quit"]
        [::std::mem::offset_of!(Aig_Man_t_, Time2Quit) - 488usize];
    ["Offset of field: Aig_Man_t_::time1"][::std::mem::offset_of!(Aig_Man_t_, time1) - 496usize];
    ["Offset of field: Aig_Man_t_::time2"][::std::mem::offset_of!(Aig_Man_t_, time2) - 504usize];
    ["Offset of field: Aig_Man_t_::unfold2_type_I"]
        [::std::mem::offset_of!(Aig_Man_t_, unfold2_type_I) - 512usize];
    ["Offset of field: Aig_Man_t_::unfold2_type_II"]
        [::std::mem::offset_of!(Aig_Man_t_, unfold2_type_II) - 520usize];
};
pub type Aig_ManCut_t = Aig_ManCut_t_;
pub type Aig_Cut_t = Aig_Cut_t_;
#[repr(C)]
#[derive(Debug)]
pub struct Aig_Cut_t_ {
    pub pNext: *mut Aig_Cut_t,
    pub Cost: ::std::os::raw::c_int,
    pub uSign: ::std::os::raw::c_uint,
    pub iNode: ::std::os::raw::c_int,
    pub nCutSize: ::std::os::raw::c_short,
    pub nLeafMax: ::std::os::raw::c_char,
    pub nFanins: ::std::os::raw::c_char,
    pub pFanins: __IncompleteArrayField<::std::os::raw::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Aig_Cut_t_"][::std::mem::size_of::<Aig_Cut_t_>() - 24usize];
    ["Alignment of Aig_Cut_t_"][::std::mem::align_of::<Aig_Cut_t_>() - 8usize];
    ["Offset of field: Aig_Cut_t_::pNext"][::std::mem::offset_of!(Aig_Cut_t_, pNext) - 0usize];
    ["Offset of field: Aig_Cut_t_::Cost"][::std::mem::offset_of!(Aig_Cut_t_, Cost) - 8usize];
    ["Offset of field: Aig_Cut_t_::uSign"][::std::mem::offset_of!(Aig_Cut_t_, uSign) - 12usize];
    ["Offset of field: Aig_Cut_t_::iNode"][::std::mem::offset_of!(Aig_Cut_t_, iNode) - 16usize];
    ["Offset of field: Aig_Cut_t_::nCutSize"]
        [::std::mem::offset_of!(Aig_Cut_t_, nCutSize) - 20usize];
    ["Offset of field: Aig_Cut_t_::nLeafMax"]
        [::std::mem::offset_of!(Aig_Cut_t_, nLeafMax) - 22usize];
    ["Offset of field: Aig_Cut_t_::nFanins"][::std::mem::offset_of!(Aig_Cut_t_, nFanins) - 23usize];
    ["Offset of field: Aig_Cut_t_::pFanins"][::std::mem::offset_of!(Aig_Cut_t_, pFanins) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Aig_ManCut_t_ {
    pub pAig: *mut Aig_Man_t,
    pub pCuts: *mut *mut Aig_Cut_t,
    pub nCutsMax: ::std::os::raw::c_int,
    pub nLeafMax: ::std::os::raw::c_int,
    pub fTruth: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub nCutSize: ::std::os::raw::c_int,
    pub nTruthWords: ::std::os::raw::c_int,
    pub pMemCuts: *mut Aig_MmFixed_t,
    pub puTemp: [*mut ::std::os::raw::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Aig_ManCut_t_"][::std::mem::size_of::<Aig_ManCut_t_>() - 80usize];
    ["Alignment of Aig_ManCut_t_"][::std::mem::align_of::<Aig_ManCut_t_>() - 8usize];
    ["Offset of field: Aig_ManCut_t_::pAig"][::std::mem::offset_of!(Aig_ManCut_t_, pAig) - 0usize];
    ["Offset of field: Aig_ManCut_t_::pCuts"]
        [::std::mem::offset_of!(Aig_ManCut_t_, pCuts) - 8usize];
    ["Offset of field: Aig_ManCut_t_::nCutsMax"]
        [::std::mem::offset_of!(Aig_ManCut_t_, nCutsMax) - 16usize];
    ["Offset of field: Aig_ManCut_t_::nLeafMax"]
        [::std::mem::offset_of!(Aig_ManCut_t_, nLeafMax) - 20usize];
    ["Offset of field: Aig_ManCut_t_::fTruth"]
        [::std::mem::offset_of!(Aig_ManCut_t_, fTruth) - 24usize];
    ["Offset of field: Aig_ManCut_t_::fVerbose"]
        [::std::mem::offset_of!(Aig_ManCut_t_, fVerbose) - 28usize];
    ["Offset of field: Aig_ManCut_t_::nCutSize"]
        [::std::mem::offset_of!(Aig_ManCut_t_, nCutSize) - 32usize];
    ["Offset of field: Aig_ManCut_t_::nTruthWords"]
        [::std::mem::offset_of!(Aig_ManCut_t_, nTruthWords) - 36usize];
    ["Offset of field: Aig_ManCut_t_::pMemCuts"]
        [::std::mem::offset_of!(Aig_ManCut_t_, pMemCuts) - 40usize];
    ["Offset of field: Aig_ManCut_t_::puTemp"]
        [::std::mem::offset_of!(Aig_ManCut_t_, puTemp) - 48usize];
};
extern "C" {
    #[link_name = "Aig_ObjCuts_imctk_abc_sys"]
    pub fn Aig_ObjCuts(p: *mut Aig_ManCut_t, pObj: *mut Aig_Obj_t) -> *mut Aig_Cut_t;
}
extern "C" {
    #[link_name = "Aig_ObjSetCuts_imctk_abc_sys"]
    pub fn Aig_ObjSetCuts(p: *mut Aig_ManCut_t, pObj: *mut Aig_Obj_t, pCuts: *mut Aig_Cut_t);
}
extern "C" {
    #[link_name = "Aig_CutLeaveNum_imctk_abc_sys"]
    pub fn Aig_CutLeaveNum(pCut: *mut Aig_Cut_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_CutLeaves_imctk_abc_sys"]
    pub fn Aig_CutLeaves(pCut: *mut Aig_Cut_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_CutTruth_imctk_abc_sys"]
    pub fn Aig_CutTruth(pCut: *mut Aig_Cut_t) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Aig_CutNext_imctk_abc_sys"]
    pub fn Aig_CutNext(pCut: *mut Aig_Cut_t) -> *mut Aig_Cut_t;
}
extern "C" {
    #[link_name = "Aig_ObjCutSign_imctk_abc_sys"]
    pub fn Aig_ObjCutSign(ObjId: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Aig_WordCountOnes_imctk_abc_sys"]
    pub fn Aig_WordCountOnes(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_WordFindFirstBit_imctk_abc_sys"]
    pub fn Aig_WordFindFirstBit(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_Regular_imctk_abc_sys"]
    pub fn Aig_Regular(p: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_Not_imctk_abc_sys"]
    pub fn Aig_Not(p: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_NotCond_imctk_abc_sys"]
    pub fn Aig_NotCond(p: *mut Aig_Obj_t, c: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_IsComplement_imctk_abc_sys"]
    pub fn Aig_IsComplement(p: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManCiNum_imctk_abc_sys"]
    pub fn Aig_ManCiNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManCoNum_imctk_abc_sys"]
    pub fn Aig_ManCoNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManBufNum_imctk_abc_sys"]
    pub fn Aig_ManBufNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManAndNum_imctk_abc_sys"]
    pub fn Aig_ManAndNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManExorNum_imctk_abc_sys"]
    pub fn Aig_ManExorNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManNodeNum_imctk_abc_sys"]
    pub fn Aig_ManNodeNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManGetCost_imctk_abc_sys"]
    pub fn Aig_ManGetCost(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManObjNum_imctk_abc_sys"]
    pub fn Aig_ManObjNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManObjNumMax_imctk_abc_sys"]
    pub fn Aig_ManObjNumMax(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManRegNum_imctk_abc_sys"]
    pub fn Aig_ManRegNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManConstrNum_imctk_abc_sys"]
    pub fn Aig_ManConstrNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ManConst0_imctk_abc_sys"]
    pub fn Aig_ManConst0(p: *mut Aig_Man_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManConst1_imctk_abc_sys"]
    pub fn Aig_ManConst1(p: *mut Aig_Man_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManGhost_imctk_abc_sys"]
    pub fn Aig_ManGhost(p: *mut Aig_Man_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManCi_imctk_abc_sys"]
    pub fn Aig_ManCi(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManCo_imctk_abc_sys"]
    pub fn Aig_ManCo(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManLo_imctk_abc_sys"]
    pub fn Aig_ManLo(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManLi_imctk_abc_sys"]
    pub fn Aig_ManLi(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManObj_imctk_abc_sys"]
    pub fn Aig_ManObj(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjType_imctk_abc_sys"]
    pub fn Aig_ObjType(pObj: *mut Aig_Obj_t) -> Aig_Type_t;
}
extern "C" {
    #[link_name = "Aig_ObjIsNone_imctk_abc_sys"]
    pub fn Aig_ObjIsNone(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsConst1_imctk_abc_sys"]
    pub fn Aig_ObjIsConst1(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsCi_imctk_abc_sys"]
    pub fn Aig_ObjIsCi(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsCo_imctk_abc_sys"]
    pub fn Aig_ObjIsCo(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsBuf_imctk_abc_sys"]
    pub fn Aig_ObjIsBuf(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsAnd_imctk_abc_sys"]
    pub fn Aig_ObjIsAnd(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsExor_imctk_abc_sys"]
    pub fn Aig_ObjIsExor(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsNode_imctk_abc_sys"]
    pub fn Aig_ObjIsNode(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsTerm_imctk_abc_sys"]
    pub fn Aig_ObjIsTerm(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsHash_imctk_abc_sys"]
    pub fn Aig_ObjIsHash(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsChoice_imctk_abc_sys"]
    pub fn Aig_ObjIsChoice(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsCand_imctk_abc_sys"]
    pub fn Aig_ObjIsCand(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjCioId_imctk_abc_sys"]
    pub fn Aig_ObjCioId(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjId_imctk_abc_sys"]
    pub fn Aig_ObjId(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsMarkA_imctk_abc_sys"]
    pub fn Aig_ObjIsMarkA(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjSetMarkA_imctk_abc_sys"]
    pub fn Aig_ObjSetMarkA(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjClearMarkA_imctk_abc_sys"]
    pub fn Aig_ObjClearMarkA(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjSetTravId_imctk_abc_sys"]
    pub fn Aig_ObjSetTravId(pObj: *mut Aig_Obj_t, TravId: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Aig_ObjSetTravIdCurrent_imctk_abc_sys"]
    pub fn Aig_ObjSetTravIdCurrent(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjSetTravIdPrevious_imctk_abc_sys"]
    pub fn Aig_ObjSetTravIdPrevious(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjIsTravIdCurrent_imctk_abc_sys"]
    pub fn Aig_ObjIsTravIdCurrent(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjIsTravIdPrevious_imctk_abc_sys"]
    pub fn Aig_ObjIsTravIdPrevious(
        p: *mut Aig_Man_t,
        pObj: *mut Aig_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjPhase_imctk_abc_sys"]
    pub fn Aig_ObjPhase(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjPhaseReal_imctk_abc_sys"]
    pub fn Aig_ObjPhaseReal(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjRefs_imctk_abc_sys"]
    pub fn Aig_ObjRefs(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjRef_imctk_abc_sys"]
    pub fn Aig_ObjRef(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjDeref_imctk_abc_sys"]
    pub fn Aig_ObjDeref(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjClearRef_imctk_abc_sys"]
    pub fn Aig_ObjClearRef(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjFaninId0_imctk_abc_sys"]
    pub fn Aig_ObjFaninId0(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjFaninId1_imctk_abc_sys"]
    pub fn Aig_ObjFaninId1(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjFaninC0_imctk_abc_sys"]
    pub fn Aig_ObjFaninC0(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjFaninC1_imctk_abc_sys"]
    pub fn Aig_ObjFaninC1(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjFanin0_imctk_abc_sys"]
    pub fn Aig_ObjFanin0(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjFanin1_imctk_abc_sys"]
    pub fn Aig_ObjFanin1(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjChild0_imctk_abc_sys"]
    pub fn Aig_ObjChild0(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjChild1_imctk_abc_sys"]
    pub fn Aig_ObjChild1(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjChild0Copy_imctk_abc_sys"]
    pub fn Aig_ObjChild0Copy(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjChild1Copy_imctk_abc_sys"]
    pub fn Aig_ObjChild1Copy(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjChild0Next_imctk_abc_sys"]
    pub fn Aig_ObjChild0Next(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjChild1Next_imctk_abc_sys"]
    pub fn Aig_ObjChild1Next(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjChild0Flip_imctk_abc_sys"]
    pub fn Aig_ObjChild0Flip(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjChild1Flip_imctk_abc_sys"]
    pub fn Aig_ObjChild1Flip(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjCopy_imctk_abc_sys"]
    pub fn Aig_ObjCopy(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjSetCopy_imctk_abc_sys"]
    pub fn Aig_ObjSetCopy(pObj: *mut Aig_Obj_t, pCopy: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjRealCopy_imctk_abc_sys"]
    pub fn Aig_ObjRealCopy(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjToLit_imctk_abc_sys"]
    pub fn Aig_ObjToLit(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjFromLit_imctk_abc_sys"]
    pub fn Aig_ObjFromLit(p: *mut Aig_Man_t, iLit: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjLevel_imctk_abc_sys"]
    pub fn Aig_ObjLevel(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjLevelNew_imctk_abc_sys"]
    pub fn Aig_ObjLevelNew(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjSetLevel_imctk_abc_sys"]
    pub fn Aig_ObjSetLevel(pObj: *mut Aig_Obj_t, i: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjClean_imctk_abc_sys"]
    pub fn Aig_ObjClean(pObj: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjFanout0_imctk_abc_sys"]
    pub fn Aig_ObjFanout0(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjEquiv_imctk_abc_sys"]
    pub fn Aig_ObjEquiv(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjSetEquiv_imctk_abc_sys"]
    pub fn Aig_ObjSetEquiv(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t, pEqu: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjRepr_imctk_abc_sys"]
    pub fn Aig_ObjRepr(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ObjSetRepr_imctk_abc_sys"]
    pub fn Aig_ObjSetRepr(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t, pRepr: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjWhatFanin_imctk_abc_sys"]
    pub fn Aig_ObjWhatFanin(pObj: *mut Aig_Obj_t, pFanin: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjFanoutC_imctk_abc_sys"]
    pub fn Aig_ObjFanoutC(pObj: *mut Aig_Obj_t, pFanout: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjCreateGhost_imctk_abc_sys"]
    pub fn Aig_ObjCreateGhost(
        p: *mut Aig_Man_t,
        p0: *mut Aig_Obj_t,
        p1: *mut Aig_Obj_t,
        Type: Aig_Type_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManFetchMemory_imctk_abc_sys"]
    pub fn Aig_ManFetchMemory(p: *mut Aig_Man_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Aig_ManRecycleMemory_imctk_abc_sys"]
    pub fn Aig_ManRecycleMemory(p: *mut Aig_Man_t, pEntry: *mut Aig_Obj_t);
}
extern "C" {
    #[link_name = "Aig_ObjFanout0Int_imctk_abc_sys"]
    pub fn Aig_ObjFanout0Int(
        p: *mut Aig_Man_t,
        ObjId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Aig_ObjFanoutNext_imctk_abc_sys"]
    pub fn Aig_ObjFanoutNext(
        p: *mut Aig_Man_t,
        iFan: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManCheck(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManCheckMarkA(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCheckPhase(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ComputeCuts(
        pAig: *mut Aig_Man_t,
        nCutsMax: ::std::os::raw::c_int,
        nLeafMax: ::std::os::raw::c_int,
        fTruth: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_ManCut_t;
}
extern "C" {
    pub fn Aig_ManCutStop(p: *mut Aig_ManCut_t);
}
extern "C" {
    pub fn Aig_ManVerifyTopoOrder(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManDfs(p: *mut Aig_Man_t, fNodesOnly: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManDfsAll(p: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManDfsPreorder(
        p: *mut Aig_Man_t,
        fNodesOnly: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManLevelize(p: *mut Aig_Man_t) -> *mut Vec_Vec_t;
}
extern "C" {
    pub fn Aig_ManDfsNodes(
        p: *mut Aig_Man_t,
        ppNodes: *mut *mut Aig_Obj_t,
        nNodes: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManDfsChoices(p: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManDfsReverse(p: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManLevelNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManChoiceLevel(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_DagSize(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_SupportSize(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_Support(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_SupportNodes(
        p: *mut Aig_Man_t,
        ppObjs: *mut *mut Aig_Obj_t,
        nObjs: ::std::os::raw::c_int,
        vSupp: *mut Vec_Ptr_t,
    );
}
extern "C" {
    pub fn Aig_ConeUnmark_rec(pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_Transfer(
        pSour: *mut Aig_Man_t,
        pDest: *mut Aig_Man_t,
        pObj: *mut Aig_Obj_t,
        nVars: ::std::os::raw::c_int,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Compose(
        p: *mut Aig_Man_t,
        pRoot: *mut Aig_Obj_t,
        pFunc: *mut Aig_Obj_t,
        iVar: ::std::os::raw::c_int,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ObjCollectCut(
        pRoot: *mut Aig_Obj_t,
        vLeaves: *mut Vec_Ptr_t,
        vNodes: *mut Vec_Ptr_t,
    );
}
extern "C" {
    pub fn Aig_ObjCollectSuper(
        pObj: *mut Aig_Obj_t,
        vSuper: *mut Vec_Ptr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManDupSimpleDfs_rec(
        pNew: *mut Aig_Man_t,
        p: *mut Aig_Man_t,
        pObj: *mut Aig_Obj_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ManDupSimple(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupSimpleWithHints(p: *mut Aig_Man_t, vHints: *mut Vec_Int_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupSimpleDfs(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupSimpleDfsPart(
        p: *mut Aig_Man_t,
        vPis: *mut Vec_Ptr_t,
        vCos: *mut Vec_Ptr_t,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupOrdered(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupCof(
        p: *mut Aig_Man_t,
        iInput: ::std::os::raw::c_int,
        Value: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupTrim(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupExor(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupDfs(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManOrderPios(p: *mut Aig_Man_t, pOrder: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManDupDfsGuided(p: *mut Aig_Man_t, vPios: *mut Vec_Ptr_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupLevelized(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupWithoutPos(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupFlopsOnly(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupRepres(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupRepresDfs(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManCreateMiter(
        p1: *mut Aig_Man_t,
        p2: *mut Aig_Man_t,
        fImpl: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupOrpos(p: *mut Aig_Man_t, fAddRegs: ::std::os::raw::c_int) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupOneOutput(
        p: *mut Aig_Man_t,
        iPoNum: ::std::os::raw::c_int,
        fAddRegs: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupUnsolvedOutputs(
        p: *mut Aig_Man_t,
        fAddRegs: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupArray(vArray: *mut Vec_Ptr_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupNodes(pMan: *mut Aig_Man_t, vArray: *mut Vec_Ptr_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ObjAddFanout(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t, pFanout: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ObjRemoveFanout(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t, pFanout: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ManFanoutStart(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManFanoutStop(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManFrames(
        pAig: *mut Aig_Man_t,
        nFs: ::std::os::raw::c_int,
        fInit: ::std::os::raw::c_int,
        fOuts: ::std::os::raw::c_int,
        fRegs: ::std::os::raw::c_int,
        fEnlarge: ::std::os::raw::c_int,
        ppObjMap: *mut *mut *mut Aig_Obj_t,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManStart(nNodesMax: ::std::os::raw::c_int) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManStartFrom(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManExtractMiter(
        p: *mut Aig_Man_t,
        pNode1: *mut Aig_Obj_t,
        pNode2: *mut Aig_Obj_t,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManStop(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManStopP(p: *mut *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCleanup(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManAntiCleanup(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManCiCleanup(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManCoCleanup(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManPrintStats(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManReportImprovement(p: *mut Aig_Man_t, pNew: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManSetRegNum(p: *mut Aig_Man_t, nRegs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_ManFlipFirstPo(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManReleaseData(p: *mut Aig_Man_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Aig_ManStartMemory(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManStopMemory(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_NodeRef_rec(
        pNode: *mut Aig_Obj_t,
        LevelMin: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_NodeDeref_rec(
        pNode: *mut Aig_Obj_t,
        LevelMin: ::std::os::raw::c_uint,
        pPower: *mut f32,
        pProbs: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_NodeMffcSupp(
        p: *mut Aig_Man_t,
        pNode: *mut Aig_Obj_t,
        LevelMin: ::std::os::raw::c_int,
        vSupp: *mut Vec_Ptr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_NodeMffcLabel(
        p: *mut Aig_Man_t,
        pNode: *mut Aig_Obj_t,
        pPower: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_NodeMffcLabelCut(
        p: *mut Aig_Man_t,
        pNode: *mut Aig_Obj_t,
        vLeaves: *mut Vec_Ptr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_NodeMffcExtendCut(
        p: *mut Aig_Man_t,
        pNode: *mut Aig_Obj_t,
        vLeaves: *mut Vec_Ptr_t,
        vResult: *mut Vec_Ptr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ObjCreateCi(p: *mut Aig_Man_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ObjCreateCo(p: *mut Aig_Man_t, pDriver: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ObjCreate(p: *mut Aig_Man_t, pGhost: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ObjConnect(
        p: *mut Aig_Man_t,
        pObj: *mut Aig_Obj_t,
        pFan0: *mut Aig_Obj_t,
        pFan1: *mut Aig_Obj_t,
    );
}
extern "C" {
    pub fn Aig_ObjDisconnect(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ObjDelete(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ObjDelete_rec(
        p: *mut Aig_Man_t,
        pObj: *mut Aig_Obj_t,
        fFreeTop: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_ObjDeletePo(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ObjPrint(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ObjPatchFanin0(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t, pFaninNew: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ObjReplace(
        p: *mut Aig_Man_t,
        pObjOld: *mut Aig_Obj_t,
        pObjNew: *mut Aig_Obj_t,
        fUpdateLevel: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_IthVar(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Oper(
        p: *mut Aig_Man_t,
        p0: *mut Aig_Obj_t,
        p1: *mut Aig_Obj_t,
        Type: Aig_Type_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_And(p: *mut Aig_Man_t, p0: *mut Aig_Obj_t, p1: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Or(p: *mut Aig_Man_t, p0: *mut Aig_Obj_t, p1: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Exor(p: *mut Aig_Man_t, p0: *mut Aig_Obj_t, p1: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Mux(
        p: *mut Aig_Man_t,
        pC: *mut Aig_Obj_t,
        p1: *mut Aig_Obj_t,
        p0: *mut Aig_Obj_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Maj(
        p: *mut Aig_Man_t,
        pA: *mut Aig_Obj_t,
        pB: *mut Aig_Obj_t,
        pC: *mut Aig_Obj_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Multi(
        p: *mut Aig_Man_t,
        pArgs: *mut *mut Aig_Obj_t,
        nArgs: ::std::os::raw::c_int,
        Type: Aig_Type_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_Miter(p: *mut Aig_Man_t, vPairs: *mut Vec_Ptr_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_MiterTwo(
        p: *mut Aig_Man_t,
        vNodes1: *mut Vec_Ptr_t,
        vNodes2: *mut Vec_Ptr_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_CreateAnd(p: *mut Aig_Man_t, nVars: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_CreateOr(p: *mut Aig_Man_t, nVars: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_CreateExor(p: *mut Aig_Man_t, nVars: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ManOrderStart(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManOrderStop(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ObjOrderInsert(p: *mut Aig_Man_t, ObjId: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_ObjOrderRemove(p: *mut Aig_Man_t, ObjId: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_ObjOrderAdvance(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManSupports(p: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManSupportsInverse(p: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManSupportsRegisters(p: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManPartitionSmart(
        p: *mut Aig_Man_t,
        nPartSizeLimit: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        pvPartSupps: *mut *mut Vec_Ptr_t,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManPartitionSmartRegisters(
        pAig: *mut Aig_Man_t,
        nSuppSizeLimit: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManPartitionNaive(
        p: *mut Aig_Man_t,
        nPartSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManMiterPartitioned(
        p1: *mut Aig_Man_t,
        p2: *mut Aig_Man_t,
        nPartSize: ::std::os::raw::c_int,
        fSmart: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManChoicePartitioned(
        vAigs: *mut Vec_Ptr_t,
        nPartSize: ::std::os::raw::c_int,
        nConfMax: ::std::os::raw::c_int,
        nLevelMax: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManFraigPartitioned(
        pAig: *mut Aig_Man_t,
        nPartSize: ::std::os::raw::c_int,
        nConfMax: ::std::os::raw::c_int,
        nLevelMax: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManChoiceConstructive(
        vAigs: *mut Vec_Ptr_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManRegPartitionSimple(
        pAig: *mut Aig_Man_t,
        nPartSize: ::std::os::raw::c_int,
        nOverSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManPartDivide(
        vResult: *mut Vec_Ptr_t,
        vDomain: *mut Vec_Int_t,
        nPartSize: ::std::os::raw::c_int,
        nOverSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_ManRegPartitionSmart(
        pAig: *mut Aig_Man_t,
        nPartSize: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManRegCreatePart(
        pAig: *mut Aig_Man_t,
        vPart: *mut Vec_Int_t,
        pnCountPis: *mut ::std::os::raw::c_int,
        pnCountRegs: *mut ::std::os::raw::c_int,
        ppMapBack: *mut *mut ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManRegProjectOnehots(
        pAig: *mut Aig_Man_t,
        pPart: *mut Aig_Man_t,
        vOnehots: *mut Vec_Ptr_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManReprStart(p: *mut Aig_Man_t, nIdMax: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_ManReprStop(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ObjCreateRepr(p: *mut Aig_Man_t, pNode1: *mut Aig_Obj_t, pNode2: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ManTransferRepr(pNew: *mut Aig_Man_t, p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManDupRepr(p: *mut Aig_Man_t, fOrdered: ::std::os::raw::c_int) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManDupReprBasic(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManCountReprs(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManRehash(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ObjCheckTfi(
        p: *mut Aig_Man_t,
        pNew: *mut Aig_Obj_t,
        pOld: *mut Aig_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManMarkValidChoices(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_TransferMappedClasses(
        pAig: *mut Aig_Man_t,
        pPart: *mut Aig_Man_t,
        pMapBack: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Rtm_ManRetime(
        p: *mut Aig_Man_t,
        fForward: ::std::os::raw::c_int,
        nStepsMax: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManRetimeFrontier(
        p: *mut Aig_Man_t,
        nStepsMax: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManRemap(p: *mut Aig_Man_t, vMap: *mut Vec_Ptr_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManSeqCleanup(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManSeqCleanupBasic(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManCountMergeRegs(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManReduceLaches(
        p: *mut Aig_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManComputeSccs(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManScl(
        pAig: *mut Aig_Man_t,
        fLatchConst: ::std::os::raw::c_int,
        fLatchEqual: ::std::os::raw::c_int,
        fUseMvSweep: ::std::os::raw::c_int,
        nFramesSymb: ::std::os::raw::c_int,
        nFramesSatur: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManShow(pMan: *mut Aig_Man_t, fHaig: ::std::os::raw::c_int, vBold: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Aig_TableLookup(p: *mut Aig_Man_t, pGhost: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_TableLookupTwo(
        p: *mut Aig_Man_t,
        pFanin0: *mut Aig_Obj_t,
        pFanin1: *mut Aig_Obj_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_TableInsert(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_TableDelete(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_TableCountEntries(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_TableProfile(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_TableClear(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ObjClearReverseLevel(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ObjRequiredLevel(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManStartReverseLevels(p: *mut Aig_Man_t, nMaxLevelIncrease: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_ManStopReverseLevels(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManUpdateLevel(p: *mut Aig_Man_t, pObjNew: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ManUpdateReverseLevel(p: *mut Aig_Man_t, pObjNew: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ManVerifyLevel(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManVerifyReverseLevel(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCutTruth(
        pRoot: *mut Aig_Obj_t,
        vLeaves: *mut Vec_Ptr_t,
        vNodes: *mut Vec_Ptr_t,
        vTruthElem: *mut Vec_Ptr_t,
        vTruthStore: *mut Vec_Ptr_t,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Aig_ManConstReduce(
        p: *mut Aig_Man_t,
        fUseMvSweep: ::std::os::raw::c_int,
        nFramesSymb: ::std::os::raw::c_int,
        nFramesSatur: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Aig_ManIncrementTravId(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_TimeStamp() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Aig_ManHasNoGaps(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManLevels(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ManResetRefs(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCleanMarkA(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCleanMarkB(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCleanMarkAB(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCleanData(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ObjCleanData_rec(pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Aig_ManCleanNext(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ObjCollectMulti(pFunc: *mut Aig_Obj_t, vSuper: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Aig_ObjIsMuxType(pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ObjRecognizeExor(
        pObj: *mut Aig_Obj_t,
        ppFan0: *mut *mut Aig_Obj_t,
        ppFan1: *mut *mut Aig_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ObjRecognizeMux(
        pObj: *mut Aig_Obj_t,
        ppObjT: *mut *mut Aig_Obj_t,
        ppObjE: *mut *mut Aig_Obj_t,
    ) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ObjReal_rec(pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Aig_ObjCompareIdIncrease(
        pp1: *mut *mut Aig_Obj_t,
        pp2: *mut *mut Aig_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_ObjPrintEqn(
        pFile: *mut FILE,
        pObj: *mut Aig_Obj_t,
        vLevels: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_ObjPrintVerilog(
        pFile: *mut FILE,
        pObj: *mut Aig_Obj_t,
        vLevels: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_ObjPrintVerbose(pObj: *mut Aig_Obj_t, fHaig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_ManPrintVerbose(p: *mut Aig_Man_t, fHaig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_ManDump(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManDumpBlif(
        p: *mut Aig_Man_t,
        pFileName: *mut ::std::os::raw::c_char,
        vPiNames: *mut Vec_Ptr_t,
        vPoNames: *mut Vec_Ptr_t,
    );
}
extern "C" {
    pub fn Aig_ManDumpVerilog(p: *mut Aig_Man_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Aig_ManSetCioIds(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManCleanCioIds(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManChoiceNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_FileNameGenericAppend(
        pBase: *mut ::std::os::raw::c_char,
        pSuffix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Aig_ManRandom(fReset: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Aig_ManRandom64(fReset: ::std::os::raw::c_int) -> word;
}
extern "C" {
    pub fn Aig_ManRandomInfo(
        vInfo: *mut Vec_Ptr_t,
        iInputStart: ::std::os::raw::c_int,
        iWordStart: ::std::os::raw::c_int,
        iWordStop: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_NodeUnionLists(vArr1: *mut Vec_Ptr_t, vArr2: *mut Vec_Ptr_t, vArr: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Aig_NodeIntersectLists(
        vArr1: *mut Vec_Ptr_t,
        vArr2: *mut Vec_Ptr_t,
        vArr: *mut Vec_Ptr_t,
    );
}
extern "C" {
    pub fn Aig_ManSetPhase(pAig: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManMuxesCollect(pAig: *mut Aig_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Aig_ManMuxesDeref(pAig: *mut Aig_Man_t, vMuxes: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Aig_ManMuxesRef(pAig: *mut Aig_Man_t, vMuxes: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Aig_ManInvertConstraints(pAig: *mut Aig_Man_t);
}
extern "C" {
    pub fn Aig_ManFindCut(
        pRoot: *mut Aig_Obj_t,
        vFront: *mut Vec_Ptr_t,
        vVisited: *mut Vec_Ptr_t,
        nSizeLimit: ::std::os::raw::c_int,
        nFanoutLimit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_MmFixedStart(
        nEntrySize: ::std::os::raw::c_int,
        nEntriesMax: ::std::os::raw::c_int,
    ) -> *mut Aig_MmFixed_t;
}
extern "C" {
    pub fn Aig_MmFixedStop(p: *mut Aig_MmFixed_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_MmFixedEntryFetch(p: *mut Aig_MmFixed_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Aig_MmFixedEntryRecycle(p: *mut Aig_MmFixed_t, pEntry: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Aig_MmFixedRestart(p: *mut Aig_MmFixed_t);
}
extern "C" {
    pub fn Aig_MmFixedReadMemUsage(p: *mut Aig_MmFixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_MmFixedReadMaxEntriesUsed(p: *mut Aig_MmFixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_MmFlexStart() -> *mut Aig_MmFlex_t;
}
extern "C" {
    pub fn Aig_MmFlexStop(p: *mut Aig_MmFlex_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_MmFlexEntryFetch(
        p: *mut Aig_MmFlex_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Aig_MmFlexRestart(p: *mut Aig_MmFlex_t);
}
extern "C" {
    pub fn Aig_MmFlexReadMemUsage(p: *mut Aig_MmFlex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Aig_MmStepStart(nSteps: ::std::os::raw::c_int) -> *mut Aig_MmStep_t;
}
extern "C" {
    pub fn Aig_MmStepStop(p: *mut Aig_MmStep_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Aig_MmStepEntryFetch(
        p: *mut Aig_MmStep_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Aig_MmStepEntryRecycle(
        p: *mut Aig_MmStep_t,
        pEntry: *mut ::std::os::raw::c_char,
        nBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Aig_MmStepReadMemUsage(p: *mut Aig_MmStep_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gia_ManFromAig(p: *mut Aig_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManFromAigChoices(p: *mut Aig_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManFromAigSimple(p: *mut Aig_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManFromAigSwitch(p: *mut Aig_Man_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManToAig(p: *mut Gia_Man_t, fChoices: ::std::os::raw::c_int) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Gia_ManToAigSkip(p: *mut Gia_Man_t, nOutDelta: ::std::os::raw::c_int) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Gia_ManToAigSimple(p: *mut Gia_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Gia_ManReprToAigRepr(pAig: *mut Aig_Man_t, pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManReprToAigRepr2(pAig: *mut Aig_Man_t, pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManReprFromAigRepr(pAig: *mut Aig_Man_t, pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManReprFromAigRepr2(pAig: *mut Aig_Man_t, pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Gia_ManCompress2(
        p: *mut Gia_Man_t,
        fUpdateLevel: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManPerformDch(
        p: *mut Gia_Man_t,
        pPars: *mut ::std::os::raw::c_void,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManAbstraction(p: *mut Gia_Man_t, vFlops: *mut Vec_Int_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Gia_ManSeqCleanupClasses(
        p: *mut Gia_Man_t,
        fConst: ::std::os::raw::c_int,
        fEquiv: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Gia_ManSolveSat(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
pub type Hop_Man_t = Hop_Man_t_;
pub type Hop_Obj_t = Hop_Obj_t_;
pub type Hop_Edge_t = ::std::os::raw::c_int;
pub const Hop_Type_t_AIG_NONE: Hop_Type_t = 0;
pub const Hop_Type_t_AIG_CONST1: Hop_Type_t = 1;
pub const Hop_Type_t_AIG_PI: Hop_Type_t = 2;
pub const Hop_Type_t_AIG_PO: Hop_Type_t = 3;
pub const Hop_Type_t_AIG_AND: Hop_Type_t = 4;
pub const Hop_Type_t_AIG_EXOR: Hop_Type_t = 5;
pub const Hop_Type_t_AIG_VOID: Hop_Type_t = 6;
pub type Hop_Type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hop_Obj_t_ {
    pub __bindgen_anon_1: Hop_Obj_t___bindgen_ty_1,
    pub __bindgen_anon_2: Hop_Obj_t___bindgen_ty_2,
    pub pFanin0: *mut Hop_Obj_t,
    pub pFanin1: *mut Hop_Obj_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub Id: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Hop_Obj_t___bindgen_ty_1 {
    pub pData: *mut ::std::os::raw::c_void,
    pub iData: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hop_Obj_t___bindgen_ty_1"]
        [::std::mem::size_of::<Hop_Obj_t___bindgen_ty_1>() - 8usize];
    ["Alignment of Hop_Obj_t___bindgen_ty_1"]
        [::std::mem::align_of::<Hop_Obj_t___bindgen_ty_1>() - 8usize];
    ["Offset of field: Hop_Obj_t___bindgen_ty_1::pData"]
        [::std::mem::offset_of!(Hop_Obj_t___bindgen_ty_1, pData) - 0usize];
    ["Offset of field: Hop_Obj_t___bindgen_ty_1::iData"]
        [::std::mem::offset_of!(Hop_Obj_t___bindgen_ty_1, iData) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Hop_Obj_t___bindgen_ty_2 {
    pub pNext: *mut Hop_Obj_t,
    pub PioNum: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hop_Obj_t___bindgen_ty_2"]
        [::std::mem::size_of::<Hop_Obj_t___bindgen_ty_2>() - 8usize];
    ["Alignment of Hop_Obj_t___bindgen_ty_2"]
        [::std::mem::align_of::<Hop_Obj_t___bindgen_ty_2>() - 8usize];
    ["Offset of field: Hop_Obj_t___bindgen_ty_2::pNext"]
        [::std::mem::offset_of!(Hop_Obj_t___bindgen_ty_2, pNext) - 0usize];
    ["Offset of field: Hop_Obj_t___bindgen_ty_2::PioNum"]
        [::std::mem::offset_of!(Hop_Obj_t___bindgen_ty_2, PioNum) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hop_Obj_t_"][::std::mem::size_of::<Hop_Obj_t_>() - 40usize];
    ["Alignment of Hop_Obj_t_"][::std::mem::align_of::<Hop_Obj_t_>() - 8usize];
    ["Offset of field: Hop_Obj_t_::pFanin0"][::std::mem::offset_of!(Hop_Obj_t_, pFanin0) - 16usize];
    ["Offset of field: Hop_Obj_t_::pFanin1"][::std::mem::offset_of!(Hop_Obj_t_, pFanin1) - 24usize];
    ["Offset of field: Hop_Obj_t_::Id"][::std::mem::offset_of!(Hop_Obj_t_, Id) - 36usize];
};
impl Hop_Obj_t_ {
    #[inline]
    pub fn Type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_Type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fPhase(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fPhase(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMarkA(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMarkA(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMarkB(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMarkB(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nRefs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_nRefs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Type: ::std::os::raw::c_uint,
        fPhase: ::std::os::raw::c_uint,
        fMarkA: ::std::os::raw::c_uint,
        fMarkB: ::std::os::raw::c_uint,
        nRefs: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let Type: u32 = unsafe { ::std::mem::transmute(Type) };
            Type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fPhase: u32 = unsafe { ::std::mem::transmute(fPhase) };
            fPhase as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let fMarkA: u32 = unsafe { ::std::mem::transmute(fMarkA) };
            fMarkA as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let fMarkB: u32 = unsafe { ::std::mem::transmute(fMarkB) };
            fMarkB as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let nRefs: u32 = unsafe { ::std::mem::transmute(nRefs) };
            nRefs as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hop_Man_t_ {
    pub vPis: *mut Vec_Ptr_t,
    pub vPos: *mut Vec_Ptr_t,
    pub vObjs: *mut Vec_Ptr_t,
    pub pConst1: *mut Hop_Obj_t,
    pub Ghost: Hop_Obj_t,
    pub nObjs: [::std::os::raw::c_int; 6usize],
    pub nCreated: ::std::os::raw::c_int,
    pub nDeleted: ::std::os::raw::c_int,
    pub pTable: *mut *mut Hop_Obj_t,
    pub nTableSize: ::std::os::raw::c_int,
    pub pData: *mut ::std::os::raw::c_void,
    pub nTravIds: ::std::os::raw::c_int,
    pub fRefCount: ::std::os::raw::c_int,
    pub fCatchExor: ::std::os::raw::c_int,
    pub vChunks: *mut Vec_Ptr_t,
    pub vPages: *mut Vec_Ptr_t,
    pub pListFree: *mut Hop_Obj_t,
    pub time1: abctime,
    pub time2: abctime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hop_Man_t_"][::std::mem::size_of::<Hop_Man_t_>() - 184usize];
    ["Alignment of Hop_Man_t_"][::std::mem::align_of::<Hop_Man_t_>() - 8usize];
    ["Offset of field: Hop_Man_t_::vPis"][::std::mem::offset_of!(Hop_Man_t_, vPis) - 0usize];
    ["Offset of field: Hop_Man_t_::vPos"][::std::mem::offset_of!(Hop_Man_t_, vPos) - 8usize];
    ["Offset of field: Hop_Man_t_::vObjs"][::std::mem::offset_of!(Hop_Man_t_, vObjs) - 16usize];
    ["Offset of field: Hop_Man_t_::pConst1"][::std::mem::offset_of!(Hop_Man_t_, pConst1) - 24usize];
    ["Offset of field: Hop_Man_t_::Ghost"][::std::mem::offset_of!(Hop_Man_t_, Ghost) - 32usize];
    ["Offset of field: Hop_Man_t_::nObjs"][::std::mem::offset_of!(Hop_Man_t_, nObjs) - 72usize];
    ["Offset of field: Hop_Man_t_::nCreated"]
        [::std::mem::offset_of!(Hop_Man_t_, nCreated) - 96usize];
    ["Offset of field: Hop_Man_t_::nDeleted"]
        [::std::mem::offset_of!(Hop_Man_t_, nDeleted) - 100usize];
    ["Offset of field: Hop_Man_t_::pTable"][::std::mem::offset_of!(Hop_Man_t_, pTable) - 104usize];
    ["Offset of field: Hop_Man_t_::nTableSize"]
        [::std::mem::offset_of!(Hop_Man_t_, nTableSize) - 112usize];
    ["Offset of field: Hop_Man_t_::pData"][::std::mem::offset_of!(Hop_Man_t_, pData) - 120usize];
    ["Offset of field: Hop_Man_t_::nTravIds"]
        [::std::mem::offset_of!(Hop_Man_t_, nTravIds) - 128usize];
    ["Offset of field: Hop_Man_t_::fRefCount"]
        [::std::mem::offset_of!(Hop_Man_t_, fRefCount) - 132usize];
    ["Offset of field: Hop_Man_t_::fCatchExor"]
        [::std::mem::offset_of!(Hop_Man_t_, fCatchExor) - 136usize];
    ["Offset of field: Hop_Man_t_::vChunks"]
        [::std::mem::offset_of!(Hop_Man_t_, vChunks) - 144usize];
    ["Offset of field: Hop_Man_t_::vPages"][::std::mem::offset_of!(Hop_Man_t_, vPages) - 152usize];
    ["Offset of field: Hop_Man_t_::pListFree"]
        [::std::mem::offset_of!(Hop_Man_t_, pListFree) - 160usize];
    ["Offset of field: Hop_Man_t_::time1"][::std::mem::offset_of!(Hop_Man_t_, time1) - 168usize];
    ["Offset of field: Hop_Man_t_::time2"][::std::mem::offset_of!(Hop_Man_t_, time2) - 176usize];
};
extern "C" {
    pub fn Hop_ManAddMemory(p: *mut Hop_Man_t);
}
extern "C" {
    #[link_name = "Hop_BitWordNum_imctk_abc_sys"]
    pub fn Hop_BitWordNum(nBits: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_TruthWordNum_imctk_abc_sys"]
    pub fn Hop_TruthWordNum(nVars: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_InfoHasBit_imctk_abc_sys"]
    pub fn Hop_InfoHasBit(
        p: *mut ::std::os::raw::c_uint,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_InfoSetBit_imctk_abc_sys"]
    pub fn Hop_InfoSetBit(p: *mut ::std::os::raw::c_uint, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Hop_InfoXorBit_imctk_abc_sys"]
    pub fn Hop_InfoXorBit(p: *mut ::std::os::raw::c_uint, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Hop_Base2Log_imctk_abc_sys"]
    pub fn Hop_Base2Log(n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_Base10Log_imctk_abc_sys"]
    pub fn Hop_Base10Log(n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_Regular_imctk_abc_sys"]
    pub fn Hop_Regular(p: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_Not_imctk_abc_sys"]
    pub fn Hop_Not(p: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_NotCond_imctk_abc_sys"]
    pub fn Hop_NotCond(p: *mut Hop_Obj_t, c: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_IsComplement_imctk_abc_sys"]
    pub fn Hop_IsComplement(p: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ManConst0_imctk_abc_sys"]
    pub fn Hop_ManConst0(p: *mut Hop_Man_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ManConst1_imctk_abc_sys"]
    pub fn Hop_ManConst1(p: *mut Hop_Man_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ManGhost_imctk_abc_sys"]
    pub fn Hop_ManGhost(p: *mut Hop_Man_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ManPi_imctk_abc_sys"]
    pub fn Hop_ManPi(p: *mut Hop_Man_t, i: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ManPo_imctk_abc_sys"]
    pub fn Hop_ManPo(p: *mut Hop_Man_t, i: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ManObj_imctk_abc_sys"]
    pub fn Hop_ManObj(p: *mut Hop_Man_t, i: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_EdgeCreate_imctk_abc_sys"]
    pub fn Hop_EdgeCreate(Id: ::std::os::raw::c_int, fCompl: ::std::os::raw::c_int) -> Hop_Edge_t;
}
extern "C" {
    #[link_name = "Hop_EdgeId_imctk_abc_sys"]
    pub fn Hop_EdgeId(Edge: Hop_Edge_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_EdgeIsComplement_imctk_abc_sys"]
    pub fn Hop_EdgeIsComplement(Edge: Hop_Edge_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_EdgeRegular_imctk_abc_sys"]
    pub fn Hop_EdgeRegular(Edge: Hop_Edge_t) -> Hop_Edge_t;
}
extern "C" {
    #[link_name = "Hop_EdgeNot_imctk_abc_sys"]
    pub fn Hop_EdgeNot(Edge: Hop_Edge_t) -> Hop_Edge_t;
}
extern "C" {
    #[link_name = "Hop_EdgeNotCond_imctk_abc_sys"]
    pub fn Hop_EdgeNotCond(Edge: Hop_Edge_t, fCond: ::std::os::raw::c_int) -> Hop_Edge_t;
}
extern "C" {
    #[link_name = "Hop_ManPiNum_imctk_abc_sys"]
    pub fn Hop_ManPiNum(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ManPoNum_imctk_abc_sys"]
    pub fn Hop_ManPoNum(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ManAndNum_imctk_abc_sys"]
    pub fn Hop_ManAndNum(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ManExorNum_imctk_abc_sys"]
    pub fn Hop_ManExorNum(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ManNodeNum_imctk_abc_sys"]
    pub fn Hop_ManNodeNum(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ManGetCost_imctk_abc_sys"]
    pub fn Hop_ManGetCost(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ManObjNum_imctk_abc_sys"]
    pub fn Hop_ManObjNum(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjType_imctk_abc_sys"]
    pub fn Hop_ObjType(pObj: *mut Hop_Obj_t) -> Hop_Type_t;
}
extern "C" {
    #[link_name = "Hop_ObjIsNone_imctk_abc_sys"]
    pub fn Hop_ObjIsNone(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsConst1_imctk_abc_sys"]
    pub fn Hop_ObjIsConst1(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsPi_imctk_abc_sys"]
    pub fn Hop_ObjIsPi(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsPo_imctk_abc_sys"]
    pub fn Hop_ObjIsPo(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsAnd_imctk_abc_sys"]
    pub fn Hop_ObjIsAnd(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsExor_imctk_abc_sys"]
    pub fn Hop_ObjIsExor(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsNode_imctk_abc_sys"]
    pub fn Hop_ObjIsNode(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsTerm_imctk_abc_sys"]
    pub fn Hop_ObjIsTerm(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsHash_imctk_abc_sys"]
    pub fn Hop_ObjIsHash(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsMarkA_imctk_abc_sys"]
    pub fn Hop_ObjIsMarkA(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjSetMarkA_imctk_abc_sys"]
    pub fn Hop_ObjSetMarkA(pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjClearMarkA_imctk_abc_sys"]
    pub fn Hop_ObjClearMarkA(pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjSetTravId_imctk_abc_sys"]
    pub fn Hop_ObjSetTravId(pObj: *mut Hop_Obj_t, TravId: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Hop_ObjSetTravIdCurrent_imctk_abc_sys"]
    pub fn Hop_ObjSetTravIdCurrent(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjSetTravIdPrevious_imctk_abc_sys"]
    pub fn Hop_ObjSetTravIdPrevious(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjIsTravIdCurrent_imctk_abc_sys"]
    pub fn Hop_ObjIsTravIdCurrent(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjIsTravIdPrevious_imctk_abc_sys"]
    pub fn Hop_ObjIsTravIdPrevious(
        p: *mut Hop_Man_t,
        pObj: *mut Hop_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjTravId_imctk_abc_sys"]
    pub fn Hop_ObjTravId(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjPhase_imctk_abc_sys"]
    pub fn Hop_ObjPhase(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjRefs_imctk_abc_sys"]
    pub fn Hop_ObjRefs(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjRef_imctk_abc_sys"]
    pub fn Hop_ObjRef(pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjDeref_imctk_abc_sys"]
    pub fn Hop_ObjDeref(pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjClearRef_imctk_abc_sys"]
    pub fn Hop_ObjClearRef(pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjFaninC0_imctk_abc_sys"]
    pub fn Hop_ObjFaninC0(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjFaninC1_imctk_abc_sys"]
    pub fn Hop_ObjFaninC1(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjFanin0_imctk_abc_sys"]
    pub fn Hop_ObjFanin0(pObj: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ObjFanin1_imctk_abc_sys"]
    pub fn Hop_ObjFanin1(pObj: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ObjChild0_imctk_abc_sys"]
    pub fn Hop_ObjChild0(pObj: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ObjChild1_imctk_abc_sys"]
    pub fn Hop_ObjChild1(pObj: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ObjChild0Copy_imctk_abc_sys"]
    pub fn Hop_ObjChild0Copy(pObj: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ObjChild1Copy_imctk_abc_sys"]
    pub fn Hop_ObjChild1Copy(pObj: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ObjChild0CopyI_imctk_abc_sys"]
    pub fn Hop_ObjChild0CopyI(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjChild1CopyI_imctk_abc_sys"]
    pub fn Hop_ObjChild1CopyI(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjLevel_imctk_abc_sys"]
    pub fn Hop_ObjLevel(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjLevelNew_imctk_abc_sys"]
    pub fn Hop_ObjLevelNew(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjPhaseCompl_imctk_abc_sys"]
    pub fn Hop_ObjPhaseCompl(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjClean_imctk_abc_sys"]
    pub fn Hop_ObjClean(pObj: *mut Hop_Obj_t);
}
extern "C" {
    #[link_name = "Hop_ObjWhatFanin_imctk_abc_sys"]
    pub fn Hop_ObjWhatFanin(pObj: *mut Hop_Obj_t, pFanin: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjFanoutC_imctk_abc_sys"]
    pub fn Hop_ObjFanoutC(pObj: *mut Hop_Obj_t, pFanout: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hop_ObjCreateGhost_imctk_abc_sys"]
    pub fn Hop_ObjCreateGhost(
        p: *mut Hop_Man_t,
        p0: *mut Hop_Obj_t,
        p1: *mut Hop_Obj_t,
        Type: Hop_Type_t,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ManFetchMemory_imctk_abc_sys"]
    pub fn Hop_ManFetchMemory(p: *mut Hop_Man_t) -> *mut Hop_Obj_t;
}
extern "C" {
    #[link_name = "Hop_ManRecycleMemory_imctk_abc_sys"]
    pub fn Hop_ManRecycleMemory(p: *mut Hop_Man_t, pEntry: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_ManBalance(p: *mut Hop_Man_t, fUpdateLevel: ::std::os::raw::c_int)
        -> *mut Hop_Man_t;
}
extern "C" {
    pub fn Hop_NodeBalanceBuildSuper(
        p: *mut Hop_Man_t,
        vSuper: *mut Vec_Ptr_t,
        Type: Hop_Type_t,
        fUpdateLevel: ::std::os::raw::c_int,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_ManCheck(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_ManDfs(p: *mut Hop_Man_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Hop_ManDfsNode(p: *mut Hop_Man_t, pNode: *mut Hop_Obj_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Hop_ManCountLevels(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_ManCreateRefs(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_DagSize(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_ObjFanoutCount(
        pObj: *mut Hop_Obj_t,
        pPivot: *mut Hop_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_ConeUnmark_rec(pObj: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_Transfer(
        pSour: *mut Hop_Man_t,
        pDest: *mut Hop_Man_t,
        pObj: *mut Hop_Obj_t,
        nVars: ::std::os::raw::c_int,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Compose(
        p: *mut Hop_Man_t,
        pRoot: *mut Hop_Obj_t,
        pFunc: *mut Hop_Obj_t,
        iVar: ::std::os::raw::c_int,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Complement(
        p: *mut Hop_Man_t,
        pRoot: *mut Hop_Obj_t,
        iVar: ::std::os::raw::c_int,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Remap(
        p: *mut Hop_Man_t,
        pRoot: *mut Hop_Obj_t,
        uSupp: ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Permute(
        p: *mut Hop_Man_t,
        pRoot: *mut Hop_Obj_t,
        nRootVars: ::std::os::raw::c_int,
        pPermute: *mut ::std::os::raw::c_int,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_ManStart() -> *mut Hop_Man_t;
}
extern "C" {
    pub fn Hop_ManDup(p: *mut Hop_Man_t) -> *mut Hop_Man_t;
}
extern "C" {
    pub fn Hop_ManStop(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_ManCleanup(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_ManPrintStats(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_ManStartMemory(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_ManStopMemory(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_ObjCreatePi(p: *mut Hop_Man_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_ObjCreatePo(p: *mut Hop_Man_t, pDriver: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_ObjCreate(p: *mut Hop_Man_t, pGhost: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_ObjConnect(
        p: *mut Hop_Man_t,
        pObj: *mut Hop_Obj_t,
        pFan0: *mut Hop_Obj_t,
        pFan1: *mut Hop_Obj_t,
    );
}
extern "C" {
    pub fn Hop_ObjDisconnect(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_ObjDelete(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_ObjDelete_rec(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_ObjRepr(pObj: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_ObjCreateChoice(pOld: *mut Hop_Obj_t, pNew: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_IthVar(p: *mut Hop_Man_t, i: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Oper(
        p: *mut Hop_Man_t,
        p0: *mut Hop_Obj_t,
        p1: *mut Hop_Obj_t,
        Type: Hop_Type_t,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_And(p: *mut Hop_Man_t, p0: *mut Hop_Obj_t, p1: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Or(p: *mut Hop_Man_t, p0: *mut Hop_Obj_t, p1: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Exor(p: *mut Hop_Man_t, p0: *mut Hop_Obj_t, p1: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Mux(
        p: *mut Hop_Man_t,
        pC: *mut Hop_Obj_t,
        p1: *mut Hop_Obj_t,
        p0: *mut Hop_Obj_t,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Maj(
        p: *mut Hop_Man_t,
        pA: *mut Hop_Obj_t,
        pB: *mut Hop_Obj_t,
        pC: *mut Hop_Obj_t,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_Miter(p: *mut Hop_Man_t, vPairs: *mut Vec_Ptr_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_CreateAnd(p: *mut Hop_Man_t, nVars: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_CreateOr(p: *mut Hop_Man_t, nVars: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_CreateExor(p: *mut Hop_Man_t, nVars: ::std::os::raw::c_int) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_TableLookup(p: *mut Hop_Man_t, pGhost: *mut Hop_Obj_t) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_TableInsert(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_TableDelete(p: *mut Hop_Man_t, pObj: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_TableCountEntries(p: *mut Hop_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_TableProfile(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_ManConvertAigToTruth(
        p: *mut Hop_Man_t,
        pRoot: *mut Hop_Obj_t,
        nVars: ::std::os::raw::c_int,
        vTruth: *mut Vec_Int_t,
        fMsbFirst: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Hop_ManComputeTruth6(
        p: *mut Hop_Man_t,
        pObj: *mut Hop_Obj_t,
        nVars: ::std::os::raw::c_int,
    ) -> word;
}
extern "C" {
    pub fn Hop_ManIncrementTravId(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_ManCleanData(p: *mut Hop_Man_t);
}
extern "C" {
    pub fn Hop_ObjCleanData_rec(pObj: *mut Hop_Obj_t);
}
extern "C" {
    pub fn Hop_ObjCollectMulti(pFunc: *mut Hop_Obj_t, vSuper: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Hop_ObjIsMuxType(pObj: *mut Hop_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_ObjRecognizeExor(
        pObj: *mut Hop_Obj_t,
        ppFan0: *mut *mut Hop_Obj_t,
        ppFan1: *mut *mut Hop_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Hop_ObjRecognizeMux(
        pObj: *mut Hop_Obj_t,
        ppObjT: *mut *mut Hop_Obj_t,
        ppObjE: *mut *mut Hop_Obj_t,
    ) -> *mut Hop_Obj_t;
}
extern "C" {
    pub fn Hop_ObjPrintEqn(
        pFile: *mut FILE,
        pObj: *mut Hop_Obj_t,
        vLevels: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Hop_ObjPrintVerilog(
        pFile: *mut FILE,
        pObj: *mut Hop_Obj_t,
        vLevels: *mut Vec_Vec_t,
        Level: ::std::os::raw::c_int,
        fOnlyAnds: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Hop_ObjPrintVerbose(pObj: *mut Hop_Obj_t, fHaig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Hop_ManPrintVerbose(p: *mut Hop_Man_t, fHaig: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Hop_ManDumpBlif(p: *mut Hop_Man_t, pFileName: *mut ::std::os::raw::c_char);
}
pub type st__compare_func_type = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type st__hash_func_type = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st__table_entry {
    pub key: *mut ::std::os::raw::c_char,
    pub record: *mut ::std::os::raw::c_char,
    pub next: *mut st__table_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of st__table_entry"][::std::mem::size_of::<st__table_entry>() - 24usize];
    ["Alignment of st__table_entry"][::std::mem::align_of::<st__table_entry>() - 8usize];
    ["Offset of field: st__table_entry::key"]
        [::std::mem::offset_of!(st__table_entry, key) - 0usize];
    ["Offset of field: st__table_entry::record"]
        [::std::mem::offset_of!(st__table_entry, record) - 8usize];
    ["Offset of field: st__table_entry::next"]
        [::std::mem::offset_of!(st__table_entry, next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st__table {
    pub compare: st__compare_func_type,
    pub hash: st__hash_func_type,
    pub num_bins: ::std::os::raw::c_int,
    pub num_entries: ::std::os::raw::c_int,
    pub max_density: ::std::os::raw::c_int,
    pub reorder_flag: ::std::os::raw::c_int,
    pub grow_factor: f64,
    pub bins: *mut *mut st__table_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of st__table"][::std::mem::size_of::<st__table>() - 48usize];
    ["Alignment of st__table"][::std::mem::align_of::<st__table>() - 8usize];
    ["Offset of field: st__table::compare"][::std::mem::offset_of!(st__table, compare) - 0usize];
    ["Offset of field: st__table::hash"][::std::mem::offset_of!(st__table, hash) - 8usize];
    ["Offset of field: st__table::num_bins"][::std::mem::offset_of!(st__table, num_bins) - 16usize];
    ["Offset of field: st__table::num_entries"]
        [::std::mem::offset_of!(st__table, num_entries) - 20usize];
    ["Offset of field: st__table::max_density"]
        [::std::mem::offset_of!(st__table, max_density) - 24usize];
    ["Offset of field: st__table::reorder_flag"]
        [::std::mem::offset_of!(st__table, reorder_flag) - 28usize];
    ["Offset of field: st__table::grow_factor"]
        [::std::mem::offset_of!(st__table, grow_factor) - 32usize];
    ["Offset of field: st__table::bins"][::std::mem::offset_of!(st__table, bins) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st__generator {
    pub table: *mut st__table,
    pub entry: *mut st__table_entry,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of st__generator"][::std::mem::size_of::<st__generator>() - 24usize];
    ["Alignment of st__generator"][::std::mem::align_of::<st__generator>() - 8usize];
    ["Offset of field: st__generator::table"]
        [::std::mem::offset_of!(st__generator, table) - 0usize];
    ["Offset of field: st__generator::entry"]
        [::std::mem::offset_of!(st__generator, entry) - 8usize];
    ["Offset of field: st__generator::index"]
        [::std::mem::offset_of!(st__generator, index) - 16usize];
};
pub const st__retval_st__CONTINUE: st__retval = 0;
pub const st__retval_st__STOP: st__retval = 1;
pub const st__retval_st__DELETE: st__retval = 2;
pub type st__retval = ::std::os::raw::c_uint;
pub type st__PFSR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> st__retval,
>;
pub type st__PFI = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn st__init_table_with_params(
        compare: st__compare_func_type,
        hash: st__hash_func_type,
        size: ::std::os::raw::c_int,
        density: ::std::os::raw::c_int,
        grow_factor: f64,
        reorder_flag: ::std::os::raw::c_int,
    ) -> *mut st__table;
}
extern "C" {
    pub fn st__init_table(arg1: st__compare_func_type, arg2: st__hash_func_type) -> *mut st__table;
}
extern "C" {
    pub fn st__free_table(arg1: *mut st__table);
}
extern "C" {
    pub fn st__lookup(
        arg1: *mut st__table,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__lookup_int(
        arg1: *mut st__table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__insert(
        arg1: *mut st__table,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__add_direct(
        arg1: *mut st__table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__find_or_add(
        arg1: *mut st__table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__find(
        arg1: *mut st__table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__copy(arg1: *mut st__table) -> *mut st__table;
}
extern "C" {
    pub fn st__delete(
        arg1: *mut st__table,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__delete_int(
        arg1: *mut st__table,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__foreach(
        arg1: *mut st__table,
        arg2: st__PFSR,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__strhash(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__numhash(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__ptrhash(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__numcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__ptrcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__init_gen(arg1: *mut st__table) -> *mut st__generator;
}
extern "C" {
    pub fn st__gen(
        arg1: *mut st__generator,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__gen_int(
        arg1: *mut st__generator,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn st__free_gen(arg1: *mut st__generator);
}
pub type stmm_compare_func_type = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type stmm_hash_func_type = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stmm_table_entry {
    pub key: *mut ::std::os::raw::c_char,
    pub record: *mut ::std::os::raw::c_char,
    pub next: *mut stmm_table_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stmm_table_entry"][::std::mem::size_of::<stmm_table_entry>() - 24usize];
    ["Alignment of stmm_table_entry"][::std::mem::align_of::<stmm_table_entry>() - 8usize];
    ["Offset of field: stmm_table_entry::key"]
        [::std::mem::offset_of!(stmm_table_entry, key) - 0usize];
    ["Offset of field: stmm_table_entry::record"]
        [::std::mem::offset_of!(stmm_table_entry, record) - 8usize];
    ["Offset of field: stmm_table_entry::next"]
        [::std::mem::offset_of!(stmm_table_entry, next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stmm_table {
    pub compare: stmm_compare_func_type,
    pub hash: stmm_hash_func_type,
    pub num_bins: ::std::os::raw::c_int,
    pub num_entries: ::std::os::raw::c_int,
    pub max_density: ::std::os::raw::c_int,
    pub reorder_flag: ::std::os::raw::c_int,
    pub grow_factor: f64,
    pub bins: *mut *mut stmm_table_entry,
    pub pMemMan: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stmm_table"][::std::mem::size_of::<stmm_table>() - 56usize];
    ["Alignment of stmm_table"][::std::mem::align_of::<stmm_table>() - 8usize];
    ["Offset of field: stmm_table::compare"][::std::mem::offset_of!(stmm_table, compare) - 0usize];
    ["Offset of field: stmm_table::hash"][::std::mem::offset_of!(stmm_table, hash) - 8usize];
    ["Offset of field: stmm_table::num_bins"]
        [::std::mem::offset_of!(stmm_table, num_bins) - 16usize];
    ["Offset of field: stmm_table::num_entries"]
        [::std::mem::offset_of!(stmm_table, num_entries) - 20usize];
    ["Offset of field: stmm_table::max_density"]
        [::std::mem::offset_of!(stmm_table, max_density) - 24usize];
    ["Offset of field: stmm_table::reorder_flag"]
        [::std::mem::offset_of!(stmm_table, reorder_flag) - 28usize];
    ["Offset of field: stmm_table::grow_factor"]
        [::std::mem::offset_of!(stmm_table, grow_factor) - 32usize];
    ["Offset of field: stmm_table::bins"][::std::mem::offset_of!(stmm_table, bins) - 40usize];
    ["Offset of field: stmm_table::pMemMan"][::std::mem::offset_of!(stmm_table, pMemMan) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stmm_generator {
    pub table: *mut stmm_table,
    pub entry: *mut stmm_table_entry,
    pub index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stmm_generator"][::std::mem::size_of::<stmm_generator>() - 24usize];
    ["Alignment of stmm_generator"][::std::mem::align_of::<stmm_generator>() - 8usize];
    ["Offset of field: stmm_generator::table"]
        [::std::mem::offset_of!(stmm_generator, table) - 0usize];
    ["Offset of field: stmm_generator::entry"]
        [::std::mem::offset_of!(stmm_generator, entry) - 8usize];
    ["Offset of field: stmm_generator::index"]
        [::std::mem::offset_of!(stmm_generator, index) - 16usize];
};
pub const stmm_retval_STMM_CONTINUE: stmm_retval = 0;
pub const stmm_retval_STMM_STOP: stmm_retval = 1;
pub const stmm_retval_STMM_DELETE: stmm_retval = 2;
pub type stmm_retval = ::std::os::raw::c_uint;
pub type STMM_PFSR = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> stmm_retval,
>;
extern "C" {
    pub fn stmm_init_table_with_params(
        compare: stmm_compare_func_type,
        hash: stmm_hash_func_type,
        size: ::std::os::raw::c_int,
        density: ::std::os::raw::c_int,
        grow_factor: f64,
        reorder_flag: ::std::os::raw::c_int,
    ) -> *mut stmm_table;
}
extern "C" {
    pub fn stmm_init_table(
        arg1: stmm_compare_func_type,
        arg2: stmm_hash_func_type,
    ) -> *mut stmm_table;
}
extern "C" {
    pub fn stmm_free_table(arg1: *mut stmm_table);
}
extern "C" {
    pub fn stmm_lookup(
        arg1: *mut stmm_table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_lookup_int(
        arg1: *mut stmm_table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_insert(
        arg1: *mut stmm_table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_add_direct(
        arg1: *mut stmm_table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_find_or_add(
        arg1: *mut stmm_table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_find(
        arg1: *mut stmm_table,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_copy(arg1: *mut stmm_table) -> *mut stmm_table;
}
extern "C" {
    pub fn stmm_delete(
        arg1: *mut stmm_table,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_delete_int(
        arg1: *mut stmm_table,
        arg2: *mut ::std::os::raw::c_long,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_foreach(
        arg1: *mut stmm_table,
        arg2: STMM_PFSR,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_strhash(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_numhash(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_ptrhash(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_numcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_ptrcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_init_gen(arg1: *mut stmm_table) -> *mut stmm_generator;
}
extern "C" {
    pub fn stmm_gen(
        arg1: *mut stmm_generator,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_gen_int(
        arg1: *mut stmm_generator,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stmm_free_gen(arg1: *mut stmm_generator);
}
extern "C" {
    pub fn stmm_clean(arg1: *mut stmm_table);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Nm_Man_t_ {
    _unused: [u8; 0],
}
pub type Nm_Man_t = Nm_Man_t_;
extern "C" {
    pub fn Nm_ManCreate(nSize: ::std::os::raw::c_int) -> *mut Nm_Man_t;
}
extern "C" {
    pub fn Nm_ManFree(p: *mut Nm_Man_t);
}
extern "C" {
    pub fn Nm_ManNumEntries(p: *mut Nm_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Nm_ManStoreIdName(
        p: *mut Nm_Man_t,
        ObjId: ::std::os::raw::c_int,
        Type: ::std::os::raw::c_int,
        pName: *mut ::std::os::raw::c_char,
        pSuffix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Nm_ManDeleteIdName(p: *mut Nm_Man_t, ObjId: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Nm_ManCreateUniqueName(
        p: *mut Nm_Man_t,
        ObjId: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Nm_ManFindNameById(
        p: *mut Nm_Man_t,
        ObjId: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Nm_ManFindIdByName(
        p: *mut Nm_Man_t,
        pName: *mut ::std::os::raw::c_char,
        Type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Nm_ManFindIdByNameTwoTypes(
        p: *mut Nm_Man_t,
        pName: *mut ::std::os::raw::c_char,
        Type1: ::std::os::raw::c_int,
        Type2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Nm_ManReturnNameIds(p: *mut Nm_Man_t) -> *mut Vec_Int_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mem_Fixed_t_ {
    _unused: [u8; 0],
}
pub type Mem_Fixed_t = Mem_Fixed_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mem_Flex_t_ {
    _unused: [u8; 0],
}
pub type Mem_Flex_t = Mem_Flex_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mem_Step_t_ {
    _unused: [u8; 0],
}
pub type Mem_Step_t = Mem_Step_t_;
extern "C" {
    pub fn Mem_FixedStart(nEntrySize: ::std::os::raw::c_int) -> *mut Mem_Fixed_t;
}
extern "C" {
    pub fn Mem_FixedStop(p: *mut Mem_Fixed_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Mem_FixedEntryFetch(p: *mut Mem_Fixed_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Mem_FixedEntryRecycle(p: *mut Mem_Fixed_t, pEntry: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Mem_FixedRestart(p: *mut Mem_Fixed_t);
}
extern "C" {
    pub fn Mem_FixedReadMemUsage(p: *mut Mem_Fixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Mem_FixedReadMaxEntriesUsed(p: *mut Mem_Fixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Mem_FlexStart() -> *mut Mem_Flex_t;
}
extern "C" {
    pub fn Mem_FlexStop(p: *mut Mem_Flex_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Mem_FlexStop2(p: *mut Mem_Flex_t);
}
extern "C" {
    pub fn Mem_FlexEntryFetch(
        p: *mut Mem_Flex_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Mem_FlexRestart(p: *mut Mem_Flex_t);
}
extern "C" {
    pub fn Mem_FlexReadMemUsage(p: *mut Mem_Flex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Mem_StepStart(nSteps: ::std::os::raw::c_int) -> *mut Mem_Step_t;
}
extern "C" {
    pub fn Mem_StepStop(p: *mut Mem_Step_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Mem_StepEntryFetch(
        p: *mut Mem_Step_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Mem_StepEntryRecycle(
        p: *mut Mem_Step_t,
        pEntry: *mut ::std::os::raw::c_char,
        nBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Mem_StepReadMemUsage(p: *mut Mem_Step_t) -> ::std::os::raw::c_int;
}
pub type uint8 = ::std::os::raw::c_uchar;
pub type uint16 = ::std::os::raw::c_ushort;
pub type uint32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Extra_BitMat_t_ {
    _unused: [u8; 0],
}
pub type Extra_BitMat_t = Extra_BitMat_t_;
extern "C" {
    pub fn Extra_BitMatrixStart(nSize: ::std::os::raw::c_int) -> *mut Extra_BitMat_t;
}
extern "C" {
    pub fn Extra_BitMatrixClean(p: *mut Extra_BitMat_t);
}
extern "C" {
    pub fn Extra_BitMatrixStop(p: *mut Extra_BitMat_t);
}
extern "C" {
    pub fn Extra_BitMatrixPrint(p: *mut Extra_BitMat_t);
}
extern "C" {
    pub fn Extra_BitMatrixReadSize(p: *mut Extra_BitMat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_BitMatrixInsert1(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_BitMatrixLookup1(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_BitMatrixDelete1(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_BitMatrixInsert2(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_BitMatrixLookup2(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_BitMatrixDelete2(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_BitMatrixOr(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        pInfo: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Extra_BitMatrixOrTwo(
        p: *mut Extra_BitMat_t,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_BitMatrixCountOnesUpper(p: *mut Extra_BitMat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_BitMatrixIsDisjoint(
        p1: *mut Extra_BitMat_t,
        p2: *mut Extra_BitMat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_BitMatrixIsClique(p: *mut Extra_BitMat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_FileGetSimilarName(
        pFileNameWrong: *mut ::std::os::raw::c_char,
        pS1: *mut ::std::os::raw::c_char,
        pS2: *mut ::std::os::raw::c_char,
        pS3: *mut ::std::os::raw::c_char,
        pS4: *mut ::std::os::raw::c_char,
        pS5: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileNameExtension(
        FileName: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileNameAppend(
        pBase: *mut ::std::os::raw::c_char,
        pSuffix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileNameGeneric(
        FileName: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileNameGenericAppend(
        pBase: *mut ::std::os::raw::c_char,
        pSuffix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileNameCorrectPath(FileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Extra_FileNameWithoutPath(
        FileName: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FilePathWithoutName(
        FileName: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileInTheSameDir(
        pPathFile: *mut ::std::os::raw::c_char,
        pFileName: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileDesignName(
        pFileName: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileCheck(pFileName: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_FileSize(pFileName: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_FileRead(pFile: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileRead2(pFile: *mut FILE, pFile2: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileReadContents(
        pFileName: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileReadContents2(
        pFileName: *mut ::std::os::raw::c_char,
        pFileName2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileIsType(
        pFileName: *mut ::std::os::raw::c_char,
        pS1: *mut ::std::os::raw::c_char,
        pS2: *mut ::std::os::raw::c_char,
        pS3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_TimeStamp() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_StringAppend(
        pStrGiven: *mut ::std::os::raw::c_char,
        pStrAdd: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_StringClean(
        pStrGiven: *mut ::std::os::raw::c_char,
        pCharKeep: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Extra_ReadBinary(Buffer: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_PrintBinary(
        pFile: *mut FILE,
        Sign: *mut ::std::os::raw::c_uint,
        nBits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_PrintBinary2(
        pFile: *mut FILE,
        Sign: *mut ::std::os::raw::c_uint,
        nBits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_ReadHex(
        Sign: *mut ::std::os::raw::c_uint,
        pString: *mut ::std::os::raw::c_char,
        nDigits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_ReadHexadecimal(
        Sign: *mut ::std::os::raw::c_uint,
        pString: *mut ::std::os::raw::c_char,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_PrintHexadecimal(
        pFile: *mut FILE,
        Sign: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_PrintHexadecimalString(
        pString: *mut ::std::os::raw::c_char,
        Sign: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_PrintHex(
        pFile: *mut FILE,
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_PrintHex2(
        pFile: *mut FILE,
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_PrintHexReverse(
        pFile: *mut FILE,
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_PrintSymbols(
        pFile: *mut FILE,
        Char: ::std::os::raw::c_char,
        nTimes: ::std::os::raw::c_int,
        fPrintNewLine: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Extra_FileReader_t_ {
    _unused: [u8; 0],
}
pub type Extra_FileReader_t = Extra_FileReader_t_;
extern "C" {
    pub fn Extra_FileReaderAlloc(
        pFileName: *mut ::std::os::raw::c_char,
        pCharsComment: *mut ::std::os::raw::c_char,
        pCharsStop: *mut ::std::os::raw::c_char,
        pCharsClean: *mut ::std::os::raw::c_char,
    ) -> *mut Extra_FileReader_t;
}
extern "C" {
    pub fn Extra_FileReaderFree(p: *mut Extra_FileReader_t);
}
extern "C" {
    pub fn Extra_FileReaderGetFileName(p: *mut Extra_FileReader_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_FileReaderGetFileSize(p: *mut Extra_FileReader_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_FileReaderGetCurPosition(p: *mut Extra_FileReader_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_FileReaderGetTokens(p: *mut Extra_FileReader_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Extra_FileReaderGetLineNumber(
        p: *mut Extra_FileReader_t,
        iToken: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Extra_MmFixed_t_ {
    _unused: [u8; 0],
}
pub type Extra_MmFixed_t = Extra_MmFixed_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Extra_MmFlex_t_ {
    _unused: [u8; 0],
}
pub type Extra_MmFlex_t = Extra_MmFlex_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Extra_MmStep_t_ {
    _unused: [u8; 0],
}
pub type Extra_MmStep_t = Extra_MmStep_t_;
extern "C" {
    pub fn Extra_MmFixedStart(nEntrySize: ::std::os::raw::c_int) -> *mut Extra_MmFixed_t;
}
extern "C" {
    pub fn Extra_MmFixedStop(p: *mut Extra_MmFixed_t);
}
extern "C" {
    pub fn Extra_MmFixedEntryFetch(p: *mut Extra_MmFixed_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_MmFixedEntryRecycle(p: *mut Extra_MmFixed_t, pEntry: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Extra_MmFixedRestart(p: *mut Extra_MmFixed_t);
}
extern "C" {
    pub fn Extra_MmFixedReadMemUsage(p: *mut Extra_MmFixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_MmFixedReadMaxEntriesUsed(p: *mut Extra_MmFixed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_MmFlexStart() -> *mut Extra_MmFlex_t;
}
extern "C" {
    pub fn Extra_MmFlexStop(p: *mut Extra_MmFlex_t);
}
extern "C" {
    pub fn Extra_MmFlexPrint(p: *mut Extra_MmFlex_t);
}
extern "C" {
    pub fn Extra_MmFlexEntryFetch(
        p: *mut Extra_MmFlex_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_MmFlexReadMemUsage(p: *mut Extra_MmFlex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_MmStepStart(nSteps: ::std::os::raw::c_int) -> *mut Extra_MmStep_t;
}
extern "C" {
    pub fn Extra_MmStepStop(p: *mut Extra_MmStep_t);
}
extern "C" {
    pub fn Extra_MmStepEntryFetch(
        p: *mut Extra_MmStep_t,
        nBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_MmStepEntryRecycle(
        p: *mut Extra_MmStep_t,
        pEntry: *mut ::std::os::raw::c_char,
        nBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_MmStepReadMemUsage(p: *mut Extra_MmStep_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_Base2LogDouble(Num: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_Power2(Num: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn Extra_Power3(Num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_NumCombinations(
        k: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_DeriveRadixCode(
        Number: ::std::os::raw::c_int,
        Radix: ::std::os::raw::c_int,
        nDigits: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_CountOnes(
        pBytes: *mut ::std::os::raw::c_uchar,
        nBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_Factorial(n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_Permutations(n: ::std::os::raw::c_int) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_TruthPermute(
        Truth: ::std::os::raw::c_uint,
        pPerms: *mut ::std::os::raw::c_char,
        nVars: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthPolarize(
        uTruth: ::std::os::raw::c_uint,
        Polarity: ::std::os::raw::c_int,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthCanonN(
        uTruth: ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthCanonNN(
        uTruth: ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthCanonP(
        uTruth: ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthCanonNP(
        uTruth: ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthCanonNPN(
        uTruth: ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_Truth4VarNPN(
        puCanons: *mut *mut ::std::os::raw::c_ushort,
        puPhases: *mut *mut ::std::os::raw::c_char,
        puPerms: *mut *mut ::std::os::raw::c_char,
        puMap: *mut *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn Extra_Truth4VarN(
        puCanons: *mut *mut ::std::os::raw::c_ushort,
        puPhases: *mut *mut *mut ::std::os::raw::c_char,
        ppCounters: *mut *mut ::std::os::raw::c_char,
        nPhasesMax: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthPerm4One(
        uTruth: ::std::os::raw::c_uint,
        Phase: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn Extra_TruthPerm5One(
        uTruth: ::std::os::raw::c_uint,
        Phase: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthPerm6One(
        uTruth: *mut ::std::os::raw::c_uint,
        Phase: ::std::os::raw::c_int,
        uTruthRes: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Extra_TruthExpand(
        nVars: ::std::os::raw::c_int,
        nWords: ::std::os::raw::c_int,
        puTruth: *mut ::std::os::raw::c_uint,
        uPhase: ::std::os::raw::c_uint,
        puTruthR: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Extra_ArrayAlloc(
        nCols: ::std::os::raw::c_int,
        nRows: ::std::os::raw::c_int,
        Size: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Extra_TruthPerm43() -> *mut *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn Extra_TruthPerm53() -> *mut *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthPerm54() -> *mut *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_BubbleSort(
        Order: *mut ::std::os::raw::c_int,
        Costs: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        fIncreasing: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_GreyCodeSchedule(n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_PermSchedule(n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_Truth6MinimumExact(
        t: word,
        pComp: *mut ::std::os::raw::c_int,
        pPerm: *mut ::std::os::raw::c_int,
    ) -> word;
}
extern "C" {
    pub fn Extra_Truth6MinimumHeuristic(t: word) -> word;
}
extern "C" {
    pub fn Extra_TruthCanonFastN(
        nVarsMax: ::std::os::raw::c_int,
        nVarsReal: ::std::os::raw::c_int,
        pt: *mut ::std::os::raw::c_uint,
        pptRes: *mut *mut ::std::os::raw::c_uint,
        ppfRes: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sdm_Man_t_ {
    _unused: [u8; 0],
}
pub type Sdm_Man_t = Sdm_Man_t_;
extern "C" {
    pub fn Sdm_ManCanRead() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sdm_ManRead() -> *mut Sdm_Man_t;
}
extern "C" {
    pub fn Sdm_ManQuit();
}
extern "C" {
    pub fn Sdm_ManComputeFunc(
        p: *mut Sdm_Man_t,
        iDsdLit0: ::std::os::raw::c_int,
        iDsdLit1: ::std::os::raw::c_int,
        pCut: *mut ::std::os::raw::c_int,
        uMask: ::std::os::raw::c_int,
        fXor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sdm_ManPrintDsdStats(p: *mut Sdm_Man_t, fVerbose: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Sdm_ManReadDsdVarNum(
        p: *mut Sdm_Man_t,
        iDsd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sdm_ManReadDsdAndNum(
        p: *mut Sdm_Man_t,
        iDsd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sdm_ManReadDsdClauseNum(
        p: *mut Sdm_Man_t,
        iDsd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sdm_ManReadDsdTruth(p: *mut Sdm_Man_t, iDsd: ::std::os::raw::c_int) -> word;
}
extern "C" {
    pub fn Sdm_ManReadDsdStr(
        p: *mut Sdm_Man_t,
        iDsd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Sdm_ManReadCnfCosts(
        p: *mut Sdm_Man_t,
        pCosts: *mut ::std::os::raw::c_int,
        nCosts: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProgressBarStruct {
    _unused: [u8; 0],
}
pub type ProgressBar = ProgressBarStruct;
extern "C" {
    pub fn Extra_ProgressBarStart(
        pFile: *mut FILE,
        nItemsTotal: ::std::os::raw::c_int,
    ) -> *mut ProgressBar;
}
extern "C" {
    pub fn Extra_ProgressBarStop(p: *mut ProgressBar);
}
extern "C" {
    pub fn Extra_ProgressBarUpdate_int(
        p: *mut ProgressBar,
        nItemsCur: ::std::os::raw::c_int,
        pString: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "Extra_ProgressBarUpdate_imctk_abc_sys"]
    pub fn Extra_ProgressBarUpdate(
        p: *mut ProgressBar,
        nItemsCur: ::std::os::raw::c_int,
        pString: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "Extra_BitWordNum_imctk_abc_sys"]
    pub fn Extra_BitWordNum(nBits: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthWordNum_imctk_abc_sys"]
    pub fn Extra_TruthWordNum(nVars: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthSetBit_imctk_abc_sys"]
    pub fn Extra_TruthSetBit(p: *mut ::std::os::raw::c_uint, Bit: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Extra_TruthXorBit_imctk_abc_sys"]
    pub fn Extra_TruthXorBit(p: *mut ::std::os::raw::c_uint, Bit: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Extra_TruthHasBit_imctk_abc_sys"]
    pub fn Extra_TruthHasBit(
        p: *mut ::std::os::raw::c_uint,
        Bit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_WordCountOnes_imctk_abc_sys"]
    pub fn Extra_WordCountOnes(uWord: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthCountOnes_imctk_abc_sys"]
    pub fn Extra_TruthCountOnes(
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthIsEqual_imctk_abc_sys"]
    pub fn Extra_TruthIsEqual(
        pIn0: *mut ::std::os::raw::c_uint,
        pIn1: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthIsConst0_imctk_abc_sys"]
    pub fn Extra_TruthIsConst0(
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthIsConst1_imctk_abc_sys"]
    pub fn Extra_TruthIsConst1(
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthIsImply_imctk_abc_sys"]
    pub fn Extra_TruthIsImply(
        pIn1: *mut ::std::os::raw::c_uint,
        pIn2: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Extra_TruthCopy_imctk_abc_sys"]
    pub fn Extra_TruthCopy(
        pOut: *mut ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Extra_TruthClear_imctk_abc_sys"]
    pub fn Extra_TruthClear(pOut: *mut ::std::os::raw::c_uint, nVars: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Extra_TruthFill_imctk_abc_sys"]
    pub fn Extra_TruthFill(pOut: *mut ::std::os::raw::c_uint, nVars: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Extra_TruthNot_imctk_abc_sys"]
    pub fn Extra_TruthNot(
        pOut: *mut ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Extra_TruthAnd_imctk_abc_sys"]
    pub fn Extra_TruthAnd(
        pOut: *mut ::std::os::raw::c_uint,
        pIn0: *mut ::std::os::raw::c_uint,
        pIn1: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Extra_TruthOr_imctk_abc_sys"]
    pub fn Extra_TruthOr(
        pOut: *mut ::std::os::raw::c_uint,
        pIn0: *mut ::std::os::raw::c_uint,
        pIn1: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Extra_TruthSharp_imctk_abc_sys"]
    pub fn Extra_TruthSharp(
        pOut: *mut ::std::os::raw::c_uint,
        pIn0: *mut ::std::os::raw::c_uint,
        pIn1: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Extra_TruthNand_imctk_abc_sys"]
    pub fn Extra_TruthNand(
        pOut: *mut ::std::os::raw::c_uint,
        pIn0: *mut ::std::os::raw::c_uint,
        pIn1: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Extra_TruthAndPhase_imctk_abc_sys"]
    pub fn Extra_TruthAndPhase(
        pOut: *mut ::std::os::raw::c_uint,
        pIn0: *mut ::std::os::raw::c_uint,
        pIn1: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        fCompl0: ::std::os::raw::c_int,
        fCompl1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthElementary(nVars: ::std::os::raw::c_int) -> *mut *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthSwapAdjacentVars(
        pOut: *mut ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        Start: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthStretch(
        pOut: *mut ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        nVarsAll: ::std::os::raw::c_int,
        Phase: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Extra_TruthShrink(
        pOut: *mut ::std::os::raw::c_uint,
        pIn: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        nVarsAll: ::std::os::raw::c_int,
        Phase: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Extra_TruthVarInSupport(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        iVar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_TruthSupportSize(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_TruthSupport(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_TruthCofactor0(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        iVar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthCofactor1(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        iVar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthExist(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        iVar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthForall(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        iVar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthMux(
        pOut: *mut ::std::os::raw::c_uint,
        pCof0: *mut ::std::os::raw::c_uint,
        pCof1: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        iVar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthChangePhase(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        iVar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Extra_TruthMinCofSuppOverlap(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        pVarMin: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_TruthCountOnesInCofs(
        pTruth: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        pStore: *mut ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn Extra_TruthHash(
        pIn: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_TruthSemiCanonicize(
        pInOut: *mut ::std::os::raw::c_uint,
        pAux: *mut ::std::os::raw::c_uint,
        nVars: ::std::os::raw::c_int,
        pCanonPerm: *mut ::std::os::raw::c_char,
        pStore: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Extra_CpuTime() -> abctime;
}
extern "C" {
    pub fn Extra_CpuTimeDouble() -> f64;
}
extern "C" {
    pub fn Extra_GetSoftDataLimit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_UtilGetoptReset();
}
extern "C" {
    pub fn Extra_UtilGetopt(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        optstring: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Extra_UtilPrintTime(t: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_UtilStrsav(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_UtilTildeExpand(fname: *mut ::std::os::raw::c_char)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Extra_UtilFileSearch(
        file: *mut ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_char,
        mode: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut Extra_UtilMMoutOfMemory:
        ::std::option::Option<unsafe extern "C" fn(size: ::std::os::raw::c_long)>;
}
extern "C" {
    pub static mut globalUtilOptarg: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut globalUtilOptind: ::std::os::raw::c_int;
}
pub const Abc_NtkType_t_ABC_NTK_NONE: Abc_NtkType_t = 0;
pub const Abc_NtkType_t_ABC_NTK_NETLIST: Abc_NtkType_t = 1;
pub const Abc_NtkType_t_ABC_NTK_LOGIC: Abc_NtkType_t = 2;
pub const Abc_NtkType_t_ABC_NTK_STRASH: Abc_NtkType_t = 3;
pub const Abc_NtkType_t_ABC_NTK_OTHER: Abc_NtkType_t = 4;
pub type Abc_NtkType_t = ::std::os::raw::c_uint;
pub const Abc_NtkFunc_t_ABC_FUNC_NONE: Abc_NtkFunc_t = 0;
pub const Abc_NtkFunc_t_ABC_FUNC_SOP: Abc_NtkFunc_t = 1;
pub const Abc_NtkFunc_t_ABC_FUNC_BDD: Abc_NtkFunc_t = 2;
pub const Abc_NtkFunc_t_ABC_FUNC_AIG: Abc_NtkFunc_t = 3;
pub const Abc_NtkFunc_t_ABC_FUNC_MAP: Abc_NtkFunc_t = 4;
pub const Abc_NtkFunc_t_ABC_FUNC_BLIFMV: Abc_NtkFunc_t = 5;
pub const Abc_NtkFunc_t_ABC_FUNC_BLACKBOX: Abc_NtkFunc_t = 6;
pub const Abc_NtkFunc_t_ABC_FUNC_OTHER: Abc_NtkFunc_t = 7;
pub type Abc_NtkFunc_t = ::std::os::raw::c_uint;
pub const Abc_ObjType_t_ABC_OBJ_NONE: Abc_ObjType_t = 0;
pub const Abc_ObjType_t_ABC_OBJ_CONST1: Abc_ObjType_t = 1;
pub const Abc_ObjType_t_ABC_OBJ_PI: Abc_ObjType_t = 2;
pub const Abc_ObjType_t_ABC_OBJ_PO: Abc_ObjType_t = 3;
pub const Abc_ObjType_t_ABC_OBJ_BI: Abc_ObjType_t = 4;
pub const Abc_ObjType_t_ABC_OBJ_BO: Abc_ObjType_t = 5;
pub const Abc_ObjType_t_ABC_OBJ_NET: Abc_ObjType_t = 6;
pub const Abc_ObjType_t_ABC_OBJ_NODE: Abc_ObjType_t = 7;
pub const Abc_ObjType_t_ABC_OBJ_LATCH: Abc_ObjType_t = 8;
pub const Abc_ObjType_t_ABC_OBJ_WHITEBOX: Abc_ObjType_t = 9;
pub const Abc_ObjType_t_ABC_OBJ_BLACKBOX: Abc_ObjType_t = 10;
pub const Abc_ObjType_t_ABC_OBJ_NUMBER: Abc_ObjType_t = 11;
pub type Abc_ObjType_t = ::std::os::raw::c_uint;
pub const Abc_InitType_t_ABC_INIT_NONE: Abc_InitType_t = 0;
pub const Abc_InitType_t_ABC_INIT_ZERO: Abc_InitType_t = 1;
pub const Abc_InitType_t_ABC_INIT_ONE: Abc_InitType_t = 2;
pub const Abc_InitType_t_ABC_INIT_DC: Abc_InitType_t = 3;
pub const Abc_InitType_t_ABC_INIT_OTHER: Abc_InitType_t = 4;
pub type Abc_InitType_t = ::std::os::raw::c_uint;
pub type Abc_Des_t = Abc_Des_t_;
pub type Abc_Ntk_t = Abc_Ntk_t_;
pub type Abc_Obj_t = Abc_Obj_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_Aig_t_ {
    _unused: [u8; 0],
}
pub type Abc_Aig_t = Abc_Aig_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_ManTime_t_ {
    _unused: [u8; 0],
}
pub type Abc_ManTime_t = Abc_ManTime_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_ManCut_t_ {
    _unused: [u8; 0],
}
pub type Abc_ManCut_t = Abc_ManCut_t_;
pub type Abc_Time_t = Abc_Time_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_Time_t_ {
    pub Rise: f32,
    pub Fall: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Abc_Time_t_"][::std::mem::size_of::<Abc_Time_t_>() - 8usize];
    ["Alignment of Abc_Time_t_"][::std::mem::align_of::<Abc_Time_t_>() - 4usize];
    ["Offset of field: Abc_Time_t_::Rise"][::std::mem::offset_of!(Abc_Time_t_, Rise) - 0usize];
    ["Offset of field: Abc_Time_t_::Fall"][::std::mem::offset_of!(Abc_Time_t_, Fall) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Abc_Obj_t_ {
    pub pNtk: *mut Abc_Ntk_t,
    pub pNext: *mut Abc_Obj_t,
    pub Id: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub vFanins: Vec_Int_t,
    pub vFanouts: Vec_Int_t,
    pub __bindgen_anon_1: Abc_Obj_t___bindgen_ty_1,
    pub __bindgen_anon_2: Abc_Obj_t___bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Abc_Obj_t___bindgen_ty_1 {
    pub pData: *mut ::std::os::raw::c_void,
    pub iData: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Abc_Obj_t___bindgen_ty_1"]
        [::std::mem::size_of::<Abc_Obj_t___bindgen_ty_1>() - 8usize];
    ["Alignment of Abc_Obj_t___bindgen_ty_1"]
        [::std::mem::align_of::<Abc_Obj_t___bindgen_ty_1>() - 8usize];
    ["Offset of field: Abc_Obj_t___bindgen_ty_1::pData"]
        [::std::mem::offset_of!(Abc_Obj_t___bindgen_ty_1, pData) - 0usize];
    ["Offset of field: Abc_Obj_t___bindgen_ty_1::iData"]
        [::std::mem::offset_of!(Abc_Obj_t___bindgen_ty_1, iData) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Abc_Obj_t___bindgen_ty_2 {
    pub pTemp: *mut ::std::os::raw::c_void,
    pub pCopy: *mut Abc_Obj_t,
    pub iTemp: ::std::os::raw::c_int,
    pub dTemp: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Abc_Obj_t___bindgen_ty_2"]
        [::std::mem::size_of::<Abc_Obj_t___bindgen_ty_2>() - 8usize];
    ["Alignment of Abc_Obj_t___bindgen_ty_2"]
        [::std::mem::align_of::<Abc_Obj_t___bindgen_ty_2>() - 8usize];
    ["Offset of field: Abc_Obj_t___bindgen_ty_2::pTemp"]
        [::std::mem::offset_of!(Abc_Obj_t___bindgen_ty_2, pTemp) - 0usize];
    ["Offset of field: Abc_Obj_t___bindgen_ty_2::pCopy"]
        [::std::mem::offset_of!(Abc_Obj_t___bindgen_ty_2, pCopy) - 0usize];
    ["Offset of field: Abc_Obj_t___bindgen_ty_2::iTemp"]
        [::std::mem::offset_of!(Abc_Obj_t___bindgen_ty_2, iTemp) - 0usize];
    ["Offset of field: Abc_Obj_t___bindgen_ty_2::dTemp"]
        [::std::mem::offset_of!(Abc_Obj_t___bindgen_ty_2, dTemp) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Abc_Obj_t_"][::std::mem::size_of::<Abc_Obj_t_>() - 72usize];
    ["Alignment of Abc_Obj_t_"][::std::mem::align_of::<Abc_Obj_t_>() - 8usize];
    ["Offset of field: Abc_Obj_t_::pNtk"][::std::mem::offset_of!(Abc_Obj_t_, pNtk) - 0usize];
    ["Offset of field: Abc_Obj_t_::pNext"][::std::mem::offset_of!(Abc_Obj_t_, pNext) - 8usize];
    ["Offset of field: Abc_Obj_t_::Id"][::std::mem::offset_of!(Abc_Obj_t_, Id) - 16usize];
    ["Offset of field: Abc_Obj_t_::vFanins"][::std::mem::offset_of!(Abc_Obj_t_, vFanins) - 24usize];
    ["Offset of field: Abc_Obj_t_::vFanouts"]
        [::std::mem::offset_of!(Abc_Obj_t_, vFanouts) - 40usize];
};
impl Abc_Obj_t_ {
    #[inline]
    pub fn Type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_Type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn fMarkA(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMarkA(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMarkB(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMarkB(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fMarkC(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fMarkC(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fPhase(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fPhase(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fExor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fExor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fPersist(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fPersist(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fCompl0(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fCompl0(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fCompl1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fCompl1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Level(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_Level(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Type: ::std::os::raw::c_uint,
        fMarkA: ::std::os::raw::c_uint,
        fMarkB: ::std::os::raw::c_uint,
        fMarkC: ::std::os::raw::c_uint,
        fPhase: ::std::os::raw::c_uint,
        fExor: ::std::os::raw::c_uint,
        fPersist: ::std::os::raw::c_uint,
        fCompl0: ::std::os::raw::c_uint,
        fCompl1: ::std::os::raw::c_uint,
        Level: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let Type: u32 = unsafe { ::std::mem::transmute(Type) };
            Type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let fMarkA: u32 = unsafe { ::std::mem::transmute(fMarkA) };
            fMarkA as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let fMarkB: u32 = unsafe { ::std::mem::transmute(fMarkB) };
            fMarkB as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fMarkC: u32 = unsafe { ::std::mem::transmute(fMarkC) };
            fMarkC as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let fPhase: u32 = unsafe { ::std::mem::transmute(fPhase) };
            fPhase as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fExor: u32 = unsafe { ::std::mem::transmute(fExor) };
            fExor as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let fPersist: u32 = unsafe { ::std::mem::transmute(fPersist) };
            fPersist as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let fCompl0: u32 = unsafe { ::std::mem::transmute(fCompl0) };
            fCompl0 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let fCompl1: u32 = unsafe { ::std::mem::transmute(fCompl1) };
            fCompl1 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let Level: u32 = unsafe { ::std::mem::transmute(Level) };
            Level as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_Ntk_t_ {
    pub ntkType: Abc_NtkType_t,
    pub ntkFunc: Abc_NtkFunc_t,
    pub pName: *mut ::std::os::raw::c_char,
    pub pSpec: *mut ::std::os::raw::c_char,
    pub pManName: *mut Nm_Man_t,
    pub vObjs: *mut Vec_Ptr_t,
    pub vPis: *mut Vec_Ptr_t,
    pub vPos: *mut Vec_Ptr_t,
    pub vCis: *mut Vec_Ptr_t,
    pub vCos: *mut Vec_Ptr_t,
    pub vPios: *mut Vec_Ptr_t,
    pub vBoxes: *mut Vec_Ptr_t,
    pub vLtlProperties: *mut Vec_Ptr_t,
    pub nObjCounts: [::std::os::raw::c_int; 11usize],
    pub nObjs: ::std::os::raw::c_int,
    pub nConstrs: ::std::os::raw::c_int,
    pub nBarBufs: ::std::os::raw::c_int,
    pub nBarBufs2: ::std::os::raw::c_int,
    pub pNetBackup: *mut Abc_Ntk_t,
    pub iStep: ::std::os::raw::c_int,
    pub pDesign: *mut Abc_Des_t,
    pub pAltView: *mut Abc_Ntk_t,
    pub fHieVisited: ::std::os::raw::c_int,
    pub fHiePath: ::std::os::raw::c_int,
    pub Id: ::std::os::raw::c_int,
    pub dTemp: f64,
    pub nTravIds: ::std::os::raw::c_int,
    pub vTravIds: Vec_Int_t,
    pub pMmObj: *mut Mem_Fixed_t,
    pub pMmStep: *mut Mem_Step_t,
    pub pManFunc: *mut ::std::os::raw::c_void,
    pub pManTime: *mut Abc_ManTime_t,
    pub pManCut: *mut ::std::os::raw::c_void,
    pub AndGateDelay: f32,
    pub LevelMax: ::std::os::raw::c_int,
    pub vLevelsR: *mut Vec_Int_t,
    pub vSupps: *mut Vec_Ptr_t,
    pub pModel: *mut ::std::os::raw::c_int,
    pub pSeqModel: *mut Abc_Cex_t,
    pub vSeqModelVec: *mut Vec_Ptr_t,
    pub pExdc: *mut Abc_Ntk_t,
    pub pExcare: *mut ::std::os::raw::c_void,
    pub pData: *mut ::std::os::raw::c_void,
    pub pCopy: *mut Abc_Ntk_t,
    pub pBSMan: *mut ::std::os::raw::c_void,
    pub pSCLib: *mut ::std::os::raw::c_void,
    pub vGates: *mut Vec_Int_t,
    pub vPhases: *mut Vec_Int_t,
    pub pWLoadUsed: *mut ::std::os::raw::c_char,
    pub pLutTimes: *mut f32,
    pub vOnehots: *mut Vec_Ptr_t,
    pub vObjPerm: *mut Vec_Int_t,
    pub vTopo: *mut Vec_Int_t,
    pub vAttrs: *mut Vec_Ptr_t,
    pub vNameIds: *mut Vec_Int_t,
    pub vFins: *mut Vec_Int_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Abc_Ntk_t_"][::std::mem::size_of::<Abc_Ntk_t_>() - 456usize];
    ["Alignment of Abc_Ntk_t_"][::std::mem::align_of::<Abc_Ntk_t_>() - 8usize];
    ["Offset of field: Abc_Ntk_t_::ntkType"][::std::mem::offset_of!(Abc_Ntk_t_, ntkType) - 0usize];
    ["Offset of field: Abc_Ntk_t_::ntkFunc"][::std::mem::offset_of!(Abc_Ntk_t_, ntkFunc) - 4usize];
    ["Offset of field: Abc_Ntk_t_::pName"][::std::mem::offset_of!(Abc_Ntk_t_, pName) - 8usize];
    ["Offset of field: Abc_Ntk_t_::pSpec"][::std::mem::offset_of!(Abc_Ntk_t_, pSpec) - 16usize];
    ["Offset of field: Abc_Ntk_t_::pManName"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pManName) - 24usize];
    ["Offset of field: Abc_Ntk_t_::vObjs"][::std::mem::offset_of!(Abc_Ntk_t_, vObjs) - 32usize];
    ["Offset of field: Abc_Ntk_t_::vPis"][::std::mem::offset_of!(Abc_Ntk_t_, vPis) - 40usize];
    ["Offset of field: Abc_Ntk_t_::vPos"][::std::mem::offset_of!(Abc_Ntk_t_, vPos) - 48usize];
    ["Offset of field: Abc_Ntk_t_::vCis"][::std::mem::offset_of!(Abc_Ntk_t_, vCis) - 56usize];
    ["Offset of field: Abc_Ntk_t_::vCos"][::std::mem::offset_of!(Abc_Ntk_t_, vCos) - 64usize];
    ["Offset of field: Abc_Ntk_t_::vPios"][::std::mem::offset_of!(Abc_Ntk_t_, vPios) - 72usize];
    ["Offset of field: Abc_Ntk_t_::vBoxes"][::std::mem::offset_of!(Abc_Ntk_t_, vBoxes) - 80usize];
    ["Offset of field: Abc_Ntk_t_::vLtlProperties"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vLtlProperties) - 88usize];
    ["Offset of field: Abc_Ntk_t_::nObjCounts"]
        [::std::mem::offset_of!(Abc_Ntk_t_, nObjCounts) - 96usize];
    ["Offset of field: Abc_Ntk_t_::nObjs"][::std::mem::offset_of!(Abc_Ntk_t_, nObjs) - 140usize];
    ["Offset of field: Abc_Ntk_t_::nConstrs"]
        [::std::mem::offset_of!(Abc_Ntk_t_, nConstrs) - 144usize];
    ["Offset of field: Abc_Ntk_t_::nBarBufs"]
        [::std::mem::offset_of!(Abc_Ntk_t_, nBarBufs) - 148usize];
    ["Offset of field: Abc_Ntk_t_::nBarBufs2"]
        [::std::mem::offset_of!(Abc_Ntk_t_, nBarBufs2) - 152usize];
    ["Offset of field: Abc_Ntk_t_::pNetBackup"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pNetBackup) - 160usize];
    ["Offset of field: Abc_Ntk_t_::iStep"][::std::mem::offset_of!(Abc_Ntk_t_, iStep) - 168usize];
    ["Offset of field: Abc_Ntk_t_::pDesign"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pDesign) - 176usize];
    ["Offset of field: Abc_Ntk_t_::pAltView"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pAltView) - 184usize];
    ["Offset of field: Abc_Ntk_t_::fHieVisited"]
        [::std::mem::offset_of!(Abc_Ntk_t_, fHieVisited) - 192usize];
    ["Offset of field: Abc_Ntk_t_::fHiePath"]
        [::std::mem::offset_of!(Abc_Ntk_t_, fHiePath) - 196usize];
    ["Offset of field: Abc_Ntk_t_::Id"][::std::mem::offset_of!(Abc_Ntk_t_, Id) - 200usize];
    ["Offset of field: Abc_Ntk_t_::dTemp"][::std::mem::offset_of!(Abc_Ntk_t_, dTemp) - 208usize];
    ["Offset of field: Abc_Ntk_t_::nTravIds"]
        [::std::mem::offset_of!(Abc_Ntk_t_, nTravIds) - 216usize];
    ["Offset of field: Abc_Ntk_t_::vTravIds"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vTravIds) - 224usize];
    ["Offset of field: Abc_Ntk_t_::pMmObj"][::std::mem::offset_of!(Abc_Ntk_t_, pMmObj) - 240usize];
    ["Offset of field: Abc_Ntk_t_::pMmStep"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pMmStep) - 248usize];
    ["Offset of field: Abc_Ntk_t_::pManFunc"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pManFunc) - 256usize];
    ["Offset of field: Abc_Ntk_t_::pManTime"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pManTime) - 264usize];
    ["Offset of field: Abc_Ntk_t_::pManCut"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pManCut) - 272usize];
    ["Offset of field: Abc_Ntk_t_::AndGateDelay"]
        [::std::mem::offset_of!(Abc_Ntk_t_, AndGateDelay) - 280usize];
    ["Offset of field: Abc_Ntk_t_::LevelMax"]
        [::std::mem::offset_of!(Abc_Ntk_t_, LevelMax) - 284usize];
    ["Offset of field: Abc_Ntk_t_::vLevelsR"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vLevelsR) - 288usize];
    ["Offset of field: Abc_Ntk_t_::vSupps"][::std::mem::offset_of!(Abc_Ntk_t_, vSupps) - 296usize];
    ["Offset of field: Abc_Ntk_t_::pModel"][::std::mem::offset_of!(Abc_Ntk_t_, pModel) - 304usize];
    ["Offset of field: Abc_Ntk_t_::pSeqModel"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pSeqModel) - 312usize];
    ["Offset of field: Abc_Ntk_t_::vSeqModelVec"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vSeqModelVec) - 320usize];
    ["Offset of field: Abc_Ntk_t_::pExdc"][::std::mem::offset_of!(Abc_Ntk_t_, pExdc) - 328usize];
    ["Offset of field: Abc_Ntk_t_::pExcare"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pExcare) - 336usize];
    ["Offset of field: Abc_Ntk_t_::pData"][::std::mem::offset_of!(Abc_Ntk_t_, pData) - 344usize];
    ["Offset of field: Abc_Ntk_t_::pCopy"][::std::mem::offset_of!(Abc_Ntk_t_, pCopy) - 352usize];
    ["Offset of field: Abc_Ntk_t_::pBSMan"][::std::mem::offset_of!(Abc_Ntk_t_, pBSMan) - 360usize];
    ["Offset of field: Abc_Ntk_t_::pSCLib"][::std::mem::offset_of!(Abc_Ntk_t_, pSCLib) - 368usize];
    ["Offset of field: Abc_Ntk_t_::vGates"][::std::mem::offset_of!(Abc_Ntk_t_, vGates) - 376usize];
    ["Offset of field: Abc_Ntk_t_::vPhases"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vPhases) - 384usize];
    ["Offset of field: Abc_Ntk_t_::pWLoadUsed"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pWLoadUsed) - 392usize];
    ["Offset of field: Abc_Ntk_t_::pLutTimes"]
        [::std::mem::offset_of!(Abc_Ntk_t_, pLutTimes) - 400usize];
    ["Offset of field: Abc_Ntk_t_::vOnehots"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vOnehots) - 408usize];
    ["Offset of field: Abc_Ntk_t_::vObjPerm"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vObjPerm) - 416usize];
    ["Offset of field: Abc_Ntk_t_::vTopo"][::std::mem::offset_of!(Abc_Ntk_t_, vTopo) - 424usize];
    ["Offset of field: Abc_Ntk_t_::vAttrs"][::std::mem::offset_of!(Abc_Ntk_t_, vAttrs) - 432usize];
    ["Offset of field: Abc_Ntk_t_::vNameIds"]
        [::std::mem::offset_of!(Abc_Ntk_t_, vNameIds) - 440usize];
    ["Offset of field: Abc_Ntk_t_::vFins"][::std::mem::offset_of!(Abc_Ntk_t_, vFins) - 448usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_Des_t_ {
    pub pName: *mut ::std::os::raw::c_char,
    pub pManFunc: *mut ::std::os::raw::c_void,
    pub vTops: *mut Vec_Ptr_t,
    pub vModules: *mut Vec_Ptr_t,
    pub tModules: *mut st__table,
    pub pLibrary: *mut Abc_Des_t,
    pub pGenlib: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Abc_Des_t_"][::std::mem::size_of::<Abc_Des_t_>() - 56usize];
    ["Alignment of Abc_Des_t_"][::std::mem::align_of::<Abc_Des_t_>() - 8usize];
    ["Offset of field: Abc_Des_t_::pName"][::std::mem::offset_of!(Abc_Des_t_, pName) - 0usize];
    ["Offset of field: Abc_Des_t_::pManFunc"]
        [::std::mem::offset_of!(Abc_Des_t_, pManFunc) - 8usize];
    ["Offset of field: Abc_Des_t_::vTops"][::std::mem::offset_of!(Abc_Des_t_, vTops) - 16usize];
    ["Offset of field: Abc_Des_t_::vModules"]
        [::std::mem::offset_of!(Abc_Des_t_, vModules) - 24usize];
    ["Offset of field: Abc_Des_t_::tModules"]
        [::std::mem::offset_of!(Abc_Des_t_, tModules) - 32usize];
    ["Offset of field: Abc_Des_t_::pLibrary"]
        [::std::mem::offset_of!(Abc_Des_t_, pLibrary) - 40usize];
    ["Offset of field: Abc_Des_t_::pGenlib"][::std::mem::offset_of!(Abc_Des_t_, pGenlib) - 48usize];
};
extern "C" {
    #[link_name = "Abc_InfoRandomWord_imctk_abc_sys"]
    pub fn Abc_InfoRandomWord() -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Abc_InfoRandom_imctk_abc_sys"]
    pub fn Abc_InfoRandom(p: *mut ::std::os::raw::c_uint, nWords: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_InfoClear_imctk_abc_sys"]
    pub fn Abc_InfoClear(p: *mut ::std::os::raw::c_uint, nWords: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_InfoFill_imctk_abc_sys"]
    pub fn Abc_InfoFill(p: *mut ::std::os::raw::c_uint, nWords: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_InfoNot_imctk_abc_sys"]
    pub fn Abc_InfoNot(p: *mut ::std::os::raw::c_uint, nWords: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_InfoIsZero_imctk_abc_sys"]
    pub fn Abc_InfoIsZero(
        p: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_InfoIsOne_imctk_abc_sys"]
    pub fn Abc_InfoIsOne(
        p: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_InfoCopy_imctk_abc_sys"]
    pub fn Abc_InfoCopy(
        p: *mut ::std::os::raw::c_uint,
        q: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Abc_InfoAnd_imctk_abc_sys"]
    pub fn Abc_InfoAnd(
        p: *mut ::std::os::raw::c_uint,
        q: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Abc_InfoOr_imctk_abc_sys"]
    pub fn Abc_InfoOr(
        p: *mut ::std::os::raw::c_uint,
        q: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Abc_InfoXor_imctk_abc_sys"]
    pub fn Abc_InfoXor(
        p: *mut ::std::os::raw::c_uint,
        q: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Abc_InfoIsOrOne_imctk_abc_sys"]
    pub fn Abc_InfoIsOrOne(
        p: *mut ::std::os::raw::c_uint,
        q: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_InfoIsOrOne3_imctk_abc_sys"]
    pub fn Abc_InfoIsOrOne3(
        p: *mut ::std::os::raw::c_uint,
        q: *mut ::std::os::raw::c_uint,
        r: *mut ::std::os::raw::c_uint,
        nWords: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsNetlist_imctk_abc_sys"]
    pub fn Abc_NtkIsNetlist(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsLogic_imctk_abc_sys"]
    pub fn Abc_NtkIsLogic(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsStrash_imctk_abc_sys"]
    pub fn Abc_NtkIsStrash(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkHasSop_imctk_abc_sys"]
    pub fn Abc_NtkHasSop(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkHasBdd_imctk_abc_sys"]
    pub fn Abc_NtkHasBdd(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkHasAig_imctk_abc_sys"]
    pub fn Abc_NtkHasAig(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkHasMapping_imctk_abc_sys"]
    pub fn Abc_NtkHasMapping(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkHasBlifMv_imctk_abc_sys"]
    pub fn Abc_NtkHasBlifMv(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkHasBlackbox_imctk_abc_sys"]
    pub fn Abc_NtkHasBlackbox(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsSopNetlist_imctk_abc_sys"]
    pub fn Abc_NtkIsSopNetlist(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsBddNetlist_imctk_abc_sys"]
    pub fn Abc_NtkIsBddNetlist(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsAigNetlist_imctk_abc_sys"]
    pub fn Abc_NtkIsAigNetlist(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsMappedNetlist_imctk_abc_sys"]
    pub fn Abc_NtkIsMappedNetlist(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsBlifMvNetlist_imctk_abc_sys"]
    pub fn Abc_NtkIsBlifMvNetlist(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsSopLogic_imctk_abc_sys"]
    pub fn Abc_NtkIsSopLogic(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsBddLogic_imctk_abc_sys"]
    pub fn Abc_NtkIsBddLogic(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsAigLogic_imctk_abc_sys"]
    pub fn Abc_NtkIsAigLogic(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsMappedLogic_imctk_abc_sys"]
    pub fn Abc_NtkIsMappedLogic(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkName_imctk_abc_sys"]
    pub fn Abc_NtkName(pNtk: *mut Abc_Ntk_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Abc_NtkSpec_imctk_abc_sys"]
    pub fn Abc_NtkSpec(pNtk: *mut Abc_Ntk_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "Abc_NtkExdc_imctk_abc_sys"]
    pub fn Abc_NtkExdc(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    #[link_name = "Abc_NtkBackup_imctk_abc_sys"]
    pub fn Abc_NtkBackup(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    #[link_name = "Abc_NtkStep_imctk_abc_sys"]
    pub fn Abc_NtkStep(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkSetName_imctk_abc_sys"]
    pub fn Abc_NtkSetName(pNtk: *mut Abc_Ntk_t, pName: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Abc_NtkSetSpec_imctk_abc_sys"]
    pub fn Abc_NtkSetSpec(pNtk: *mut Abc_Ntk_t, pName: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "Abc_NtkSetBackup_imctk_abc_sys"]
    pub fn Abc_NtkSetBackup(pNtk: *mut Abc_Ntk_t, pNetBackup: *mut Abc_Ntk_t);
}
extern "C" {
    #[link_name = "Abc_NtkSetStep_imctk_abc_sys"]
    pub fn Abc_NtkSetStep(pNtk: *mut Abc_Ntk_t, iStep: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_NtkObjNum_imctk_abc_sys"]
    pub fn Abc_NtkObjNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkObjNumMax_imctk_abc_sys"]
    pub fn Abc_NtkObjNumMax(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkPiNum_imctk_abc_sys"]
    pub fn Abc_NtkPiNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkPoNum_imctk_abc_sys"]
    pub fn Abc_NtkPoNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkCiNum_imctk_abc_sys"]
    pub fn Abc_NtkCiNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkCoNum_imctk_abc_sys"]
    pub fn Abc_NtkCoNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkBoxNum_imctk_abc_sys"]
    pub fn Abc_NtkBoxNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkBiNum_imctk_abc_sys"]
    pub fn Abc_NtkBiNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkBoNum_imctk_abc_sys"]
    pub fn Abc_NtkBoNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkNetNum_imctk_abc_sys"]
    pub fn Abc_NtkNetNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkNodeNum_imctk_abc_sys"]
    pub fn Abc_NtkNodeNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkLatchNum_imctk_abc_sys"]
    pub fn Abc_NtkLatchNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkWhiteboxNum_imctk_abc_sys"]
    pub fn Abc_NtkWhiteboxNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkBlackboxNum_imctk_abc_sys"]
    pub fn Abc_NtkBlackboxNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkIsComb_imctk_abc_sys"]
    pub fn Abc_NtkIsComb(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkHasOnlyLatchBoxes_imctk_abc_sys"]
    pub fn Abc_NtkHasOnlyLatchBoxes(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkConstrNum_imctk_abc_sys"]
    pub fn Abc_NtkConstrNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCreateObj(pNtk: *mut Abc_Ntk_t, Type: Abc_ObjType_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreatePi_imctk_abc_sys"]
    pub fn Abc_NtkCreatePi(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreatePo_imctk_abc_sys"]
    pub fn Abc_NtkCreatePo(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreateBi_imctk_abc_sys"]
    pub fn Abc_NtkCreateBi(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreateBo_imctk_abc_sys"]
    pub fn Abc_NtkCreateBo(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreateNet_imctk_abc_sys"]
    pub fn Abc_NtkCreateNet(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreateNode_imctk_abc_sys"]
    pub fn Abc_NtkCreateNode(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreateLatch_imctk_abc_sys"]
    pub fn Abc_NtkCreateLatch(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreateWhitebox_imctk_abc_sys"]
    pub fn Abc_NtkCreateWhitebox(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCreateBlackbox_imctk_abc_sys"]
    pub fn Abc_NtkCreateBlackbox(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkObj_imctk_abc_sys"]
    pub fn Abc_NtkObj(pNtk: *mut Abc_Ntk_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkPi_imctk_abc_sys"]
    pub fn Abc_NtkPi(pNtk: *mut Abc_Ntk_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkPo_imctk_abc_sys"]
    pub fn Abc_NtkPo(pNtk: *mut Abc_Ntk_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCi_imctk_abc_sys"]
    pub fn Abc_NtkCi(pNtk: *mut Abc_Ntk_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkCo_imctk_abc_sys"]
    pub fn Abc_NtkCo(pNtk: *mut Abc_Ntk_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_NtkBox_imctk_abc_sys"]
    pub fn Abc_NtkBox(pNtk: *mut Abc_Ntk_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjIsComplement_imctk_abc_sys"]
    pub fn Abc_ObjIsComplement(p: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjRegular_imctk_abc_sys"]
    pub fn Abc_ObjRegular(p: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjNot_imctk_abc_sys"]
    pub fn Abc_ObjNot(p: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjNotCond_imctk_abc_sys"]
    pub fn Abc_ObjNotCond(p: *mut Abc_Obj_t, c: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjType_imctk_abc_sys"]
    pub fn Abc_ObjType(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Abc_ObjId_imctk_abc_sys"]
    pub fn Abc_ObjId(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Abc_ObjLevel_imctk_abc_sys"]
    pub fn Abc_ObjLevel(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninVec_imctk_abc_sys"]
    pub fn Abc_ObjFaninVec(pObj: *mut Abc_Obj_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Abc_ObjFanoutVec_imctk_abc_sys"]
    pub fn Abc_ObjFanoutVec(pObj: *mut Abc_Obj_t) -> *mut Vec_Int_t;
}
extern "C" {
    #[link_name = "Abc_ObjCopy_imctk_abc_sys"]
    pub fn Abc_ObjCopy(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjNtk_imctk_abc_sys"]
    pub fn Abc_ObjNtk(pObj: *mut Abc_Obj_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    #[link_name = "Abc_ObjModel_imctk_abc_sys"]
    pub fn Abc_ObjModel(pObj: *mut Abc_Obj_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    #[link_name = "Abc_ObjData_imctk_abc_sys"]
    pub fn Abc_ObjData(pObj: *mut Abc_Obj_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_ObjEquiv_imctk_abc_sys"]
    pub fn Abc_ObjEquiv(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjCopyCond_imctk_abc_sys"]
    pub fn Abc_ObjCopyCond(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjSetLevel_imctk_abc_sys"]
    pub fn Abc_ObjSetLevel(pObj: *mut Abc_Obj_t, Level: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_ObjSetCopy_imctk_abc_sys"]
    pub fn Abc_ObjSetCopy(pObj: *mut Abc_Obj_t, pCopy: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_ObjSetData_imctk_abc_sys"]
    pub fn Abc_ObjSetData(pObj: *mut Abc_Obj_t, pData: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "Abc_ObjIsNone_imctk_abc_sys"]
    pub fn Abc_ObjIsNone(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsPi_imctk_abc_sys"]
    pub fn Abc_ObjIsPi(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsPo_imctk_abc_sys"]
    pub fn Abc_ObjIsPo(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsBi_imctk_abc_sys"]
    pub fn Abc_ObjIsBi(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsBo_imctk_abc_sys"]
    pub fn Abc_ObjIsBo(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsCi_imctk_abc_sys"]
    pub fn Abc_ObjIsCi(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsCo_imctk_abc_sys"]
    pub fn Abc_ObjIsCo(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsTerm_imctk_abc_sys"]
    pub fn Abc_ObjIsTerm(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsNet_imctk_abc_sys"]
    pub fn Abc_ObjIsNet(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsNode_imctk_abc_sys"]
    pub fn Abc_ObjIsNode(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsLatch_imctk_abc_sys"]
    pub fn Abc_ObjIsLatch(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsBox_imctk_abc_sys"]
    pub fn Abc_ObjIsBox(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsWhitebox_imctk_abc_sys"]
    pub fn Abc_ObjIsWhitebox(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsBlackbox_imctk_abc_sys"]
    pub fn Abc_ObjIsBlackbox(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjIsBarBuf_imctk_abc_sys"]
    pub fn Abc_ObjIsBarBuf(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjBlackboxToWhitebox_imctk_abc_sys"]
    pub fn Abc_ObjBlackboxToWhitebox(pObj: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_ObjFaninNum_imctk_abc_sys"]
    pub fn Abc_ObjFaninNum(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFanoutNum_imctk_abc_sys"]
    pub fn Abc_ObjFanoutNum(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninId_imctk_abc_sys"]
    pub fn Abc_ObjFaninId(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninId0_imctk_abc_sys"]
    pub fn Abc_ObjFaninId0(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninId1_imctk_abc_sys"]
    pub fn Abc_ObjFaninId1(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFanoutEdgeNum_imctk_abc_sys"]
    pub fn Abc_ObjFanoutEdgeNum(
        pObj: *mut Abc_Obj_t,
        pFanout: *mut Abc_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFanout_imctk_abc_sys"]
    pub fn Abc_ObjFanout(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFanout0_imctk_abc_sys"]
    pub fn Abc_ObjFanout0(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFanin_imctk_abc_sys"]
    pub fn Abc_ObjFanin(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFanin0_imctk_abc_sys"]
    pub fn Abc_ObjFanin0(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFanin1_imctk_abc_sys"]
    pub fn Abc_ObjFanin1(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFanin0Ntk_imctk_abc_sys"]
    pub fn Abc_ObjFanin0Ntk(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFanout0Ntk_imctk_abc_sys"]
    pub fn Abc_ObjFanout0Ntk(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFaninC0_imctk_abc_sys"]
    pub fn Abc_ObjFaninC0(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninC1_imctk_abc_sys"]
    pub fn Abc_ObjFaninC1(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninC_imctk_abc_sys"]
    pub fn Abc_ObjFaninC(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjSetFaninC_imctk_abc_sys"]
    pub fn Abc_ObjSetFaninC(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_ObjXorFaninC_imctk_abc_sys"]
    pub fn Abc_ObjXorFaninC(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_ObjChild_imctk_abc_sys"]
    pub fn Abc_ObjChild(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjChild0_imctk_abc_sys"]
    pub fn Abc_ObjChild0(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjChild1_imctk_abc_sys"]
    pub fn Abc_ObjChild1(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjChildCopy_imctk_abc_sys"]
    pub fn Abc_ObjChildCopy(pObj: *mut Abc_Obj_t, i: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjChild0Copy_imctk_abc_sys"]
    pub fn Abc_ObjChild0Copy(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjChild1Copy_imctk_abc_sys"]
    pub fn Abc_ObjChild1Copy(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjChild0Data_imctk_abc_sys"]
    pub fn Abc_ObjChild0Data(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjChild1Data_imctk_abc_sys"]
    pub fn Abc_ObjChild1Data(pObj: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjFromLit_imctk_abc_sys"]
    pub fn Abc_ObjFromLit(p: *mut Abc_Ntk_t, iLit: ::std::os::raw::c_int) -> *mut Abc_Obj_t;
}
extern "C" {
    #[link_name = "Abc_ObjToLit_imctk_abc_sys"]
    pub fn Abc_ObjToLit(p: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninPhase_imctk_abc_sys"]
    pub fn Abc_ObjFaninPhase(p: *mut Abc_Obj_t, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjFaninFlipPhase_imctk_abc_sys"]
    pub fn Abc_ObjFaninFlipPhase(p: *mut Abc_Obj_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_AigNodeIsConst_imctk_abc_sys"]
    pub fn Abc_AigNodeIsConst(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_AigNodeIsAnd_imctk_abc_sys"]
    pub fn Abc_AigNodeIsAnd(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_AigNodeIsChoice_imctk_abc_sys"]
    pub fn Abc_AigNodeIsChoice(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NodeIsPersistant_imctk_abc_sys"]
    pub fn Abc_NodeIsPersistant(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NodeSetPersistant_imctk_abc_sys"]
    pub fn Abc_NodeSetPersistant(pNode: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_NodeClearPersistant_imctk_abc_sys"]
    pub fn Abc_NodeClearPersistant(pNode: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_NtkIncrementTravId_imctk_abc_sys"]
    pub fn Abc_NtkIncrementTravId(p: *mut Abc_Ntk_t);
}
extern "C" {
    #[link_name = "Abc_NodeTravId_imctk_abc_sys"]
    pub fn Abc_NodeTravId(p: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NodeSetTravId_imctk_abc_sys"]
    pub fn Abc_NodeSetTravId(p: *mut Abc_Obj_t, TravId: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_NodeSetTravIdCurrent_imctk_abc_sys"]
    pub fn Abc_NodeSetTravIdCurrent(p: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_NodeSetTravIdPrevious_imctk_abc_sys"]
    pub fn Abc_NodeSetTravIdPrevious(p: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_NodeIsTravIdCurrent_imctk_abc_sys"]
    pub fn Abc_NodeIsTravIdCurrent(p: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NodeIsTravIdPrevious_imctk_abc_sys"]
    pub fn Abc_NodeIsTravIdPrevious(p: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NodeSetTravIdCurrentId_imctk_abc_sys"]
    pub fn Abc_NodeSetTravIdCurrentId(p: *mut Abc_Ntk_t, i: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Abc_NodeIsTravIdCurrentId_imctk_abc_sys"]
    pub fn Abc_NodeIsTravIdCurrentId(
        p: *mut Abc_Ntk_t,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LatchSetInitNone_imctk_abc_sys"]
    pub fn Abc_LatchSetInitNone(pLatch: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_LatchSetInit0_imctk_abc_sys"]
    pub fn Abc_LatchSetInit0(pLatch: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_LatchSetInit1_imctk_abc_sys"]
    pub fn Abc_LatchSetInit1(pLatch: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_LatchSetInitDc_imctk_abc_sys"]
    pub fn Abc_LatchSetInitDc(pLatch: *mut Abc_Obj_t);
}
extern "C" {
    #[link_name = "Abc_LatchIsInitNone_imctk_abc_sys"]
    pub fn Abc_LatchIsInitNone(pLatch: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LatchIsInit0_imctk_abc_sys"]
    pub fn Abc_LatchIsInit0(pLatch: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LatchIsInit1_imctk_abc_sys"]
    pub fn Abc_LatchIsInit1(pLatch: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LatchIsInitDc_imctk_abc_sys"]
    pub fn Abc_LatchIsInitDc(pLatch: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_LatchInit_imctk_abc_sys"]
    pub fn Abc_LatchInit(pLatch: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_NtkGlobalBdd_imctk_abc_sys"]
    pub fn Abc_NtkGlobalBdd(pNtk: *mut Abc_Ntk_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_NtkGlobalBddMan_imctk_abc_sys"]
    pub fn Abc_NtkGlobalBddMan(pNtk: *mut Abc_Ntk_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_NtkGlobalBddArray_imctk_abc_sys"]
    pub fn Abc_NtkGlobalBddArray(pNtk: *mut Abc_Ntk_t) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_ObjGlobalBdd_imctk_abc_sys"]
    pub fn Abc_ObjGlobalBdd(pObj: *mut Abc_Obj_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_ObjSetGlobalBdd_imctk_abc_sys"]
    pub fn Abc_ObjSetGlobalBdd(pObj: *mut Abc_Obj_t, bF: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "Abc_NtkMvVar_imctk_abc_sys"]
    pub fn Abc_NtkMvVar(pNtk: *mut Abc_Ntk_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_NtkMvVarMan_imctk_abc_sys"]
    pub fn Abc_NtkMvVarMan(pNtk: *mut Abc_Ntk_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_ObjMvVar_imctk_abc_sys"]
    pub fn Abc_ObjMvVar(pObj: *mut Abc_Obj_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "Abc_ObjMvVarNum_imctk_abc_sys"]
    pub fn Abc_ObjMvVarNum(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Abc_ObjSetMvVar_imctk_abc_sys"]
    pub fn Abc_ObjSetMvVar(pObj: *mut Abc_Obj_t, pV: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_AigAlloc(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Aig_t;
}
extern "C" {
    pub fn Abc_AigFree(pMan: *mut Abc_Aig_t);
}
extern "C" {
    pub fn Abc_AigCleanup(pMan: *mut Abc_Aig_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigCheck(pMan: *mut Abc_Aig_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigLevel(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigConst1(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigAnd(
        pMan: *mut Abc_Aig_t,
        p0: *mut Abc_Obj_t,
        p1: *mut Abc_Obj_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigAndLookup(
        pMan: *mut Abc_Aig_t,
        p0: *mut Abc_Obj_t,
        p1: *mut Abc_Obj_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigXorLookup(
        pMan: *mut Abc_Aig_t,
        p0: *mut Abc_Obj_t,
        p1: *mut Abc_Obj_t,
        pType: *mut ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigMuxLookup(
        pMan: *mut Abc_Aig_t,
        pC: *mut Abc_Obj_t,
        pT: *mut Abc_Obj_t,
        pE: *mut Abc_Obj_t,
        pType: *mut ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigOr(
        pMan: *mut Abc_Aig_t,
        p0: *mut Abc_Obj_t,
        p1: *mut Abc_Obj_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigXor(
        pMan: *mut Abc_Aig_t,
        p0: *mut Abc_Obj_t,
        p1: *mut Abc_Obj_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigMux(
        pMan: *mut Abc_Aig_t,
        pC: *mut Abc_Obj_t,
        p1: *mut Abc_Obj_t,
        p0: *mut Abc_Obj_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigMiter(
        pMan: *mut Abc_Aig_t,
        vPairs: *mut Vec_Ptr_t,
        fImplic: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_AigReplace(
        pMan: *mut Abc_Aig_t,
        pOld: *mut Abc_Obj_t,
        pNew: *mut Abc_Obj_t,
        fUpdateLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigDeleteNode(pMan: *mut Abc_Aig_t, pOld: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_AigRehash(pMan: *mut Abc_Aig_t);
}
extern "C" {
    pub fn Abc_AigNodeHasComplFanoutEdge(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigNodeHasComplFanoutEdgeTrav(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigPrintNode(pNode: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_AigNodeIsAcyclic(
        pNode: *mut Abc_Obj_t,
        pRoot: *mut Abc_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigCheckFaninOrder(pMan: *mut Abc_Aig_t);
}
extern "C" {
    pub fn Abc_AigSetNodePhases(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_AigUpdateStart(
        pMan: *mut Abc_Aig_t,
        pvUpdatedNets: *mut *mut Vec_Ptr_t,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_AigUpdateStop(pMan: *mut Abc_Aig_t);
}
extern "C" {
    pub fn Abc_AigUpdateReset(pMan: *mut Abc_Aig_t);
}
extern "C" {
    pub fn Abc_NtkAttach(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkToBarBufs(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkFromBarBufs(pNtkBase: *mut Abc_Ntk_t, pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkBarBufsToBuffers(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkBarBufsFromBuffers(
        pNtkBase: *mut Abc_Ntk_t,
        pNtk: *mut Abc_Ntk_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkStartMvVars(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkFreeMvVars(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkSetMvVarValues(pObj: *mut Abc_Obj_t, nValues: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_NtkStrashBlifMv(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkInsertBlifMv(
        pNtkBase: *mut Abc_Ntk_t,
        pNtkLogic: *mut Abc_Ntk_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkConvertToBlifMv(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeConvertSopToMvSop(
        nVars: ::std::os::raw::c_int,
        vSop0: *mut Vec_Int_t,
        vSop1: *mut Vec_Int_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_NodeEvalMvCost(
        nVars: ::std::os::raw::c_int,
        vSop0: *mut Vec_Int_t,
        vSop1: *mut Vec_Int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkBalance(
        pNtk: *mut Abc_Ntk_t,
        fDuplicate: ::std::os::raw::c_int,
        fSelective: ::std::os::raw::c_int,
        fUpdateLevel: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCheck(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCheckRead(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkDoCheck(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCheckObj(pNtk: *mut Abc_Ntk_t, pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCompareSignals(
        pNtk1: *mut Abc_Ntk_t,
        pNtk2: *mut Abc_Ntk_t,
        fOnlyPis: ::std::os::raw::c_int,
        fComb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkIsAcyclicHierarchy(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCheckUniqueCiNames(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCheckUniqueCoNames(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCheckUniqueCioNames(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCollapse(
        pNtk: *mut Abc_Ntk_t,
        fBddSizeMax: ::std::os::raw::c_int,
        fDualRail: ::std::os::raw::c_int,
        fReorder: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
        fDumpOrder: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCollapseSat(
        pNtk: *mut Abc_Ntk_t,
        nCubeLim: ::std::os::raw::c_int,
        nBTLimit: ::std::os::raw::c_int,
        nCostMax: ::std::os::raw::c_int,
        fCanon: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
        fCnfShared: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkClpGia(pNtk: *mut Abc_Ntk_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Abc_NodeGetCutsRecursive(
        p: *mut ::std::os::raw::c_void,
        pObj: *mut Abc_Obj_t,
        fDag: ::std::os::raw::c_int,
        fTree: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NodeGetCuts(
        p: *mut ::std::os::raw::c_void,
        pObj: *mut Abc_Obj_t,
        fDag: ::std::os::raw::c_int,
        fTree: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NodeGetCutsSeq(
        p: *mut ::std::os::raw::c_void,
        pObj: *mut Abc_Obj_t,
        fFirst: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NodeReadCuts(
        p: *mut ::std::os::raw::c_void,
        pObj: *mut Abc_Obj_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NodeFreeCuts(p: *mut ::std::os::raw::c_void, pObj: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkPhaseFrameNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkDarPrintCone(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkBalanceExor(
        pNtk: *mut Abc_Ntk_t,
        fUpdateLevel: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkDarLatchSweep(
        pNtk: *mut Abc_Ntk_t,
        fLatchConst: ::std::os::raw::c_int,
        fLatchEqual: ::std::os::raw::c_int,
        fSaveNames: ::std::os::raw::c_int,
        fUseMvSweep: ::std::os::raw::c_int,
        nFramesSymb: ::std::os::raw::c_int,
        nFramesSatur: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkDelayTraceLut(pNtk: *mut Abc_Ntk_t, fUseLutLib: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn Abc_NtkDfs(pNtk: *mut Abc_Ntk_t, fCollectAll: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfs2(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsNodes(
        pNtk: *mut Abc_Ntk_t,
        ppNodes: *mut *mut Abc_Obj_t,
        nNodes: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsReverse(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsReverseNodes(
        pNtk: *mut Abc_Ntk_t,
        ppNodes: *mut *mut Abc_Obj_t,
        nNodes: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsReverseNodesContained(
        pNtk: *mut Abc_Ntk_t,
        ppNodes: *mut *mut Abc_Obj_t,
        nNodes: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsSeq(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsSeqReverse(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsIter(
        pNtk: *mut Abc_Ntk_t,
        fCollectAll: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsIterNodes(pNtk: *mut Abc_Ntk_t, vRoots: *mut Vec_Ptr_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkDfsHie(
        pNtk: *mut Abc_Ntk_t,
        fCollectAll: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkIsDfsOrdered(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkDfsWithBoxes(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkSupport(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkNodeSupport(
        pNtk: *mut Abc_Ntk_t,
        ppNodes: *mut *mut Abc_Obj_t,
        nNodes: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkNodeSupportInt(
        pNtk: *mut Abc_Ntk_t,
        iCo: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_NtkFunctionalIso(
        pNtk: *mut Abc_Ntk_t,
        iCo1: ::std::os::raw::c_int,
        iCo2: ::std::os::raw::c_int,
        fCommon: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigDfs(
        pNtk: *mut Abc_Ntk_t,
        fCollectAll: ::std::os::raw::c_int,
        fCollectCos: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_AigDfsMap(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_DfsLevelized(pNode: *mut Abc_Obj_t, fTfi: ::std::os::raw::c_int) -> *mut Vec_Vec_t;
}
extern "C" {
    pub fn Abc_NtkLevelize(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Vec_t;
}
extern "C" {
    pub fn Abc_NtkLevel(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkLevelReverse(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkIsAcyclic(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkIsAcyclicWithBoxes(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_AigGetLevelizedOrder(
        pNtk: *mut Abc_Ntk_t,
        fCollectCis: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_ExactInputNum() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_ExactIsRunning() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_ExactBuildNode(
        pTruth: *mut word,
        nVars: ::std::os::raw::c_int,
        pArrTimeProfile: *mut ::std::os::raw::c_int,
        pFanins: *mut *mut Abc_Obj_t,
        pNtk: *mut Abc_Ntk_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkFindExact(
        pTruth: *mut word,
        nVars: ::std::os::raw::c_int,
        nFunc: ::std::os::raw::c_int,
        nMaxDepth: ::std::os::raw::c_int,
        pArrivalTimes: *mut ::std::os::raw::c_int,
        nBTLimit: ::std::os::raw::c_int,
        nStartGates: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_ObjAddFanin(pObj: *mut Abc_Obj_t, pFanin: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_ObjDeleteFanin(pObj: *mut Abc_Obj_t, pFanin: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_ObjRemoveFanins(pObj: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_ObjPatchFanin(
        pObj: *mut Abc_Obj_t,
        pFaninOld: *mut Abc_Obj_t,
        pFaninNew: *mut Abc_Obj_t,
    );
}
extern "C" {
    pub fn Abc_ObjPatchFanoutFanin(pObj: *mut Abc_Obj_t, iObjNew: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_ObjInsertBetween(
        pNodeIn: *mut Abc_Obj_t,
        pNodeOut: *mut Abc_Obj_t,
        Type: Abc_ObjType_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_ObjTransferFanout(pObjOld: *mut Abc_Obj_t, pObjNew: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_ObjReplace(pObjOld: *mut Abc_Obj_t, pObjNew: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_ObjReplaceByConstant(pNode: *mut Abc_Obj_t, fConst1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_ObjFanoutFaninNum(
        pFanout: *mut Abc_Obj_t,
        pFanin: *mut Abc_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkMakeLegit(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkSortSops(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkFraig(
        pNtk: *mut Abc_Ntk_t,
        pParams: *mut ::std::os::raw::c_void,
        fAllNodes: ::std::os::raw::c_int,
        fExdc: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkToFraig(
        pNtk: *mut Abc_Ntk_t,
        pParams: *mut ::std::os::raw::c_void,
        fAllNodes: ::std::os::raw::c_int,
        fExdc: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NtkFraigTrust(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkFraigStore(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkFraigRestore(
        nPatsRand: ::std::os::raw::c_int,
        nPatsDyna: ::std::os::raw::c_int,
        nBTLimit: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkFraigStoreClean();
}
extern "C" {
    pub fn Abc_NtkSopToBdd(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkBddToSop(
        pNtk: *mut Abc_Ntk_t,
        fMode: ::std::os::raw::c_int,
        nCubeLimit: ::std::os::raw::c_int,
        fCubeSort: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeBddToCnf(
        pNode: *mut Abc_Obj_t,
        pMmMan: *mut Mem_Flex_t,
        vCube: *mut Vec_Str_t,
        fAllPrimes: ::std::os::raw::c_int,
        ppSop0: *mut *mut ::std::os::raw::c_char,
        ppSop1: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Abc_NtkLogicMakeDirectSops(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkSopToAig(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkAigToBdd(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkAigToGia(p: *mut Abc_Ntk_t, fGiaSimple: ::std::os::raw::c_int) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Abc_NtkMapToSop(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkToSop(
        pNtk: *mut Abc_Ntk_t,
        fMode: ::std::os::raw::c_int,
        nCubeLimit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkToBdd(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkToAig(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkHaigStart(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkHaigStop(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkHaigUse(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkFlattenLogicHierarchy(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkConvertBlackboxes(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkInsertNewLogic(pNtkH: *mut Abc_Ntk_t, pNtkL: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkPrintBoxInfo(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkFlattenHierarchyGia(
        pNtk: *mut Abc_Ntk_t,
        pvBuffers: *mut *mut Vec_Ptr_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Abc_NtkInsertHierarchyGia(
        pNtk: *mut Abc_Ntk_t,
        pNew: *mut Abc_Ntk_t,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NtkLatchIsSelfFeed(pLatch: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCountSelfFeedLatches(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkRemoveSelfFeedLatches(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCollectLatchValues(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_NtkCollectLatchValuesStr(pNtk: *mut Abc_Ntk_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_NtkInsertLatchValues(pNtk: *mut Abc_Ntk_t, vValues: *mut Vec_Int_t);
}
extern "C" {
    pub fn Abc_NtkAddLatch(
        pNtk: *mut Abc_Ntk_t,
        pDriver: *mut Abc_Obj_t,
        Init: Abc_InitType_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkConvertDcLatches(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkConverLatchNamesIntoNumbers(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_DesCreate(pName: *mut ::std::os::raw::c_char) -> *mut Abc_Des_t;
}
extern "C" {
    pub fn Abc_DesCleanManPointer(p: *mut Abc_Des_t, pMan: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_DesFree(p: *mut Abc_Des_t, pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_DesDup(p: *mut Abc_Des_t) -> *mut Abc_Des_t;
}
extern "C" {
    pub fn Abc_DesPrint(p: *mut Abc_Des_t);
}
extern "C" {
    pub fn Abc_DesAddModel(p: *mut Abc_Des_t, pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_DesFindModelByName(
        p: *mut Abc_Des_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_DesFindTopLevelModels(p: *mut Abc_Des_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_DesDeriveRoot(p: *mut Abc_Des_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkWriteLogFile(
        pFileName: *mut ::std::os::raw::c_char,
        pSeqCex: *mut Abc_Cex_t,
        Status: ::std::os::raw::c_int,
        nFrames: ::std::os::raw::c_int,
        pCommand: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Abc_NtkFetchTwinNode(pNode: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkMinimumBase(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeMinimumBase(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkRemoveDupFanins(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeRemoveDupFanins(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkMiter(
        pNtk1: *mut Abc_Ntk_t,
        pNtk2: *mut Abc_Ntk_t,
        fComb: ::std::os::raw::c_int,
        nPartSize: ::std::os::raw::c_int,
        fImplic: ::std::os::raw::c_int,
        fMulti: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkMiterAddCone(
        pNtk: *mut Abc_Ntk_t,
        pNtkMiter: *mut Abc_Ntk_t,
        pNode: *mut Abc_Obj_t,
    );
}
extern "C" {
    pub fn Abc_NtkMiterAnd(
        pNtk1: *mut Abc_Ntk_t,
        pNtk2: *mut Abc_Ntk_t,
        fOr: ::std::os::raw::c_int,
        fCompl2: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkMiterCofactor(pNtk: *mut Abc_Ntk_t, vPiValues: *mut Vec_Int_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkMiterForCofactors(
        pNtk: *mut Abc_Ntk_t,
        Out: ::std::os::raw::c_int,
        In1: ::std::os::raw::c_int,
        In2: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkMiterQuantify(
        pNtk: *mut Abc_Ntk_t,
        In: ::std::os::raw::c_int,
        fExist: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkMiterQuantifyPis(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkMiterIsConstant(pMiter: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkMiterReport(pMiter: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkFrames(
        pNtk: *mut Abc_Ntk_t,
        nFrames: ::std::os::raw::c_int,
        fInitial: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCombinePos(
        pNtk: *mut Abc_Ntk_t,
        fAnd: ::std::os::raw::c_int,
        fXor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_ObjName(pNode: *mut Abc_Obj_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_ObjAssignName(
        pObj: *mut Abc_Obj_t,
        pName: *mut ::std::os::raw::c_char,
        pSuffix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_ObjNamePrefix(
        pObj: *mut Abc_Obj_t,
        pPrefix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_ObjNameSuffix(
        pObj: *mut Abc_Obj_t,
        pSuffix: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_ObjNameDummy(
        pPrefix: *mut ::std::os::raw::c_char,
        Num: ::std::os::raw::c_int,
        nDigits: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_NtkTrasferNames(pNtk: *mut Abc_Ntk_t, pNtkNew: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkTrasferNamesNoLatches(pNtk: *mut Abc_Ntk_t, pNtkNew: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NodeGetFaninNames(pNode: *mut Abc_Obj_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NodeGetFakeNames(nNames: ::std::os::raw::c_int) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NodeFreeNames(vNames: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Abc_NtkCollectCioNames(
        pNtk: *mut Abc_Ntk_t,
        fCollectCos: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_NodeCompareNames(
        pp1: *mut *mut Abc_Obj_t,
        pp2: *mut *mut Abc_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkOrderObjsByName(pNtk: *mut Abc_Ntk_t, fComb: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_NtkAddDummyPiNames(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkAddDummyPoNames(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkAddDummyBoxNames(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkShortNames(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanNames(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkStartNameIds(p: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkTransferNameIds(p: *mut Abc_Ntk_t, pNew: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkUpdateNameIds(p: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkToLogic(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkToNetlist(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkToNetlistBench(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkDeriveFromBdd(
        dd: *mut ::std::os::raw::c_void,
        bFunc: *mut ::std::os::raw::c_void,
        pNamePo: *mut ::std::os::raw::c_char,
        vNamesPi: *mut Vec_Ptr_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkBddToMuxes(
        pNtk: *mut Abc_Ntk_t,
        fGlobal: ::std::os::raw::c_int,
        Limit: ::std::os::raw::c_int,
        fUseAdd: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkBuildGlobalBdds(
        pNtk: *mut Abc_Ntk_t,
        fBddSizeMax: ::std::os::raw::c_int,
        fDropInternal: ::std::os::raw::c_int,
        fReorder: ::std::os::raw::c_int,
        fReverse: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NtkFreeGlobalBdds(
        pNtk: *mut Abc_Ntk_t,
        fFreeMan: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NtkSizeOfGlobalBdds(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkAlloc(
        Type: Abc_NtkType_t,
        Func: Abc_NtkFunc_t,
        fUseMemMan: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkStartFrom(
        pNtk: *mut Abc_Ntk_t,
        Type: Abc_NtkType_t,
        Func: Abc_NtkFunc_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkStartFromNoLatches(
        pNtk: *mut Abc_Ntk_t,
        Type: Abc_NtkType_t,
        Func: Abc_NtkFunc_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkFinalize(pNtk: *mut Abc_Ntk_t, pNtkNew: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkStartRead(pName: *mut ::std::os::raw::c_char) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkFinalizeRead(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkDup(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkDupDfs(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkDupDfsNoBarBufs(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkDupTransformMiter(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateCone(
        pNtk: *mut Abc_Ntk_t,
        pNode: *mut Abc_Obj_t,
        pNodeName: *mut ::std::os::raw::c_char,
        fUseAllCis: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateConeArray(
        pNtk: *mut Abc_Ntk_t,
        vRoots: *mut Vec_Ptr_t,
        fUseAllCis: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkAppendToCone(
        pNtkNew: *mut Abc_Ntk_t,
        pNtk: *mut Abc_Ntk_t,
        vRoots: *mut Vec_Ptr_t,
    );
}
extern "C" {
    pub fn Abc_NtkCreateMffc(
        pNtk: *mut Abc_Ntk_t,
        pNode: *mut Abc_Obj_t,
        pNodeName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateTarget(
        pNtk: *mut Abc_Ntk_t,
        vRoots: *mut Vec_Ptr_t,
        vValues: *mut Vec_Int_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateFromNode(pNtk: *mut Abc_Ntk_t, pNode: *mut Abc_Obj_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateFromRange(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateWithNode(pSop: *mut ::std::os::raw::c_char) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateWithNodes(vSops: *mut Vec_Ptr_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkDelete(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkFixNonDrivenNets(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkMakeComb(pNtk: *mut Abc_Ntk_t, fRemoveLatches: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_NtkPermute(
        pNtk: *mut Abc_Ntk_t,
        fInputs: ::std::os::raw::c_int,
        fOutputs: ::std::os::raw::c_int,
        fFlops: ::std::os::raw::c_int,
        pFlopPermFile: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Abc_NtkUnpermute(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCreateFromSops(
        pName: *mut ::std::os::raw::c_char,
        vSops: *mut Vec_Ptr_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkCreateFromGias(
        pName: *mut ::std::os::raw::c_char,
        vGias: *mut Vec_Ptr_t,
        pMulti: *mut Gia_Man_t,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_ObjAlloc(pNtk: *mut Abc_Ntk_t, Type: Abc_ObjType_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_ObjRecycle(pObj: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkDeleteObj(pObj: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkDeleteObjPo(pObj: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkDeleteObj_rec(pObj: *mut Abc_Obj_t, fOnlyNodes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_NtkDeleteAll_rec(pObj: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkDupObj(
        pNtkNew: *mut Abc_Ntk_t,
        pObj: *mut Abc_Obj_t,
        fCopyName: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkDupBox(
        pNtkNew: *mut Abc_Ntk_t,
        pBox: *mut Abc_Obj_t,
        fCopyName: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCloneObj(pNode: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkFindNode(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkFindNet(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkFindCi(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkFindCo(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkFindOrCreateNet(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeConst0(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeConst1(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeInv(pNtk: *mut Abc_Ntk_t, pFanin: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeBuf(pNtk: *mut Abc_Ntk_t, pFanin: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeAnd(pNtk: *mut Abc_Ntk_t, vFanins: *mut Vec_Ptr_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeOr(pNtk: *mut Abc_Ntk_t, vFanins: *mut Vec_Ptr_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeExor(pNtk: *mut Abc_Ntk_t, vFanins: *mut Vec_Ptr_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkCreateNodeMux(
        pNtk: *mut Abc_Ntk_t,
        pNodeC: *mut Abc_Obj_t,
        pNode1: *mut Abc_Obj_t,
        pNode0: *mut Abc_Obj_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NodeIsConst(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeIsConst0(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeIsConst1(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeIsBuf(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeIsInv(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeComplement(pNode: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NodeComplementInput(pNode: *mut Abc_Obj_t, pFanin: *mut Abc_Obj_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Odc_Man_t_ {
    _unused: [u8; 0],
}
pub type Odc_Man_t = Odc_Man_t_;
extern "C" {
    pub fn Abc_NtkDontCareAlloc(
        nVarsMax: ::std::os::raw::c_int,
        nLevels: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Odc_Man_t;
}
extern "C" {
    pub fn Abc_NtkDontCareClear(p: *mut Odc_Man_t);
}
extern "C" {
    pub fn Abc_NtkDontCareFree(p: *mut Odc_Man_t);
}
extern "C" {
    pub fn Abc_NtkDontCareCompute(
        p: *mut Odc_Man_t,
        pNode: *mut Abc_Obj_t,
        vLeaves: *mut Vec_Ptr_t,
        puTruth: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkMfsTotalSwitching(pNtk: *mut Abc_Ntk_t) -> f32;
}
extern "C" {
    pub fn Abc_NtkMfsTotalGlitching(
        pNtk: *mut Abc_Ntk_t,
        nPats: ::std::os::raw::c_int,
        Prob: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn Abc_NtkPrintStats(
        pNtk: *mut Abc_Ntk_t,
        fFactored: ::std::os::raw::c_int,
        fSaveBest: ::std::os::raw::c_int,
        fDumpResult: ::std::os::raw::c_int,
        fUseLutLib: ::std::os::raw::c_int,
        fPrintMuxes: ::std::os::raw::c_int,
        fPower: ::std::os::raw::c_int,
        fGlitch: ::std::os::raw::c_int,
        fSkipBuf: ::std::os::raw::c_int,
        fSkipSmall: ::std::os::raw::c_int,
        fPrintMem: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NtkPrintIo(
        pFile: *mut FILE,
        pNtk: *mut Abc_Ntk_t,
        fPrintFlops: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NtkPrintLatch(pFile: *mut FILE, pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkPrintFanio(
        pFile: *mut FILE,
        pNtk: *mut Abc_Ntk_t,
        fUseFanio: ::std::os::raw::c_int,
        fUsePio: ::std::os::raw::c_int,
        fUseSupp: ::std::os::raw::c_int,
        fUseCone: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NtkPrintFanioNew(
        pFile: *mut FILE,
        pNtk: *mut Abc_Ntk_t,
        fMffc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NodePrintFanio(pFile: *mut FILE, pNode: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkPrintFactor(
        pFile: *mut FILE,
        pNtk: *mut Abc_Ntk_t,
        fUseRealNames: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NodePrintFactor(
        pFile: *mut FILE,
        pNode: *mut Abc_Obj_t,
        fUseRealNames: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NtkPrintLevel(
        pFile: *mut FILE,
        pNtk: *mut Abc_Ntk_t,
        fProfile: ::std::os::raw::c_int,
        fListNodes: ::std::os::raw::c_int,
        fOutputs: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NodePrintLevel(pFile: *mut FILE, pNode: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkPrintSkews(
        pFile: *mut FILE,
        pNtk: *mut Abc_Ntk_t,
        fPrintAll: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_ObjPrint(pFile: *mut FILE, pObj: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NtkShow6VarFunc(pF0: *mut ::std::os::raw::c_char, pF1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Abc_NtkMiterProve(
        ppNtk: *mut *mut Abc_Ntk_t,
        pParams: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkIvyProve(
        ppNtk: *mut *mut Abc_Ntk_t,
        pPars: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkRecStart3(
        p: *mut Gia_Man_t,
        nVars: ::std::os::raw::c_int,
        nCuts: ::std::os::raw::c_int,
        fFuncOnly: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NtkRecStop3();
}
extern "C" {
    pub fn Abc_NtkRecAdd3(pNtk: *mut Abc_Ntk_t, fUseSOPB: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_NtkRecPs3(fPrintLib: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_NtkRecGetGia3() -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Abc_NtkRecIsRunning3() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkRecLibMerge3(pGia: *mut Gia_Man_t);
}
extern "C" {
    pub fn Abc_NtkRecInputNum3() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkManCutStart(
        nNodeSizeMax: ::std::os::raw::c_int,
        nConeSizeMax: ::std::os::raw::c_int,
        nNodeFanStop: ::std::os::raw::c_int,
        nConeFanStop: ::std::os::raw::c_int,
    ) -> *mut Abc_ManCut_t;
}
extern "C" {
    pub fn Abc_NtkManCutStop(p: *mut Abc_ManCut_t);
}
extern "C" {
    pub fn Abc_NtkManCutReadCutLarge(p: *mut Abc_ManCut_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkManCutReadCutSmall(p: *mut Abc_ManCut_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkManCutReadVisited(p: *mut Abc_ManCut_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NodeFindCut(
        p: *mut Abc_ManCut_t,
        pRoot: *mut Abc_Obj_t,
        fContain: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NodeConeCollect(
        ppRoots: *mut *mut Abc_Obj_t,
        nRoots: ::std::os::raw::c_int,
        vFanins: *mut Vec_Ptr_t,
        vVisited: *mut Vec_Ptr_t,
        fIncludeFanins: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NodeCollectTfoCands(
        p: *mut Abc_ManCut_t,
        pRoot: *mut Abc_Obj_t,
        vFanins: *mut Vec_Ptr_t,
        LevelMax: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NodeMffcSize(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeMffcSizeSupp(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeMffcSizeStop(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeMffcLabelAig(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeMffcLabel(
        pNode: *mut Abc_Obj_t,
        vNodes: *mut Vec_Ptr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeMffcConeSupp(
        pNode: *mut Abc_Obj_t,
        vCone: *mut Vec_Ptr_t,
        vSupp: *mut Vec_Ptr_t,
    );
}
extern "C" {
    pub fn Abc_NodeDeref_rec(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeRef_rec(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkRefactor(
        pNtk: *mut Abc_Ntk_t,
        nNodeSizeMax: ::std::os::raw::c_int,
        nMinSaved: ::std::os::raw::c_int,
        nConeSizeMax: ::std::os::raw::c_int,
        fUpdateLevel: ::std::os::raw::c_int,
        fUseZeros: ::std::os::raw::c_int,
        fUseDcs: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkRewrite(
        pNtk: *mut Abc_Ntk_t,
        fUpdateLevel: ::std::os::raw::c_int,
        fUseZeros: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
        fPlaceEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkMiterSat(
        pNtk: *mut Abc_Ntk_t,
        nConfLimit: ABC_INT64_T,
        nInsLimit: ABC_INT64_T,
        fVerbose: ::std::os::raw::c_int,
        pNumConfs: *mut ABC_INT64_T,
        pNumInspects: *mut ABC_INT64_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkMiterSatCreate(
        pNtk: *mut Abc_Ntk_t,
        fAllPrimes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_SopRegister(
        pMan: *mut Mem_Flex_t,
        pName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopStart(
        pMan: *mut Mem_Flex_t,
        nCubes: ::std::os::raw::c_int,
        nVars: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateConst0(pMan: *mut Mem_Flex_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateConst1(pMan: *mut Mem_Flex_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateAnd2(
        pMan: *mut Mem_Flex_t,
        fCompl0: ::std::os::raw::c_int,
        fCompl1: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateAnd(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
        pfCompl: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateNand(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateOr(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
        pfCompl: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateOrMultiCube(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
        pfCompl: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateNor(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateXor(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateXorSpecial(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateNxor(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateMux(pMan: *mut Mem_Flex_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateInv(pMan: *mut Mem_Flex_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateBuf(pMan: *mut Mem_Flex_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateFromTruth(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
        pTruth: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateFromIsop(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
        vCover: *mut Vec_Int_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopCreateFromTruthIsop(
        pMan: *mut Mem_Flex_t,
        nVars: ::std::os::raw::c_int,
        pTruth: *mut word,
        vCover: *mut Vec_Int_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopGetCubeNum(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopGetLitNum(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopGetVarNum(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopGetPhase(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopGetIthCareLit(
        pSop: *mut ::std::os::raw::c_char,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopComplement(pSop: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Abc_SopComplementVar(pSop: *mut ::std::os::raw::c_char, iVar: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_SopIsComplement(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopIsConst0(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopIsConst1(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopIsBuf(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopIsInv(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopIsAndType(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopIsOrType(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopIsExorType(pSop: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopCheck(
        pSop: *mut ::std::os::raw::c_char,
        nFanins: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_SopFromTruthBin(pTruth: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopFromTruthHex(pTruth: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopFromTruthsBin(pTruth: *mut ::std::os::raw::c_char) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_SopFromTruthsHex(pTruth: *mut ::std::os::raw::c_char) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_SopEncoderPos(
        pMan: *mut Mem_Flex_t,
        iValue: ::std::os::raw::c_int,
        nValues: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopEncoderLog(
        pMan: *mut Mem_Flex_t,
        iBit: ::std::os::raw::c_int,
        nValues: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopDecoderPos(
        pMan: *mut Mem_Flex_t,
        nValues: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopDecoderLog(
        pMan: *mut Mem_Flex_t,
        nValues: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_SopToTruth(
        pSop: *mut ::std::os::raw::c_char,
        nInputs: ::std::os::raw::c_int,
    ) -> word;
}
extern "C" {
    pub fn Abc_SopToTruth7(
        pSop: *mut ::std::os::raw::c_char,
        nInputs: ::std::os::raw::c_int,
        r: *mut word,
    );
}
extern "C" {
    pub fn Abc_SopToTruthBig(
        pSop: *mut ::std::os::raw::c_char,
        nInputs: ::std::os::raw::c_int,
        pVars: *mut *mut word,
        pCube: *mut word,
        pRes: *mut word,
    );
}
extern "C" {
    pub fn Abc_NtkRestrash(pNtk: *mut Abc_Ntk_t, fCleanup: ::std::os::raw::c_int)
        -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkRestrashZero(
        pNtk: *mut Abc_Ntk_t,
        fCleanup: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkStrash(
        pNtk: *mut Abc_Ntk_t,
        fAllNodes: ::std::os::raw::c_int,
        fCleanup: ::std::os::raw::c_int,
        fRecord: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NodeStrash(
        pNtkNew: *mut Abc_Ntk_t,
        pNode: *mut Abc_Obj_t,
        fRecord: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkAppend(
        pNtk1: *mut Abc_Ntk_t,
        pNtk2: *mut Abc_Ntk_t,
        fAddPos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkTopmost(pNtk: *mut Abc_Ntk_t, nLevels: ::std::os::raw::c_int) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_NtkSweep(
        pNtk: *mut Abc_Ntk_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCleanup(
        pNtk: *mut Abc_Ntk_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCleanupNodes(
        pNtk: *mut Abc_Ntk_t,
        vNodes: *mut Vec_Ptr_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCleanupSeq(
        pNtk: *mut Abc_Ntk_t,
        fLatchSweep: ::std::os::raw::c_int,
        fAutoSweep: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkSweepBufsInvs(
        pNtk: *mut Abc_Ntk_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkReadDefaultArrival(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NtkReadDefaultRequired(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NodeReadArrival(pNode: *mut Abc_Obj_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NodeReadRequired(pNode: *mut Abc_Obj_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NtkReadDefaultArrivalWorst(pNtk: *mut Abc_Ntk_t) -> f32;
}
extern "C" {
    pub fn Abc_NtkReadDefaultRequiredWorst(pNtk: *mut Abc_Ntk_t) -> f32;
}
extern "C" {
    pub fn Abc_NodeReadArrivalAve(pNode: *mut Abc_Obj_t) -> f32;
}
extern "C" {
    pub fn Abc_NodeReadRequiredAve(pNode: *mut Abc_Obj_t) -> f32;
}
extern "C" {
    pub fn Abc_NodeReadArrivalWorst(pNode: *mut Abc_Obj_t) -> f32;
}
extern "C" {
    pub fn Abc_NodeReadRequiredWorst(pNode: *mut Abc_Obj_t) -> f32;
}
extern "C" {
    pub fn Abc_NtkReadDefaultInputDrive(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NtkReadDefaultOutputLoad(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NodeReadInputDrive(
        pNtk: *mut Abc_Ntk_t,
        iPi: ::std::os::raw::c_int,
    ) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NodeReadOutputLoad(
        pNtk: *mut Abc_Ntk_t,
        iPo: ::std::os::raw::c_int,
    ) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NodeReadInputDriveWorst(pNtk: *mut Abc_Ntk_t, iPi: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn Abc_NodeReadOutputLoadWorst(pNtk: *mut Abc_Ntk_t, iPo: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn Abc_NtkTimeSetDefaultArrival(pNtk: *mut Abc_Ntk_t, Rise: f32, Fall: f32);
}
extern "C" {
    pub fn Abc_NtkTimeSetDefaultRequired(pNtk: *mut Abc_Ntk_t, Rise: f32, Fall: f32);
}
extern "C" {
    pub fn Abc_NtkTimeSetArrival(
        pNtk: *mut Abc_Ntk_t,
        ObjId: ::std::os::raw::c_int,
        Rise: f32,
        Fall: f32,
    );
}
extern "C" {
    pub fn Abc_NtkTimeSetRequired(
        pNtk: *mut Abc_Ntk_t,
        ObjId: ::std::os::raw::c_int,
        Rise: f32,
        Fall: f32,
    );
}
extern "C" {
    pub fn Abc_NtkTimeSetDefaultInputDrive(pNtk: *mut Abc_Ntk_t, Rise: f32, Fall: f32);
}
extern "C" {
    pub fn Abc_NtkTimeSetDefaultOutputLoad(pNtk: *mut Abc_Ntk_t, Rise: f32, Fall: f32);
}
extern "C" {
    pub fn Abc_NtkTimeSetInputDrive(
        pNtk: *mut Abc_Ntk_t,
        PiNum: ::std::os::raw::c_int,
        Rise: f32,
        Fall: f32,
    );
}
extern "C" {
    pub fn Abc_NtkTimeSetOutputLoad(
        pNtk: *mut Abc_Ntk_t,
        PoNum: ::std::os::raw::c_int,
        Rise: f32,
        Fall: f32,
    );
}
extern "C" {
    pub fn Abc_NtkTimeInitialize(pNtk: *mut Abc_Ntk_t, pNtkOld: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_ManTimeStop(p: *mut Abc_ManTime_t);
}
extern "C" {
    pub fn Abc_ManTimeDup(pNtkOld: *mut Abc_Ntk_t, pNtkNew: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkSetNodeLevelsArrival(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkGetCiArrivalFloats(pNtk: *mut Abc_Ntk_t) -> *mut f32;
}
extern "C" {
    pub fn Abc_NtkGetCoRequiredFloats(pNtk: *mut Abc_Ntk_t) -> *mut f32;
}
extern "C" {
    pub fn Abc_NtkGetCiArrivalTimes(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NtkGetCoRequiredTimes(pNtk: *mut Abc_Ntk_t) -> *mut Abc_Time_t;
}
extern "C" {
    pub fn Abc_NtkDelayTrace(
        pNtk: *mut Abc_Ntk_t,
        pOut: *mut Abc_Obj_t,
        pIn: *mut Abc_Obj_t,
        fPrint: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn Abc_ObjLevelNew(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_ObjReverseLevelNew(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_ObjRequiredLevel(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_ObjReverseLevel(pObj: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_ObjSetReverseLevel(pObj: *mut Abc_Obj_t, LevelR: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_NtkStartReverseLevels(
        pNtk: *mut Abc_Ntk_t,
        nMaxLevelIncrease: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_NtkStopReverseLevels(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkUpdateLevel(pObjNew: *mut Abc_Obj_t, vLevels: *mut Vec_Vec_t);
}
extern "C" {
    pub fn Abc_NtkUpdateReverseLevel(pObjNew: *mut Abc_Obj_t, vLevels: *mut Vec_Vec_t);
}
extern "C" {
    pub fn Abc_NtkUpdate(pObj: *mut Abc_Obj_t, pObjNew: *mut Abc_Obj_t, vLevels: *mut Vec_Vec_t);
}
extern "C" {
    pub fn Abc_NtkAttrFree(
        pNtk: *mut Abc_Ntk_t,
        Attr: ::std::os::raw::c_int,
        fFreeMan: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NtkOrderCisCos(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkGetCubeNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetCubePairNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetLitNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetLitFactNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetBddNodeNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetAigNodeNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetClauseNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetMappedArea(pNtk: *mut Abc_Ntk_t) -> f64;
}
extern "C" {
    pub fn Abc_NtkGetExorNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetMuxNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetBufNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetLargeNodeNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetChoiceNum(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetFaninMax(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetFanoutMax(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkGetTotalFanins(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkCleanCopy(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanCopy_rec(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanData(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkFillTemp(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCountCopy(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkSaveCopy(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkLoadCopy(pNtk: *mut Abc_Ntk_t, vCopies: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Abc_NtkCleanNext(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanNext_rec(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanMarkA(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanMarkB(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanMarkC(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanMarkAB(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkCleanMarkABC(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NodeFindFanin(
        pNode: *mut Abc_Obj_t,
        pFanin: *mut Abc_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeFindCoFanout(pNode: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NodeFindNonCoFanout(pNode: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NodeHasUniqueCoFanout(pNode: *mut Abc_Obj_t) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkLogicHasSimpleCos(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkLogicMakeSimpleCos(
        pNtk: *mut Abc_Ntk_t,
        fDuplicate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_VecObjPushUniqueOrderByLevel(p: *mut Vec_Ptr_t, pNode: *mut Abc_Obj_t);
}
extern "C" {
    pub fn Abc_NodeIsExorType(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeIsMuxType(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeIsMuxControlType(pNode: *mut Abc_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeRecognizeMux(
        pNode: *mut Abc_Obj_t,
        ppNodeT: *mut *mut Abc_Obj_t,
        ppNodeE: *mut *mut Abc_Obj_t,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Abc_NtkPrepareTwoNtks(
        pErr: *mut FILE,
        pNtk: *mut Abc_Ntk_t,
        argv: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        ppNtk1: *mut *mut Abc_Ntk_t,
        ppNtk2: *mut *mut Abc_Ntk_t,
        pfDelete1: *mut ::std::os::raw::c_int,
        pfDelete2: *mut ::std::os::raw::c_int,
        fCheck: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeCollectFanins(pNode: *mut Abc_Obj_t, vNodes: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Abc_NodeCollectFanouts(pNode: *mut Abc_Obj_t, vNodes: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Abc_NtkCollectLatches(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NodeCompareLevelsIncrease(
        pp1: *mut *mut Abc_Obj_t,
        pp2: *mut *mut Abc_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NodeCompareLevelsDecrease(
        pp1: *mut *mut Abc_Obj_t,
        pp2: *mut *mut Abc_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkFanoutCounts(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_NtkCollectObjects(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_NtkGetCiIds(pNtk: *mut Abc_Ntk_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_NtkReassignIds(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_ObjPointerCompare(
        pp1: *mut *mut ::std::os::raw::c_void,
        pp2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkTransferCopy(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkInvertConstraints(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkPrintCiLevels(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkReverseTopoOrder(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_NtkIsTopo(pNtk: *mut Abc_Ntk_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkTransferPhases(pNtkNew: *mut Abc_Ntk_t, pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_SopSynthesizeOne(
        pSop: *mut ::std::os::raw::c_char,
        fClp: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Abc_NtkVerifyGetCleanModel(
        pNtk: *mut Abc_Ntk_t,
        nFrames: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkVerifySimulatePattern(
        pNtk: *mut Abc_Ntk_t,
        pModel: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkIsTrueCex(pNtk: *mut Abc_Ntk_t, pCex: *mut Abc_Cex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkIsValidCex(pNtk: *mut Abc_Ntk_t, pCex: *mut Abc_Cex_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_Frame_t_ {
    _unused: [u8; 0],
}
pub type Abc_Frame_t = Abc_Frame_t_;
extern "C" {
    pub fn Abc_Start();
}
extern "C" {
    pub fn Abc_Stop();
}
extern "C" {
    pub fn Abc_FrameGetGlobalFrame() -> *mut Abc_Frame_t;
}
extern "C" {
    pub fn Cmd_CommandExecute(
        pAbc: *mut Abc_Frame_t,
        pCommandLine: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkInputMiniAig(pAbc: *mut Abc_Frame_t, pMiniAig: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_NtkOutputMiniAig(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameGiaInputMiniAig(pAbc: *mut Abc_Frame_t, p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameGiaOutputMiniAig(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_NtkSetFlopNum(pAbc: *mut Abc_Frame_t, nFlops: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_FrameGiaInputMiniLut(pAbc: *mut Abc_Frame_t, pMiniLut: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameGiaInputMiniLut2(pAbc: *mut Abc_Frame_t, pMiniLut: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameGiaOutputMiniLut(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameGiaOutputMiniLutAttr(
        pAbc: *mut Abc_Frame_t,
        pMiniLut: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_FrameReadMiniLutSwitching(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadMiniLutSwitchingPo(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameInputNdr(pAbc: *mut Abc_Frame_t, pData: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameOutputNdr(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameOutputNdrArray(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkSetCiArrivalTime(
        pAbc: *mut Abc_Frame_t,
        iCi: ::std::os::raw::c_int,
        Rise: f32,
        Fall: f32,
    );
}
extern "C" {
    pub fn Abc_NtkSetCoRequiredTime(
        pAbc: *mut Abc_Frame_t,
        iCo: ::std::os::raw::c_int,
        Rise: f32,
        Fall: f32,
    );
}
extern "C" {
    pub fn Abc_NtkSetAndGateDelay(pAbc: *mut Abc_Frame_t, Delay: f32);
}
extern "C" {
    pub fn Abc_NtkOutputMiniMapping(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NtkPrintMiniMapping(pArray: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_FrameReadArrayMapping(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadBoxes(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadProbStatus(pAbc: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadCex(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameSetRetimingData(
        pAbc: *mut Abc_Frame_t,
        pRst: *mut ::std::os::raw::c_int,
        pSet: *mut ::std::os::raw::c_int,
        pEna: *mut ::std::os::raw::c_int,
        nRegs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Abc_FrameReadMiniAigEquivClasses(pAbc: *mut Abc_Frame_t) -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MvCommand {
    _unused: [u8; 0],
}
pub type Abc_Command = MvCommand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MvAlias {
    _unused: [u8; 0],
}
pub type Abc_Alias = MvAlias;
extern "C" {
    pub fn Cmd_Init(pAbc: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Cmd_End(pAbc: *mut Abc_Frame_t);
}
pub type Cmd_CommandFuncType = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut Abc_Frame_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn Cmd_CommandIsDefined(
        pAbc: *mut Abc_Frame_t,
        sName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cmd_CommandAdd(
        pAbc: *mut Abc_Frame_t,
        sGroup: *const ::std::os::raw::c_char,
        sName: *const ::std::os::raw::c_char,
        pFunc: Cmd_CommandFuncType,
        fChanges: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Cmd_FlagReadByName(
        pAbc: *mut Abc_Frame_t,
        flag: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Cmd_FlagDeleteByName(pAbc: *mut Abc_Frame_t, key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Cmd_FlagUpdateValue(
        pAbc: *mut Abc_Frame_t,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Cmd_HistoryAddCommand(pAbc: *mut Abc_Frame_t, command: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Cmd_HistoryRead(p: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Cmd_HistoryWrite(p: *mut Abc_Frame_t, Limit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Cmd_HistoryPrint(p: *mut Abc_Frame_t, Limit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CmdCommandLoad(
        pAbc: *mut Abc_Frame_t,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abc_Nam_t_ {
    _unused: [u8; 0],
}
pub type Abc_Nam_t = Abc_Nam_t_;
extern "C" {
    pub fn Abc_NamStart(
        nObjs: ::std::os::raw::c_int,
        nAveSize: ::std::os::raw::c_int,
    ) -> *mut Abc_Nam_t;
}
extern "C" {
    pub fn Abc_NamStop(p: *mut Abc_Nam_t);
}
extern "C" {
    pub fn Abc_NamPrint(p: *mut Abc_Nam_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Abc_NamSave(p: *mut Abc_Nam_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Abc_NamLoad(pFileName: *mut ::std::os::raw::c_char) -> *mut Abc_Nam_t;
}
extern "C" {
    pub fn Abc_NamRef(p: *mut Abc_Nam_t) -> *mut Abc_Nam_t;
}
extern "C" {
    pub fn Abc_NamDeref(p: *mut Abc_Nam_t);
}
extern "C" {
    pub fn Abc_NamObjNumMax(p: *mut Abc_Nam_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamMemUsed(p: *mut Abc_Nam_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamMemAlloc(p: *mut Abc_Nam_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamStrFind(
        p: *mut Abc_Nam_t,
        pStr: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamStrFindLim(
        p: *mut Abc_Nam_t,
        pStr: *mut ::std::os::raw::c_char,
        pLim: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamStrFindOrAdd(
        p: *mut Abc_Nam_t,
        pStr: *mut ::std::os::raw::c_char,
        pfFound: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamStrFindOrAddLim(
        p: *mut Abc_Nam_t,
        pStr: *mut ::std::os::raw::c_char,
        pLim: *mut ::std::os::raw::c_char,
        pfFound: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamStrFindOrAddF(
        p: *mut Abc_Nam_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamStr(p: *mut Abc_Nam_t, id: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_NamBuffer(p: *mut Abc_Nam_t) -> *mut Vec_Str_t;
}
extern "C" {
    pub fn Abc_NamComputeIdMap(p1: *mut Abc_Nam_t, p2: *mut Abc_Nam_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_NamReportCommon(
        vNameIds1: *mut Vec_Int_t,
        p1: *mut Abc_Nam_t,
        p2: *mut Abc_Nam_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_NamReportUnique(
        vNameIds1: *mut Vec_Int_t,
        p1: *mut Abc_Nam_t,
        p2: *mut Abc_Nam_t,
    ) -> *mut ::std::os::raw::c_char;
}
pub const Io_FileType_t_IO_FILE_NONE: Io_FileType_t = 0;
pub const Io_FileType_t_IO_FILE_AIGER: Io_FileType_t = 1;
pub const Io_FileType_t_IO_FILE_BAF: Io_FileType_t = 2;
pub const Io_FileType_t_IO_FILE_BBLIF: Io_FileType_t = 3;
pub const Io_FileType_t_IO_FILE_BLIF: Io_FileType_t = 4;
pub const Io_FileType_t_IO_FILE_BLIFMV: Io_FileType_t = 5;
pub const Io_FileType_t_IO_FILE_BENCH: Io_FileType_t = 6;
pub const Io_FileType_t_IO_FILE_BOOK: Io_FileType_t = 7;
pub const Io_FileType_t_IO_FILE_CNF: Io_FileType_t = 8;
pub const Io_FileType_t_IO_FILE_DOT: Io_FileType_t = 9;
pub const Io_FileType_t_IO_FILE_EDIF: Io_FileType_t = 10;
pub const Io_FileType_t_IO_FILE_EQN: Io_FileType_t = 11;
pub const Io_FileType_t_IO_FILE_GML: Io_FileType_t = 12;
pub const Io_FileType_t_IO_FILE_JSON: Io_FileType_t = 13;
pub const Io_FileType_t_IO_FILE_LIST: Io_FileType_t = 14;
pub const Io_FileType_t_IO_FILE_PLA: Io_FileType_t = 15;
pub const Io_FileType_t_IO_FILE_MOPLA: Io_FileType_t = 16;
pub const Io_FileType_t_IO_FILE_SMV: Io_FileType_t = 17;
pub const Io_FileType_t_IO_FILE_VERILOG: Io_FileType_t = 18;
pub const Io_FileType_t_IO_FILE_UNKNOWN: Io_FileType_t = 19;
pub type Io_FileType_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn Io_ReadAiger(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadBaf(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadBblif(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadBlif(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadBlifMv(
        pFileName: *mut ::std::os::raw::c_char,
        fBlifMv: ::std::os::raw::c_int,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadBench(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadBenchInit(pNtk: *mut Abc_Ntk_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_ReadEdif(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadEqn(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadPla(
        pFileName: *mut ::std::os::raw::c_char,
        fZeros: ::std::os::raw::c_int,
        fBoth: ::std::os::raw::c_int,
        fOnDc: ::std::os::raw::c_int,
        fSkipPrepro: ::std::os::raw::c_int,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_ReadVerilog(
        pFileName: *mut ::std::os::raw::c_char,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_WriteAiger(
        pNtk: *mut Abc_Ntk_t,
        pFileName: *mut ::std::os::raw::c_char,
        fWriteSymbols: ::std::os::raw::c_int,
        fCompact: ::std::os::raw::c_int,
        fUnique: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WriteAigerCex(
        pCex: *mut Abc_Cex_t,
        pNtk: *mut Abc_Ntk_t,
        pG: *mut ::std::os::raw::c_void,
        pFileName: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Io_WriteBaf(pNtk: *mut Abc_Ntk_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteBblif(pNtk: *mut Abc_Ntk_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteBlifLogic(
        pNtk: *mut Abc_Ntk_t,
        pFileName: *mut ::std::os::raw::c_char,
        fWriteLatches: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WriteBlif(
        pNtk: *mut Abc_Ntk_t,
        pFileName: *mut ::std::os::raw::c_char,
        fWriteLatches: ::std::os::raw::c_int,
        fBb2Wb: ::std::os::raw::c_int,
        fSeq: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WriteTimingInfo(pFile: *mut FILE, pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Io_WriteBlifSpecial(
        pNtk: *mut Abc_Ntk_t,
        FileName: *mut ::std::os::raw::c_char,
        pLutStruct: *mut ::std::os::raw::c_char,
        fUseHie: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WriteBlifMv(pNtk: *mut Abc_Ntk_t, FileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteBench(
        pNtk: *mut Abc_Ntk_t,
        FileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Io_WriteBenchLut(
        pNtk: *mut Abc_Ntk_t,
        FileName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Io_WriteBook(pNtk: *mut Abc_Ntk_t, FileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteCnf(
        pNtk: *mut Abc_Ntk_t,
        FileName: *mut ::std::os::raw::c_char,
        fAllPrimes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Io_WriteDot(pNtk: *mut Abc_Ntk_t, FileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteDotNtk(
        pNtk: *mut Abc_Ntk_t,
        vNodes: *mut Vec_Ptr_t,
        vNodesShow: *mut Vec_Ptr_t,
        pFileName: *mut ::std::os::raw::c_char,
        fGateNames: ::std::os::raw::c_int,
        fUseReverse: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WriteDotSeq(
        pNtk: *mut Abc_Ntk_t,
        vNodes: *mut Vec_Ptr_t,
        vNodesShow: *mut Vec_Ptr_t,
        pFileName: *mut ::std::os::raw::c_char,
        fGateNames: ::std::os::raw::c_int,
        fUseReverse: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WriteEqn(pNtk: *mut Abc_Ntk_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteEdgelist(
        pNtk: *mut Abc_Ntk_t,
        pFileName: *mut ::std::os::raw::c_char,
        fWriteLatches: ::std::os::raw::c_int,
        fBb2Wb: ::std::os::raw::c_int,
        fSeq: ::std::os::raw::c_int,
        fName: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WriteGml(pNtk: *mut Abc_Ntk_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteList(
        pNtk: *mut Abc_Ntk_t,
        pFileName: *mut ::std::os::raw::c_char,
        fUseHost: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_WritePla(
        pNtk: *mut Abc_Ntk_t,
        FileName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Io_WriteMoPla(
        pNtk: *mut Abc_Ntk_t,
        FileName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Io_WriteSmv(
        pNtk: *mut Abc_Ntk_t,
        FileName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Io_WriteVerilog(
        pNtk: *mut Abc_Ntk_t,
        FileName: *mut ::std::os::raw::c_char,
        fOnlyAnds: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Io_ReadFileType(pFileName: *mut ::std::os::raw::c_char) -> Io_FileType_t;
}
extern "C" {
    pub fn Io_ReadLibType(pFileName: *mut ::std::os::raw::c_char) -> Io_FileType_t;
}
extern "C" {
    pub fn Io_ReadNetlist(
        pFileName: *mut ::std::os::raw::c_char,
        FileType: Io_FileType_t,
        fCheck: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_Read(
        pFileName: *mut ::std::os::raw::c_char,
        FileType: Io_FileType_t,
        fCheck: ::std::os::raw::c_int,
        fBarBufs: ::std::os::raw::c_int,
    ) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Io_Write(
        pNtk: *mut Abc_Ntk_t,
        pFileName: *mut ::std::os::raw::c_char,
        FileType: Io_FileType_t,
    );
}
extern "C" {
    pub fn Io_WriteHie(
        pNtk: *mut Abc_Ntk_t,
        pBaseName: *mut ::std::os::raw::c_char,
        pFileName: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Io_ReadCreatePi(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreatePo(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreateLatch(
        pNtk: *mut Abc_Ntk_t,
        pNetLI: *mut ::std::os::raw::c_char,
        pNetLO: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreateResetLatch(
        pNtk: *mut Abc_Ntk_t,
        fBlifMv: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreateResetMux(
        pNtk: *mut Abc_Ntk_t,
        pResetLO: *mut ::std::os::raw::c_char,
        pDataLI: *mut ::std::os::raw::c_char,
        fBlifMv: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreateNode(
        pNtk: *mut Abc_Ntk_t,
        pNameOut: *mut ::std::os::raw::c_char,
        pNamesIn: *mut *mut ::std::os::raw::c_char,
        nInputs: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreateConst(
        pNtk: *mut Abc_Ntk_t,
        pName: *mut ::std::os::raw::c_char,
        fConst1: ::std::os::raw::c_int,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreateInv(
        pNtk: *mut Abc_Ntk_t,
        pNameIn: *mut ::std::os::raw::c_char,
        pNameOut: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_ReadCreateBuf(
        pNtk: *mut Abc_Ntk_t,
        pNameIn: *mut ::std::os::raw::c_char,
        pNameOut: *mut ::std::os::raw::c_char,
    ) -> *mut Abc_Obj_t;
}
extern "C" {
    pub fn Io_FileOpen(
        FileName: *const ::std::os::raw::c_char,
        PathVar: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn Io_ReadJson(pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Io_WriteJson(pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Abc_FrameReadNtk(p: *mut Abc_Frame_t) -> *mut Abc_Ntk_t;
}
extern "C" {
    pub fn Abc_FrameReadGia(p: *mut Abc_Frame_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Abc_FrameReadOut(p: *mut Abc_Frame_t) -> *mut FILE;
}
extern "C" {
    pub fn Abc_FrameReadErr(p: *mut Abc_Frame_t) -> *mut FILE;
}
extern "C" {
    pub fn Abc_FrameReadMode(p: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameSetMode(
        p: *mut Abc_Frame_t,
        fNameMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameRestart(p: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Abc_FrameShowProgress(p: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameClearVerifStatus(p: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Abc_FrameUpdateGia(p: *mut Abc_Frame_t, pNew: *mut Gia_Man_t);
}
extern "C" {
    pub fn Abc_FrameGetGia(p: *mut Abc_Frame_t) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Abc_FrameSetCurrentNetwork(p: *mut Abc_Frame_t, pNet: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_FrameSwapCurrentAndBackup(p: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Abc_FrameReplaceCurrentNetwork(p: *mut Abc_Frame_t, pNet: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_FrameUnmapAllNetworks(p: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Abc_FrameDeleteAllNetworks(p: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Abc_FrameSetGlobalFrame(p: *mut Abc_Frame_t);
}
extern "C" {
    pub fn Abc_FrameReadGlobalFrame() -> *mut Abc_Frame_t;
}
extern "C" {
    pub fn Abc_FrameReadStore() -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_FrameReadStoreSize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadLibLut() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadLibBox() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadLibGen() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadLibGen2() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadLibSuper() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadLibScl() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadManDd() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadManDec() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadManDsd() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadManDsd2() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Abc_FrameReadSignalNames() -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_FrameReadSpecName() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_FrameReadFlag(pFlag: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_FrameIsFlagEnabled(pFlag: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameIsBatchMode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameSetBatchMode(Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_FrameIsBridgeMode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameSetBridgeMode();
}
extern "C" {
    pub fn Abc_FrameReadBmcFrames(p: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadCexVec(p: *mut Abc_Frame_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_FrameReadStatusVec(p: *mut Abc_Frame_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_FrameReadPoEquivs(p: *mut Abc_Frame_t) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Abc_FrameReadPoStatuses(p: *mut Abc_Frame_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_FrameReadObjIds(p: *mut Abc_Frame_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Abc_FrameReadJsonStrs(p: *mut Abc_Frame_t) -> *mut Abc_Nam_t;
}
extern "C" {
    pub fn Abc_FrameReadJsonObjs(p: *mut Abc_Frame_t) -> *mut Vec_Wec_t;
}
extern "C" {
    pub fn Abc_FrameReadCexPiNum(p: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadCexRegNum(p: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadCexPo(p: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReadCexFrame(p: *mut Abc_Frame_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameSetNtkStore(pNtk: *mut Abc_Ntk_t);
}
extern "C" {
    pub fn Abc_FrameSetNtkStoreSize(nStored: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_FrameSetLibLut(pLib: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetLibBox(pLib: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetLibGen(pLib: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetLibGen2(pLib: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetLibSuper(pLib: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetLibVer(pLib: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetFlag(
        pFlag: *mut ::std::os::raw::c_char,
        pValue: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Abc_FrameSetCex(pCex: *mut Abc_Cex_t);
}
extern "C" {
    pub fn Abc_FrameSetNFrames(nFrames: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_FrameSetStatus(Status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_FrameSetManDsd(pMan: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetManDsd2(pMan: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Abc_FrameSetInv(vInv: *mut Vec_Int_t);
}
extern "C" {
    pub fn Abc_FrameSetCnf(vInv: *mut Vec_Int_t);
}
extern "C" {
    pub fn Abc_FrameSetStr(vInv: *mut Vec_Str_t);
}
extern "C" {
    pub fn Abc_FrameSetJsonStrs(pStrs: *mut Abc_Nam_t);
}
extern "C" {
    pub fn Abc_FrameSetJsonObjs(vObjs: *mut Vec_Wec_t);
}
extern "C" {
    pub fn Abc_FrameSetSignalNames(vNames: *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Abc_FrameSetSpecName(pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Abc_FrameCheckPoConst(
        p: *mut Abc_Frame_t,
        iPoNum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Abc_FrameReplaceCex(pAbc: *mut Abc_Frame_t, ppCex: *mut *mut Abc_Cex_t);
}
extern "C" {
    pub fn Abc_FrameReplaceCexVec(pAbc: *mut Abc_Frame_t, pvCexVec: *mut *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Abc_FrameReplacePoEquivs(pAbc: *mut Abc_Frame_t, pvPoEquivs: *mut *mut Vec_Ptr_t);
}
extern "C" {
    pub fn Abc_FrameReplacePoStatuses(pAbc: *mut Abc_Frame_t, pvStatuses: *mut *mut Vec_Int_t);
}
extern "C" {
    pub fn Abc_FrameReadDrivingCell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Abc_FrameReadMaxLoad() -> f32;
}
extern "C" {
    pub fn Abc_FrameSetDrivingCell(pName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Abc_FrameSetMaxLoad(Load: f32);
}
extern "C" {
    pub fn Abc_FrameSetArrayMapping(p: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn Abc_FrameSetBoxes(p: *mut ::std::os::raw::c_int);
}
pub type Cec_ParSat_t = Cec_ParSat_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParSat_t_ {
    pub SolverType: ::std::os::raw::c_int,
    pub nBTLimit: ::std::os::raw::c_int,
    pub nSatVarMax: ::std::os::raw::c_int,
    pub nCallsRecycle: ::std::os::raw::c_int,
    pub fNonChrono: ::std::os::raw::c_int,
    pub fPolarFlip: ::std::os::raw::c_int,
    pub fCheckMiter: ::std::os::raw::c_int,
    pub fLearnCls: ::std::os::raw::c_int,
    pub fSaveCexes: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParSat_t_"][::std::mem::size_of::<Cec_ParSat_t_>() - 40usize];
    ["Alignment of Cec_ParSat_t_"][::std::mem::align_of::<Cec_ParSat_t_>() - 4usize];
    ["Offset of field: Cec_ParSat_t_::SolverType"]
        [::std::mem::offset_of!(Cec_ParSat_t_, SolverType) - 0usize];
    ["Offset of field: Cec_ParSat_t_::nBTLimit"]
        [::std::mem::offset_of!(Cec_ParSat_t_, nBTLimit) - 4usize];
    ["Offset of field: Cec_ParSat_t_::nSatVarMax"]
        [::std::mem::offset_of!(Cec_ParSat_t_, nSatVarMax) - 8usize];
    ["Offset of field: Cec_ParSat_t_::nCallsRecycle"]
        [::std::mem::offset_of!(Cec_ParSat_t_, nCallsRecycle) - 12usize];
    ["Offset of field: Cec_ParSat_t_::fNonChrono"]
        [::std::mem::offset_of!(Cec_ParSat_t_, fNonChrono) - 16usize];
    ["Offset of field: Cec_ParSat_t_::fPolarFlip"]
        [::std::mem::offset_of!(Cec_ParSat_t_, fPolarFlip) - 20usize];
    ["Offset of field: Cec_ParSat_t_::fCheckMiter"]
        [::std::mem::offset_of!(Cec_ParSat_t_, fCheckMiter) - 24usize];
    ["Offset of field: Cec_ParSat_t_::fLearnCls"]
        [::std::mem::offset_of!(Cec_ParSat_t_, fLearnCls) - 28usize];
    ["Offset of field: Cec_ParSat_t_::fSaveCexes"]
        [::std::mem::offset_of!(Cec_ParSat_t_, fSaveCexes) - 32usize];
    ["Offset of field: Cec_ParSat_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParSat_t_, fVerbose) - 36usize];
};
pub type Cec_ParSim_t = Cec_ParSim_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParSim_t_ {
    pub nWords: ::std::os::raw::c_int,
    pub nFrames: ::std::os::raw::c_int,
    pub nRounds: ::std::os::raw::c_int,
    pub nNonRefines: ::std::os::raw::c_int,
    pub TimeLimit: ::std::os::raw::c_int,
    pub fDualOut: ::std::os::raw::c_int,
    pub fCheckMiter: ::std::os::raw::c_int,
    pub fSeqSimulate: ::std::os::raw::c_int,
    pub fLatchCorr: ::std::os::raw::c_int,
    pub fConstCorr: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParSim_t_"][::std::mem::size_of::<Cec_ParSim_t_>() - 48usize];
    ["Alignment of Cec_ParSim_t_"][::std::mem::align_of::<Cec_ParSim_t_>() - 4usize];
    ["Offset of field: Cec_ParSim_t_::nWords"]
        [::std::mem::offset_of!(Cec_ParSim_t_, nWords) - 0usize];
    ["Offset of field: Cec_ParSim_t_::nFrames"]
        [::std::mem::offset_of!(Cec_ParSim_t_, nFrames) - 4usize];
    ["Offset of field: Cec_ParSim_t_::nRounds"]
        [::std::mem::offset_of!(Cec_ParSim_t_, nRounds) - 8usize];
    ["Offset of field: Cec_ParSim_t_::nNonRefines"]
        [::std::mem::offset_of!(Cec_ParSim_t_, nNonRefines) - 12usize];
    ["Offset of field: Cec_ParSim_t_::TimeLimit"]
        [::std::mem::offset_of!(Cec_ParSim_t_, TimeLimit) - 16usize];
    ["Offset of field: Cec_ParSim_t_::fDualOut"]
        [::std::mem::offset_of!(Cec_ParSim_t_, fDualOut) - 20usize];
    ["Offset of field: Cec_ParSim_t_::fCheckMiter"]
        [::std::mem::offset_of!(Cec_ParSim_t_, fCheckMiter) - 24usize];
    ["Offset of field: Cec_ParSim_t_::fSeqSimulate"]
        [::std::mem::offset_of!(Cec_ParSim_t_, fSeqSimulate) - 28usize];
    ["Offset of field: Cec_ParSim_t_::fLatchCorr"]
        [::std::mem::offset_of!(Cec_ParSim_t_, fLatchCorr) - 32usize];
    ["Offset of field: Cec_ParSim_t_::fConstCorr"]
        [::std::mem::offset_of!(Cec_ParSim_t_, fConstCorr) - 36usize];
    ["Offset of field: Cec_ParSim_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Cec_ParSim_t_, fVeryVerbose) - 40usize];
    ["Offset of field: Cec_ParSim_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParSim_t_, fVerbose) - 44usize];
};
pub type Cec_ParSmf_t = Cec_ParSmf_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParSmf_t_ {
    pub nWords: ::std::os::raw::c_int,
    pub nRounds: ::std::os::raw::c_int,
    pub nFrames: ::std::os::raw::c_int,
    pub nNonRefines: ::std::os::raw::c_int,
    pub nMinOutputs: ::std::os::raw::c_int,
    pub nBTLimit: ::std::os::raw::c_int,
    pub TimeLimit: ::std::os::raw::c_int,
    pub fDualOut: ::std::os::raw::c_int,
    pub fCheckMiter: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParSmf_t_"][::std::mem::size_of::<Cec_ParSmf_t_>() - 40usize];
    ["Alignment of Cec_ParSmf_t_"][::std::mem::align_of::<Cec_ParSmf_t_>() - 4usize];
    ["Offset of field: Cec_ParSmf_t_::nWords"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, nWords) - 0usize];
    ["Offset of field: Cec_ParSmf_t_::nRounds"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, nRounds) - 4usize];
    ["Offset of field: Cec_ParSmf_t_::nFrames"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, nFrames) - 8usize];
    ["Offset of field: Cec_ParSmf_t_::nNonRefines"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, nNonRefines) - 12usize];
    ["Offset of field: Cec_ParSmf_t_::nMinOutputs"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, nMinOutputs) - 16usize];
    ["Offset of field: Cec_ParSmf_t_::nBTLimit"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, nBTLimit) - 20usize];
    ["Offset of field: Cec_ParSmf_t_::TimeLimit"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, TimeLimit) - 24usize];
    ["Offset of field: Cec_ParSmf_t_::fDualOut"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, fDualOut) - 28usize];
    ["Offset of field: Cec_ParSmf_t_::fCheckMiter"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, fCheckMiter) - 32usize];
    ["Offset of field: Cec_ParSmf_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParSmf_t_, fVerbose) - 36usize];
};
pub type Cec_ParFra_t = Cec_ParFra_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParFra_t_ {
    pub jType: ::std::os::raw::c_int,
    pub nWords: ::std::os::raw::c_int,
    pub nRounds: ::std::os::raw::c_int,
    pub nItersMax: ::std::os::raw::c_int,
    pub nBTLimit: ::std::os::raw::c_int,
    pub nBTLimitPo: ::std::os::raw::c_int,
    pub TimeLimit: ::std::os::raw::c_int,
    pub nLevelMax: ::std::os::raw::c_int,
    pub nDepthMax: ::std::os::raw::c_int,
    pub nCallsRecycle: ::std::os::raw::c_int,
    pub nSatVarMax: ::std::os::raw::c_int,
    pub nGenIters: ::std::os::raw::c_int,
    pub fRewriting: ::std::os::raw::c_int,
    pub fCheckMiter: ::std::os::raw::c_int,
    pub fDualOut: ::std::os::raw::c_int,
    pub fColorDiff: ::std::os::raw::c_int,
    pub fSatSweeping: ::std::os::raw::c_int,
    pub fRunCSat: ::std::os::raw::c_int,
    pub fUseCones: ::std::os::raw::c_int,
    pub fUseOrigIds: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub iOutFail: ::std::os::raw::c_int,
    pub fBMiterInfo: ::std::os::raw::c_int,
    pub nPO: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParFra_t_"][::std::mem::size_of::<Cec_ParFra_t_>() - 100usize];
    ["Alignment of Cec_ParFra_t_"][::std::mem::align_of::<Cec_ParFra_t_>() - 4usize];
    ["Offset of field: Cec_ParFra_t_::jType"]
        [::std::mem::offset_of!(Cec_ParFra_t_, jType) - 0usize];
    ["Offset of field: Cec_ParFra_t_::nWords"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nWords) - 4usize];
    ["Offset of field: Cec_ParFra_t_::nRounds"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nRounds) - 8usize];
    ["Offset of field: Cec_ParFra_t_::nItersMax"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nItersMax) - 12usize];
    ["Offset of field: Cec_ParFra_t_::nBTLimit"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nBTLimit) - 16usize];
    ["Offset of field: Cec_ParFra_t_::nBTLimitPo"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nBTLimitPo) - 20usize];
    ["Offset of field: Cec_ParFra_t_::TimeLimit"]
        [::std::mem::offset_of!(Cec_ParFra_t_, TimeLimit) - 24usize];
    ["Offset of field: Cec_ParFra_t_::nLevelMax"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nLevelMax) - 28usize];
    ["Offset of field: Cec_ParFra_t_::nDepthMax"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nDepthMax) - 32usize];
    ["Offset of field: Cec_ParFra_t_::nCallsRecycle"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nCallsRecycle) - 36usize];
    ["Offset of field: Cec_ParFra_t_::nSatVarMax"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nSatVarMax) - 40usize];
    ["Offset of field: Cec_ParFra_t_::nGenIters"]
        [::std::mem::offset_of!(Cec_ParFra_t_, nGenIters) - 44usize];
    ["Offset of field: Cec_ParFra_t_::fRewriting"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fRewriting) - 48usize];
    ["Offset of field: Cec_ParFra_t_::fCheckMiter"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fCheckMiter) - 52usize];
    ["Offset of field: Cec_ParFra_t_::fDualOut"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fDualOut) - 56usize];
    ["Offset of field: Cec_ParFra_t_::fColorDiff"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fColorDiff) - 60usize];
    ["Offset of field: Cec_ParFra_t_::fSatSweeping"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fSatSweeping) - 64usize];
    ["Offset of field: Cec_ParFra_t_::fRunCSat"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fRunCSat) - 68usize];
    ["Offset of field: Cec_ParFra_t_::fUseCones"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fUseCones) - 72usize];
    ["Offset of field: Cec_ParFra_t_::fUseOrigIds"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fUseOrigIds) - 76usize];
    ["Offset of field: Cec_ParFra_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fVeryVerbose) - 80usize];
    ["Offset of field: Cec_ParFra_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fVerbose) - 84usize];
    ["Offset of field: Cec_ParFra_t_::iOutFail"]
        [::std::mem::offset_of!(Cec_ParFra_t_, iOutFail) - 88usize];
    ["Offset of field: Cec_ParFra_t_::fBMiterInfo"]
        [::std::mem::offset_of!(Cec_ParFra_t_, fBMiterInfo) - 92usize];
    ["Offset of field: Cec_ParFra_t_::nPO"][::std::mem::offset_of!(Cec_ParFra_t_, nPO) - 96usize];
};
pub type Cec_ParCec_t = Cec_ParCec_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParCec_t_ {
    pub nBTLimit: ::std::os::raw::c_int,
    pub TimeLimit: ::std::os::raw::c_int,
    pub fUseSmartCnf: ::std::os::raw::c_int,
    pub fRewriting: ::std::os::raw::c_int,
    pub fNaive: ::std::os::raw::c_int,
    pub fSilent: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub iOutFail: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParCec_t_"][::std::mem::size_of::<Cec_ParCec_t_>() - 36usize];
    ["Alignment of Cec_ParCec_t_"][::std::mem::align_of::<Cec_ParCec_t_>() - 4usize];
    ["Offset of field: Cec_ParCec_t_::nBTLimit"]
        [::std::mem::offset_of!(Cec_ParCec_t_, nBTLimit) - 0usize];
    ["Offset of field: Cec_ParCec_t_::TimeLimit"]
        [::std::mem::offset_of!(Cec_ParCec_t_, TimeLimit) - 4usize];
    ["Offset of field: Cec_ParCec_t_::fUseSmartCnf"]
        [::std::mem::offset_of!(Cec_ParCec_t_, fUseSmartCnf) - 8usize];
    ["Offset of field: Cec_ParCec_t_::fRewriting"]
        [::std::mem::offset_of!(Cec_ParCec_t_, fRewriting) - 12usize];
    ["Offset of field: Cec_ParCec_t_::fNaive"]
        [::std::mem::offset_of!(Cec_ParCec_t_, fNaive) - 16usize];
    ["Offset of field: Cec_ParCec_t_::fSilent"]
        [::std::mem::offset_of!(Cec_ParCec_t_, fSilent) - 20usize];
    ["Offset of field: Cec_ParCec_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Cec_ParCec_t_, fVeryVerbose) - 24usize];
    ["Offset of field: Cec_ParCec_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParCec_t_, fVerbose) - 28usize];
    ["Offset of field: Cec_ParCec_t_::iOutFail"]
        [::std::mem::offset_of!(Cec_ParCec_t_, iOutFail) - 32usize];
};
pub type Cec_ParCor_t = Cec_ParCor_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParCor_t_ {
    pub nWords: ::std::os::raw::c_int,
    pub nRounds: ::std::os::raw::c_int,
    pub nFrames: ::std::os::raw::c_int,
    pub nPrefix: ::std::os::raw::c_int,
    pub nBTLimit: ::std::os::raw::c_int,
    pub nProcs: ::std::os::raw::c_int,
    pub nPartSize: ::std::os::raw::c_int,
    pub nLevelMax: ::std::os::raw::c_int,
    pub nStepsMax: ::std::os::raw::c_int,
    pub nLimitMax: ::std::os::raw::c_int,
    pub fLatchCorr: ::std::os::raw::c_int,
    pub fConstCorr: ::std::os::raw::c_int,
    pub fUseRings: ::std::os::raw::c_int,
    pub fMakeChoices: ::std::os::raw::c_int,
    pub fUseCSat: ::std::os::raw::c_int,
    pub fUseSmartCnf: ::std::os::raw::c_int,
    pub fStopWhenGone: ::std::os::raw::c_int,
    pub fVerboseFlops: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub pData: *mut ::std::os::raw::c_void,
    pub pFunc: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParCor_t_"][::std::mem::size_of::<Cec_ParCor_t_>() - 96usize];
    ["Alignment of Cec_ParCor_t_"][::std::mem::align_of::<Cec_ParCor_t_>() - 8usize];
    ["Offset of field: Cec_ParCor_t_::nWords"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nWords) - 0usize];
    ["Offset of field: Cec_ParCor_t_::nRounds"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nRounds) - 4usize];
    ["Offset of field: Cec_ParCor_t_::nFrames"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nFrames) - 8usize];
    ["Offset of field: Cec_ParCor_t_::nPrefix"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nPrefix) - 12usize];
    ["Offset of field: Cec_ParCor_t_::nBTLimit"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nBTLimit) - 16usize];
    ["Offset of field: Cec_ParCor_t_::nProcs"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nProcs) - 20usize];
    ["Offset of field: Cec_ParCor_t_::nPartSize"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nPartSize) - 24usize];
    ["Offset of field: Cec_ParCor_t_::nLevelMax"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nLevelMax) - 28usize];
    ["Offset of field: Cec_ParCor_t_::nStepsMax"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nStepsMax) - 32usize];
    ["Offset of field: Cec_ParCor_t_::nLimitMax"]
        [::std::mem::offset_of!(Cec_ParCor_t_, nLimitMax) - 36usize];
    ["Offset of field: Cec_ParCor_t_::fLatchCorr"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fLatchCorr) - 40usize];
    ["Offset of field: Cec_ParCor_t_::fConstCorr"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fConstCorr) - 44usize];
    ["Offset of field: Cec_ParCor_t_::fUseRings"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fUseRings) - 48usize];
    ["Offset of field: Cec_ParCor_t_::fMakeChoices"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fMakeChoices) - 52usize];
    ["Offset of field: Cec_ParCor_t_::fUseCSat"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fUseCSat) - 56usize];
    ["Offset of field: Cec_ParCor_t_::fUseSmartCnf"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fUseSmartCnf) - 60usize];
    ["Offset of field: Cec_ParCor_t_::fStopWhenGone"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fStopWhenGone) - 64usize];
    ["Offset of field: Cec_ParCor_t_::fVerboseFlops"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fVerboseFlops) - 68usize];
    ["Offset of field: Cec_ParCor_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fVeryVerbose) - 72usize];
    ["Offset of field: Cec_ParCor_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParCor_t_, fVerbose) - 76usize];
    ["Offset of field: Cec_ParCor_t_::pData"]
        [::std::mem::offset_of!(Cec_ParCor_t_, pData) - 80usize];
    ["Offset of field: Cec_ParCor_t_::pFunc"]
        [::std::mem::offset_of!(Cec_ParCor_t_, pFunc) - 88usize];
};
pub type Cec_ParChc_t = Cec_ParChc_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParChc_t_ {
    pub nWords: ::std::os::raw::c_int,
    pub nRounds: ::std::os::raw::c_int,
    pub nBTLimit: ::std::os::raw::c_int,
    pub fUseRings: ::std::os::raw::c_int,
    pub fUseCSat: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParChc_t_"][::std::mem::size_of::<Cec_ParChc_t_>() - 28usize];
    ["Alignment of Cec_ParChc_t_"][::std::mem::align_of::<Cec_ParChc_t_>() - 4usize];
    ["Offset of field: Cec_ParChc_t_::nWords"]
        [::std::mem::offset_of!(Cec_ParChc_t_, nWords) - 0usize];
    ["Offset of field: Cec_ParChc_t_::nRounds"]
        [::std::mem::offset_of!(Cec_ParChc_t_, nRounds) - 4usize];
    ["Offset of field: Cec_ParChc_t_::nBTLimit"]
        [::std::mem::offset_of!(Cec_ParChc_t_, nBTLimit) - 8usize];
    ["Offset of field: Cec_ParChc_t_::fUseRings"]
        [::std::mem::offset_of!(Cec_ParChc_t_, fUseRings) - 12usize];
    ["Offset of field: Cec_ParChc_t_::fUseCSat"]
        [::std::mem::offset_of!(Cec_ParChc_t_, fUseCSat) - 16usize];
    ["Offset of field: Cec_ParChc_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Cec_ParChc_t_, fVeryVerbose) - 20usize];
    ["Offset of field: Cec_ParChc_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParChc_t_, fVerbose) - 24usize];
};
pub type Cec_ParSeq_t = Cec_ParSeq_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cec_ParSeq_t_ {
    pub fUseLcorr: ::std::os::raw::c_int,
    pub fUseScorr: ::std::os::raw::c_int,
    pub nBTLimit: ::std::os::raw::c_int,
    pub nFrames: ::std::os::raw::c_int,
    pub nLevelMax: ::std::os::raw::c_int,
    pub fConsts: ::std::os::raw::c_int,
    pub fEquivs: ::std::os::raw::c_int,
    pub fUseMiniSat: ::std::os::raw::c_int,
    pub nMinDomSize: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cec_ParSeq_t_"][::std::mem::size_of::<Cec_ParSeq_t_>() - 44usize];
    ["Alignment of Cec_ParSeq_t_"][::std::mem::align_of::<Cec_ParSeq_t_>() - 4usize];
    ["Offset of field: Cec_ParSeq_t_::fUseLcorr"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, fUseLcorr) - 0usize];
    ["Offset of field: Cec_ParSeq_t_::fUseScorr"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, fUseScorr) - 4usize];
    ["Offset of field: Cec_ParSeq_t_::nBTLimit"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, nBTLimit) - 8usize];
    ["Offset of field: Cec_ParSeq_t_::nFrames"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, nFrames) - 12usize];
    ["Offset of field: Cec_ParSeq_t_::nLevelMax"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, nLevelMax) - 16usize];
    ["Offset of field: Cec_ParSeq_t_::fConsts"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, fConsts) - 20usize];
    ["Offset of field: Cec_ParSeq_t_::fEquivs"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, fEquivs) - 24usize];
    ["Offset of field: Cec_ParSeq_t_::fUseMiniSat"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, fUseMiniSat) - 28usize];
    ["Offset of field: Cec_ParSeq_t_::nMinDomSize"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, nMinDomSize) - 32usize];
    ["Offset of field: Cec_ParSeq_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, fVeryVerbose) - 36usize];
    ["Offset of field: Cec_ParSeq_t_::fVerbose"]
        [::std::mem::offset_of!(Cec_ParSeq_t_, fVerbose) - 40usize];
};
extern "C" {
    pub fn Cec_ManVerify(p: *mut Gia_Man_t, pPars: *mut Cec_ParCec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_ManVerifyTwo(
        p0: *mut Gia_Man_t,
        p1: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_ManVerifyTwoInv(
        p0: *mut Gia_Man_t,
        p1: *mut Gia_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_ManVerifySimple(p: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_ManChoiceComputation(
        pAig: *mut Gia_Man_t,
        pPars: *mut Cec_ParChc_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Cec_ManLSCorrespondenceClasses(
        pAig: *mut Gia_Man_t,
        pPars: *mut Cec_ParCor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_ManLSCorrespondence(
        pAig: *mut Gia_Man_t,
        pPars: *mut Cec_ParCor_t,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Cec_ManSatSetDefaultParams(p: *mut Cec_ParSat_t);
}
extern "C" {
    pub fn Cec_ManSimSetDefaultParams(p: *mut Cec_ParSim_t);
}
extern "C" {
    pub fn Cec_ManSmfSetDefaultParams(p: *mut Cec_ParSmf_t);
}
extern "C" {
    pub fn Cec_ManFraSetDefaultParams(p: *mut Cec_ParFra_t);
}
extern "C" {
    pub fn Cec_ManCecSetDefaultParams(p: *mut Cec_ParCec_t);
}
extern "C" {
    pub fn Cec_ManCorSetDefaultParams(p: *mut Cec_ParCor_t);
}
extern "C" {
    pub fn Cec_ManChcSetDefaultParams(p: *mut Cec_ParChc_t);
}
extern "C" {
    pub fn Cec_ManSatSweeping(
        pAig: *mut Gia_Man_t,
        pPars: *mut Cec_ParFra_t,
        fSilent: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Cec_ManSatSolving(
        pAig: *mut Gia_Man_t,
        pPars: *mut Cec_ParSat_t,
        f0Proved: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn Cec_ManSimulation(pAig: *mut Gia_Man_t, pPars: *mut Cec_ParSim_t);
}
extern "C" {
    pub fn Cec_ManSeqResimulateCounter(
        pAig: *mut Gia_Man_t,
        pPars: *mut Cec_ParSim_t,
        pCex: *mut Abc_Cex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_ManSeqSemiformal(
        pAig: *mut Gia_Man_t,
        pPars: *mut Cec_ParSmf_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_ManCheckNonTrivialCands(pAig: *mut Gia_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_SeqReadMinDomSize(p: *mut Cec_ParSeq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_SeqReadVerbose(p: *mut Cec_ParSeq_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cec_SeqSynthesisSetDefaultParams(pPars: *mut Cec_ParSeq_t);
}
extern "C" {
    pub fn Cec_SequentialSynthesisPart(
        p: *mut Gia_Man_t,
        pPars: *mut Cec_ParSeq_t,
    ) -> ::std::os::raw::c_int;
}
pub type Pdr_Par_t = Pdr_Par_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pdr_Par_t_ {
    pub nRecycle: ::std::os::raw::c_int,
    pub nFrameMax: ::std::os::raw::c_int,
    pub nConfLimit: ::std::os::raw::c_int,
    pub nConfGenLimit: ::std::os::raw::c_int,
    pub nRestLimit: ::std::os::raw::c_int,
    pub nTimeOut: ::std::os::raw::c_int,
    pub nTimeOutGap: ::std::os::raw::c_int,
    pub nTimeOutOne: ::std::os::raw::c_int,
    pub nRandomSeed: ::std::os::raw::c_int,
    pub fTwoRounds: ::std::os::raw::c_int,
    pub fMonoCnf: ::std::os::raw::c_int,
    pub fNewXSim: ::std::os::raw::c_int,
    pub fFlopPrio: ::std::os::raw::c_int,
    pub fFlopOrder: ::std::os::raw::c_int,
    pub fDumpInv: ::std::os::raw::c_int,
    pub fUseSupp: ::std::os::raw::c_int,
    pub fShortest: ::std::os::raw::c_int,
    pub fShiftStart: ::std::os::raw::c_int,
    pub fReuseProofOblig: ::std::os::raw::c_int,
    pub fSimpleGeneral: ::std::os::raw::c_int,
    pub fSkipGeneral: ::std::os::raw::c_int,
    pub fSkipDown: ::std::os::raw::c_int,
    pub fCtgs: ::std::os::raw::c_int,
    pub fUseAbs: ::std::os::raw::c_int,
    pub fUseSimpleRef: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
    pub fNotVerbose: ::std::os::raw::c_int,
    pub fSilent: ::std::os::raw::c_int,
    pub fSolveAll: ::std::os::raw::c_int,
    pub fStoreCex: ::std::os::raw::c_int,
    pub fAnytime: ::std::os::raw::c_int,
    pub fUseBridge: ::std::os::raw::c_int,
    pub fUsePropOut: ::std::os::raw::c_int,
    pub nFailOuts: ::std::os::raw::c_int,
    pub nDropOuts: ::std::os::raw::c_int,
    pub nProveOuts: ::std::os::raw::c_int,
    pub iFrame: ::std::os::raw::c_int,
    pub RunId: ::std::os::raw::c_int,
    pub pFuncStop: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub pFuncOnFail: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut Abc_Cex_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub timeLastSolved: abctime,
    pub vOutMap: *mut Vec_Int_t,
    pub pInvFileName: *mut ::std::os::raw::c_char,
    pub pCexFilePrefix: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pdr_Par_t_"][::std::mem::size_of::<Pdr_Par_t_>() - 208usize];
    ["Alignment of Pdr_Par_t_"][::std::mem::align_of::<Pdr_Par_t_>() - 8usize];
    ["Offset of field: Pdr_Par_t_::nRecycle"]
        [::std::mem::offset_of!(Pdr_Par_t_, nRecycle) - 0usize];
    ["Offset of field: Pdr_Par_t_::nFrameMax"]
        [::std::mem::offset_of!(Pdr_Par_t_, nFrameMax) - 4usize];
    ["Offset of field: Pdr_Par_t_::nConfLimit"]
        [::std::mem::offset_of!(Pdr_Par_t_, nConfLimit) - 8usize];
    ["Offset of field: Pdr_Par_t_::nConfGenLimit"]
        [::std::mem::offset_of!(Pdr_Par_t_, nConfGenLimit) - 12usize];
    ["Offset of field: Pdr_Par_t_::nRestLimit"]
        [::std::mem::offset_of!(Pdr_Par_t_, nRestLimit) - 16usize];
    ["Offset of field: Pdr_Par_t_::nTimeOut"]
        [::std::mem::offset_of!(Pdr_Par_t_, nTimeOut) - 20usize];
    ["Offset of field: Pdr_Par_t_::nTimeOutGap"]
        [::std::mem::offset_of!(Pdr_Par_t_, nTimeOutGap) - 24usize];
    ["Offset of field: Pdr_Par_t_::nTimeOutOne"]
        [::std::mem::offset_of!(Pdr_Par_t_, nTimeOutOne) - 28usize];
    ["Offset of field: Pdr_Par_t_::nRandomSeed"]
        [::std::mem::offset_of!(Pdr_Par_t_, nRandomSeed) - 32usize];
    ["Offset of field: Pdr_Par_t_::fTwoRounds"]
        [::std::mem::offset_of!(Pdr_Par_t_, fTwoRounds) - 36usize];
    ["Offset of field: Pdr_Par_t_::fMonoCnf"]
        [::std::mem::offset_of!(Pdr_Par_t_, fMonoCnf) - 40usize];
    ["Offset of field: Pdr_Par_t_::fNewXSim"]
        [::std::mem::offset_of!(Pdr_Par_t_, fNewXSim) - 44usize];
    ["Offset of field: Pdr_Par_t_::fFlopPrio"]
        [::std::mem::offset_of!(Pdr_Par_t_, fFlopPrio) - 48usize];
    ["Offset of field: Pdr_Par_t_::fFlopOrder"]
        [::std::mem::offset_of!(Pdr_Par_t_, fFlopOrder) - 52usize];
    ["Offset of field: Pdr_Par_t_::fDumpInv"]
        [::std::mem::offset_of!(Pdr_Par_t_, fDumpInv) - 56usize];
    ["Offset of field: Pdr_Par_t_::fUseSupp"]
        [::std::mem::offset_of!(Pdr_Par_t_, fUseSupp) - 60usize];
    ["Offset of field: Pdr_Par_t_::fShortest"]
        [::std::mem::offset_of!(Pdr_Par_t_, fShortest) - 64usize];
    ["Offset of field: Pdr_Par_t_::fShiftStart"]
        [::std::mem::offset_of!(Pdr_Par_t_, fShiftStart) - 68usize];
    ["Offset of field: Pdr_Par_t_::fReuseProofOblig"]
        [::std::mem::offset_of!(Pdr_Par_t_, fReuseProofOblig) - 72usize];
    ["Offset of field: Pdr_Par_t_::fSimpleGeneral"]
        [::std::mem::offset_of!(Pdr_Par_t_, fSimpleGeneral) - 76usize];
    ["Offset of field: Pdr_Par_t_::fSkipGeneral"]
        [::std::mem::offset_of!(Pdr_Par_t_, fSkipGeneral) - 80usize];
    ["Offset of field: Pdr_Par_t_::fSkipDown"]
        [::std::mem::offset_of!(Pdr_Par_t_, fSkipDown) - 84usize];
    ["Offset of field: Pdr_Par_t_::fCtgs"][::std::mem::offset_of!(Pdr_Par_t_, fCtgs) - 88usize];
    ["Offset of field: Pdr_Par_t_::fUseAbs"][::std::mem::offset_of!(Pdr_Par_t_, fUseAbs) - 92usize];
    ["Offset of field: Pdr_Par_t_::fUseSimpleRef"]
        [::std::mem::offset_of!(Pdr_Par_t_, fUseSimpleRef) - 96usize];
    ["Offset of field: Pdr_Par_t_::fVerbose"]
        [::std::mem::offset_of!(Pdr_Par_t_, fVerbose) - 100usize];
    ["Offset of field: Pdr_Par_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Pdr_Par_t_, fVeryVerbose) - 104usize];
    ["Offset of field: Pdr_Par_t_::fNotVerbose"]
        [::std::mem::offset_of!(Pdr_Par_t_, fNotVerbose) - 108usize];
    ["Offset of field: Pdr_Par_t_::fSilent"]
        [::std::mem::offset_of!(Pdr_Par_t_, fSilent) - 112usize];
    ["Offset of field: Pdr_Par_t_::fSolveAll"]
        [::std::mem::offset_of!(Pdr_Par_t_, fSolveAll) - 116usize];
    ["Offset of field: Pdr_Par_t_::fStoreCex"]
        [::std::mem::offset_of!(Pdr_Par_t_, fStoreCex) - 120usize];
    ["Offset of field: Pdr_Par_t_::fAnytime"]
        [::std::mem::offset_of!(Pdr_Par_t_, fAnytime) - 124usize];
    ["Offset of field: Pdr_Par_t_::fUseBridge"]
        [::std::mem::offset_of!(Pdr_Par_t_, fUseBridge) - 128usize];
    ["Offset of field: Pdr_Par_t_::fUsePropOut"]
        [::std::mem::offset_of!(Pdr_Par_t_, fUsePropOut) - 132usize];
    ["Offset of field: Pdr_Par_t_::nFailOuts"]
        [::std::mem::offset_of!(Pdr_Par_t_, nFailOuts) - 136usize];
    ["Offset of field: Pdr_Par_t_::nDropOuts"]
        [::std::mem::offset_of!(Pdr_Par_t_, nDropOuts) - 140usize];
    ["Offset of field: Pdr_Par_t_::nProveOuts"]
        [::std::mem::offset_of!(Pdr_Par_t_, nProveOuts) - 144usize];
    ["Offset of field: Pdr_Par_t_::iFrame"][::std::mem::offset_of!(Pdr_Par_t_, iFrame) - 148usize];
    ["Offset of field: Pdr_Par_t_::RunId"][::std::mem::offset_of!(Pdr_Par_t_, RunId) - 152usize];
    ["Offset of field: Pdr_Par_t_::pFuncStop"]
        [::std::mem::offset_of!(Pdr_Par_t_, pFuncStop) - 160usize];
    ["Offset of field: Pdr_Par_t_::pFuncOnFail"]
        [::std::mem::offset_of!(Pdr_Par_t_, pFuncOnFail) - 168usize];
    ["Offset of field: Pdr_Par_t_::timeLastSolved"]
        [::std::mem::offset_of!(Pdr_Par_t_, timeLastSolved) - 176usize];
    ["Offset of field: Pdr_Par_t_::vOutMap"]
        [::std::mem::offset_of!(Pdr_Par_t_, vOutMap) - 184usize];
    ["Offset of field: Pdr_Par_t_::pInvFileName"]
        [::std::mem::offset_of!(Pdr_Par_t_, pInvFileName) - 192usize];
    ["Offset of field: Pdr_Par_t_::pCexFilePrefix"]
        [::std::mem::offset_of!(Pdr_Par_t_, pCexFilePrefix) - 200usize];
};
extern "C" {
    pub fn Pdr_OutputCexToDir(pPars: *mut Pdr_Par_t, pCex: *mut Abc_Cex_t);
}
extern "C" {
    pub fn Pdr_ManSetDefaultParams(pPars: *mut Pdr_Par_t);
}
extern "C" {
    pub fn Pdr_ManSolve(p: *mut Aig_Man_t, pPars: *mut Pdr_Par_t) -> ::std::os::raw::c_int;
}
pub type Sec_MtrStatus_t = Sec_MtrStatus_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sec_MtrStatus_t_ {
    pub nInputs: ::std::os::raw::c_int,
    pub nNodes: ::std::os::raw::c_int,
    pub nOutputs: ::std::os::raw::c_int,
    pub nUnsat: ::std::os::raw::c_int,
    pub nSat: ::std::os::raw::c_int,
    pub nUndec: ::std::os::raw::c_int,
    pub iOut: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Sec_MtrStatus_t_"][::std::mem::size_of::<Sec_MtrStatus_t_>() - 28usize];
    ["Alignment of Sec_MtrStatus_t_"][::std::mem::align_of::<Sec_MtrStatus_t_>() - 4usize];
    ["Offset of field: Sec_MtrStatus_t_::nInputs"]
        [::std::mem::offset_of!(Sec_MtrStatus_t_, nInputs) - 0usize];
    ["Offset of field: Sec_MtrStatus_t_::nNodes"]
        [::std::mem::offset_of!(Sec_MtrStatus_t_, nNodes) - 4usize];
    ["Offset of field: Sec_MtrStatus_t_::nOutputs"]
        [::std::mem::offset_of!(Sec_MtrStatus_t_, nOutputs) - 8usize];
    ["Offset of field: Sec_MtrStatus_t_::nUnsat"]
        [::std::mem::offset_of!(Sec_MtrStatus_t_, nUnsat) - 12usize];
    ["Offset of field: Sec_MtrStatus_t_::nSat"]
        [::std::mem::offset_of!(Sec_MtrStatus_t_, nSat) - 16usize];
    ["Offset of field: Sec_MtrStatus_t_::nUndec"]
        [::std::mem::offset_of!(Sec_MtrStatus_t_, nUndec) - 20usize];
    ["Offset of field: Sec_MtrStatus_t_::iOut"]
        [::std::mem::offset_of!(Sec_MtrStatus_t_, iOut) - 24usize];
};
pub type Saig_ParBbr_t = Saig_ParBbr_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Saig_ParBbr_t_ {
    pub TimeLimit: ::std::os::raw::c_int,
    pub nBddMax: ::std::os::raw::c_int,
    pub nIterMax: ::std::os::raw::c_int,
    pub fPartition: ::std::os::raw::c_int,
    pub fReorder: ::std::os::raw::c_int,
    pub fReorderImage: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub fSilent: ::std::os::raw::c_int,
    pub fSkipOutCheck: ::std::os::raw::c_int,
    pub iFrame: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Saig_ParBbr_t_"][::std::mem::size_of::<Saig_ParBbr_t_>() - 40usize];
    ["Alignment of Saig_ParBbr_t_"][::std::mem::align_of::<Saig_ParBbr_t_>() - 4usize];
    ["Offset of field: Saig_ParBbr_t_::TimeLimit"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, TimeLimit) - 0usize];
    ["Offset of field: Saig_ParBbr_t_::nBddMax"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, nBddMax) - 4usize];
    ["Offset of field: Saig_ParBbr_t_::nIterMax"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, nIterMax) - 8usize];
    ["Offset of field: Saig_ParBbr_t_::fPartition"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, fPartition) - 12usize];
    ["Offset of field: Saig_ParBbr_t_::fReorder"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, fReorder) - 16usize];
    ["Offset of field: Saig_ParBbr_t_::fReorderImage"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, fReorderImage) - 20usize];
    ["Offset of field: Saig_ParBbr_t_::fVerbose"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, fVerbose) - 24usize];
    ["Offset of field: Saig_ParBbr_t_::fSilent"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, fSilent) - 28usize];
    ["Offset of field: Saig_ParBbr_t_::fSkipOutCheck"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, fSkipOutCheck) - 32usize];
    ["Offset of field: Saig_ParBbr_t_::iFrame"]
        [::std::mem::offset_of!(Saig_ParBbr_t_, iFrame) - 36usize];
};
extern "C" {
    #[link_name = "Saig_ManPiNum_imctk_abc_sys"]
    pub fn Saig_ManPiNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ManPoNum_imctk_abc_sys"]
    pub fn Saig_ManPoNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ManCiNum_imctk_abc_sys"]
    pub fn Saig_ManCiNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ManCoNum_imctk_abc_sys"]
    pub fn Saig_ManCoNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ManRegNum_imctk_abc_sys"]
    pub fn Saig_ManRegNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ManConstrNum_imctk_abc_sys"]
    pub fn Saig_ManConstrNum(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ManLo_imctk_abc_sys"]
    pub fn Saig_ManLo(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Saig_ManLi_imctk_abc_sys"]
    pub fn Saig_ManLi(p: *mut Aig_Man_t, i: ::std::os::raw::c_int) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Saig_ObjIsPi_imctk_abc_sys"]
    pub fn Saig_ObjIsPi(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ObjIsPo_imctk_abc_sys"]
    pub fn Saig_ObjIsPo(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ObjIsLo_imctk_abc_sys"]
    pub fn Saig_ObjIsLo(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ObjIsLi_imctk_abc_sys"]
    pub fn Saig_ObjIsLi(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Saig_ObjLoToLi_imctk_abc_sys"]
    pub fn Saig_ObjLoToLi(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Saig_ObjLiToLo_imctk_abc_sys"]
    pub fn Saig_ObjLiToLo(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> *mut Aig_Obj_t;
}
extern "C" {
    #[link_name = "Saig_ObjRegId_imctk_abc_sys"]
    pub fn Saig_ObjRegId(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManPrintCones(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Saig_ManDupUnfoldConstrs(pAig: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDupFoldConstrs(pAig: *mut Aig_Man_t, vConstrs: *mut Vec_Int_t)
        -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDetectConstrTest(p: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManDetectConstrFuncTest(
        p: *mut Aig_Man_t,
        nFrames: ::std::os::raw::c_int,
        nConfs: ::std::os::raw::c_int,
        nProps: ::std::os::raw::c_int,
        fOldAlgo: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Saig_ManDupFoldConstrsFunc(
        pAig: *mut Aig_Man_t,
        fCompl: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fSeqCleanup: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDupUnfoldConstrsFunc(
        pAig: *mut Aig_Man_t,
        nFrames: ::std::os::raw::c_int,
        nConfs: ::std::os::raw::c_int,
        nProps: ::std::os::raw::c_int,
        fOldAlgo: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDupFoldConstrsFunc2(
        pAig: *mut Aig_Man_t,
        fCompl: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        typeII_cnt: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDupUnfoldConstrsFunc2(
        pAig: *mut Aig_Man_t,
        nFrames: ::std::os::raw::c_int,
        nConfs: ::std::os::raw::c_int,
        nProps: ::std::os::raw::c_int,
        fOldAlgo: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        typeII_cnt: *mut ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDupDual(
        pAig: *mut Aig_Man_t,
        vDcFlops: *mut Vec_Int_t,
        nDualPis: ::std::os::raw::c_int,
        fDualFfs: ::std::os::raw::c_int,
        fMiterFfs: ::std::os::raw::c_int,
        fComplPo: ::std::os::raw::c_int,
        fCheckZero: ::std::os::raw::c_int,
        fCheckOne: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManBlockPo(pAig: *mut Aig_Man_t, nCycles: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Saig_ManDupOrpos(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManCreateEquivMiter(
        pAig: *mut Aig_Man_t,
        vPairs: *mut Vec_Int_t,
        fAddOuts: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDupAbstraction(pAig: *mut Aig_Man_t, vFlops: *mut Vec_Int_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManVerifyCex(pAig: *mut Aig_Man_t, p: *mut Abc_Cex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManExtendCex(pAig: *mut Aig_Man_t, p: *mut Abc_Cex_t) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Saig_ManFindFailedPoCex(
        pAig: *mut Aig_Man_t,
        p: *mut Abc_Cex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManDupWithPhase(pAig: *mut Aig_Man_t, vInit: *mut Vec_Int_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDupCones(
        pAig: *mut Aig_Man_t,
        pPos: *mut ::std::os::raw::c_int,
        nPos: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManHaigRecord(
        p: *mut Aig_Man_t,
        nIters: ::std::os::raw::c_int,
        nSteps: ::std::os::raw::c_int,
        fRetimingOnly: ::std::os::raw::c_int,
        fAddBugs: ::std::os::raw::c_int,
        fUseCnf: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManInduction(
        p: *mut Aig_Man_t,
        nTimeOut: ::std::os::raw::c_int,
        nFramesMax: ::std::os::raw::c_int,
        nConfMax: ::std::os::raw::c_int,
        fUnique: ::std::os::raw::c_int,
        fUniqueAll: ::std::os::raw::c_int,
        fGetCex: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManDumpBlif(p: *mut Aig_Man_t, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Saig_ManReadBlif(pFileName: *mut ::std::os::raw::c_char) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManFindIsoPerm(
        pAig: *mut Aig_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Saig_ManDupIsoCanonical(
        pAig: *mut Aig_Man_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManIsoReduce(
        pAig: *mut Aig_Man_t,
        pvCosEquivs: *mut *mut Vec_Ptr_t,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_IsoDetectFast(pAig: *mut Aig_Man_t) -> *mut Vec_Vec_t;
}
extern "C" {
    pub fn Sec_MiterStatus(p: *mut Aig_Man_t) -> Sec_MtrStatus_t;
}
extern "C" {
    pub fn Saig_ManCreateMiter(
        p1: *mut Aig_Man_t,
        p2: *mut Aig_Man_t,
        Oper: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManCreateMiterComb(
        p1: *mut Aig_Man_t,
        p2: *mut Aig_Man_t,
        Oper: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDualRail(p: *mut Aig_Man_t, fMiter: ::std::os::raw::c_int) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManCreateMiterTwo(
        pOld: *mut Aig_Man_t,
        pNew: *mut Aig_Man_t,
        nFrames: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManDemiterSimple(
        p: *mut Aig_Man_t,
        ppAig0: *mut *mut Aig_Man_t,
        ppAig1: *mut *mut Aig_Man_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManDemiterSimpleDiff(
        p: *mut Aig_Man_t,
        ppAig0: *mut *mut Aig_Man_t,
        ppAig1: *mut *mut Aig_Man_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManDemiterDual(
        p: *mut Aig_Man_t,
        ppAig0: *mut *mut Aig_Man_t,
        ppAig1: *mut *mut Aig_Man_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Ssw_SecSpecialMiter(
        p0: *mut Aig_Man_t,
        p1: *mut Aig_Man_t,
        nFrames: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManDemiterNew(pMan: *mut Aig_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManDecPropertyOutput(
        pAig: *mut Aig_Man_t,
        nLits: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManPhaseAbstract(
        p: *mut Aig_Man_t,
        vInits: *mut Vec_Int_t,
        nFrames: ::std::os::raw::c_int,
        nPref: ::std::os::raw::c_int,
        fIgnore: ::std::os::raw::c_int,
        fPrint: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManMarkAutonomous(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Saig_ManRetimeForward(
        p: *mut Aig_Man_t,
        nMaxIters: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManRetimeDupForward(p: *mut Aig_Man_t, vCut: *mut Vec_Ptr_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManRetimeMinArea(
        p: *mut Aig_Man_t,
        nMaxIters: ::std::os::raw::c_int,
        fForwardOnly: ::std::os::raw::c_int,
        fBackwardOnly: ::std::os::raw::c_int,
        fInitial: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManRetimeSteps(
        p: *mut Aig_Man_t,
        nSteps: ::std::os::raw::c_int,
        fForward: ::std::os::raw::c_int,
        fAddBugs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Saig_ManReportUselessRegisters(pAig: *mut Aig_Man_t);
}
extern "C" {
    pub fn Saig_MvManSimulate(
        pAig: *mut Aig_Man_t,
        nFramesSymb: ::std::os::raw::c_int,
        nFramesSatur: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        fVeryVerbose: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Saig_StrSimPerformMatching(
        p0: *mut Aig_Man_t,
        p1: *mut Aig_Man_t,
        nDist: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
        ppMiter: *mut *mut Aig_Man_t,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Saig_ManComputeSwitchProb2s(
        p: *mut Aig_Man_t,
        nFrames: ::std::os::raw::c_int,
        nPref: ::std::os::raw::c_int,
        fProbOne: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Saig_ManDupInitZero(p: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManTimeframeSimplify(
        pAig: *mut Aig_Man_t,
        nFrames: ::std::os::raw::c_int,
        nFramesMax: ::std::os::raw::c_int,
        fInit: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManWindowExtract(
        p: *mut Aig_Man_t,
        pObj: *mut Aig_Obj_t,
        nDist: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManWindowInsert(
        p: *mut Aig_Man_t,
        pObj: *mut Aig_Obj_t,
        nDist: ::std::os::raw::c_int,
        pWnd: *mut Aig_Man_t,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Saig_ManFindPivot(p: *mut Aig_Man_t) -> *mut Aig_Obj_t;
}
pub type Dar_RwrPar_t = Dar_RwrPar_t_;
pub type Dar_RefPar_t = Dar_RefPar_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dar_RwrPar_t_ {
    pub nCutsMax: ::std::os::raw::c_int,
    pub nSubgMax: ::std::os::raw::c_int,
    pub nMinSaved: ::std::os::raw::c_int,
    pub fFanout: ::std::os::raw::c_int,
    pub fUpdateLevel: ::std::os::raw::c_int,
    pub fUseZeros: ::std::os::raw::c_int,
    pub fPower: ::std::os::raw::c_int,
    pub fRecycle: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dar_RwrPar_t_"][::std::mem::size_of::<Dar_RwrPar_t_>() - 40usize];
    ["Alignment of Dar_RwrPar_t_"][::std::mem::align_of::<Dar_RwrPar_t_>() - 4usize];
    ["Offset of field: Dar_RwrPar_t_::nCutsMax"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, nCutsMax) - 0usize];
    ["Offset of field: Dar_RwrPar_t_::nSubgMax"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, nSubgMax) - 4usize];
    ["Offset of field: Dar_RwrPar_t_::nMinSaved"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, nMinSaved) - 8usize];
    ["Offset of field: Dar_RwrPar_t_::fFanout"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, fFanout) - 12usize];
    ["Offset of field: Dar_RwrPar_t_::fUpdateLevel"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, fUpdateLevel) - 16usize];
    ["Offset of field: Dar_RwrPar_t_::fUseZeros"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, fUseZeros) - 20usize];
    ["Offset of field: Dar_RwrPar_t_::fPower"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, fPower) - 24usize];
    ["Offset of field: Dar_RwrPar_t_::fRecycle"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, fRecycle) - 28usize];
    ["Offset of field: Dar_RwrPar_t_::fVerbose"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, fVerbose) - 32usize];
    ["Offset of field: Dar_RwrPar_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Dar_RwrPar_t_, fVeryVerbose) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dar_RefPar_t_ {
    pub nMffcMin: ::std::os::raw::c_int,
    pub nLeafMax: ::std::os::raw::c_int,
    pub nCutsMax: ::std::os::raw::c_int,
    pub fExtend: ::std::os::raw::c_int,
    pub fUpdateLevel: ::std::os::raw::c_int,
    pub fUseZeros: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub fVeryVerbose: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dar_RefPar_t_"][::std::mem::size_of::<Dar_RefPar_t_>() - 32usize];
    ["Alignment of Dar_RefPar_t_"][::std::mem::align_of::<Dar_RefPar_t_>() - 4usize];
    ["Offset of field: Dar_RefPar_t_::nMffcMin"]
        [::std::mem::offset_of!(Dar_RefPar_t_, nMffcMin) - 0usize];
    ["Offset of field: Dar_RefPar_t_::nLeafMax"]
        [::std::mem::offset_of!(Dar_RefPar_t_, nLeafMax) - 4usize];
    ["Offset of field: Dar_RefPar_t_::nCutsMax"]
        [::std::mem::offset_of!(Dar_RefPar_t_, nCutsMax) - 8usize];
    ["Offset of field: Dar_RefPar_t_::fExtend"]
        [::std::mem::offset_of!(Dar_RefPar_t_, fExtend) - 12usize];
    ["Offset of field: Dar_RefPar_t_::fUpdateLevel"]
        [::std::mem::offset_of!(Dar_RefPar_t_, fUpdateLevel) - 16usize];
    ["Offset of field: Dar_RefPar_t_::fUseZeros"]
        [::std::mem::offset_of!(Dar_RefPar_t_, fUseZeros) - 20usize];
    ["Offset of field: Dar_RefPar_t_::fVerbose"]
        [::std::mem::offset_of!(Dar_RefPar_t_, fVerbose) - 24usize];
    ["Offset of field: Dar_RefPar_t_::fVeryVerbose"]
        [::std::mem::offset_of!(Dar_RefPar_t_, fVeryVerbose) - 28usize];
};
extern "C" {
    pub fn Dar_LibStart();
}
extern "C" {
    pub fn Dar_LibStop();
}
extern "C" {
    pub fn Dar_LibPrepare(nSubgraphs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Dar_LibReturnClass(uTruth: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Dar_ManBalance(p: *mut Aig_Man_t, fUpdateLevel: ::std::os::raw::c_int)
        -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Dar_ManBalanceXor(
        pAig: *mut Aig_Man_t,
        fExor: ::std::os::raw::c_int,
        fUpdateLevel: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Dar_BalancePrintStats(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Dar_ManDefaultRwrParams(pPars: *mut Dar_RwrPar_t);
}
extern "C" {
    pub fn Dar_ManRewrite(pAig: *mut Aig_Man_t, pPars: *mut Dar_RwrPar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Dar_ManComputeCuts(
        pAig: *mut Aig_Man_t,
        nCutsMax: ::std::os::raw::c_int,
        fSkipTtMin: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_MmFixed_t;
}
extern "C" {
    pub fn Dar_ManDefaultRefParams(pPars: *mut Dar_RefPar_t);
}
extern "C" {
    pub fn Dar_ManRefactor(pAig: *mut Aig_Man_t, pPars: *mut Dar_RefPar_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Dar_ManRewriteDefault(pAig: *mut Aig_Man_t) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Dar_ManRwsat(
        pAig: *mut Aig_Man_t,
        fBalance: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Dar_ManCompress(
        pAig: *mut Aig_Man_t,
        fBalance: ::std::os::raw::c_int,
        fUpdateLevel: ::std::os::raw::c_int,
        fPower: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Dar_ManCompress2(
        pAig: *mut Aig_Man_t,
        fBalance: ::std::os::raw::c_int,
        fUpdateLevel: ::std::os::raw::c_int,
        fFanout: ::std::os::raw::c_int,
        fPower: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
extern "C" {
    pub fn Dar_ManChoice(
        pAig: *mut Aig_Man_t,
        fBalance: ::std::os::raw::c_int,
        fUpdateLevel: ::std::os::raw::c_int,
        fConstruct: ::std::os::raw::c_int,
        nConfMax: ::std::os::raw::c_int,
        nLevelMax: ::std::os::raw::c_int,
        fVerbose: ::std::os::raw::c_int,
    ) -> *mut Aig_Man_t;
}
pub type Dar_Man_t = Dar_Man_t_;
pub type Dar_Cut_t = Dar_Cut_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dar_Cut_t_ {
    pub uSign: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub pLeaves: [::std::os::raw::c_int; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dar_Cut_t_"][::std::mem::size_of::<Dar_Cut_t_>() - 24usize];
    ["Alignment of Dar_Cut_t_"][::std::mem::align_of::<Dar_Cut_t_>() - 4usize];
    ["Offset of field: Dar_Cut_t_::uSign"][::std::mem::offset_of!(Dar_Cut_t_, uSign) - 0usize];
    ["Offset of field: Dar_Cut_t_::pLeaves"][::std::mem::offset_of!(Dar_Cut_t_, pLeaves) - 8usize];
};
impl Dar_Cut_t_ {
    #[inline]
    pub fn uTruth(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_uTruth(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn Value(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_Value(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn fBest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fBest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fUsed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fUsed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nLeaves(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_nLeaves(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        uTruth: ::std::os::raw::c_uint,
        Value: ::std::os::raw::c_uint,
        fBest: ::std::os::raw::c_uint,
        fUsed: ::std::os::raw::c_uint,
        nLeaves: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let uTruth: u32 = unsafe { ::std::mem::transmute(uTruth) };
            uTruth as u64
        });
        __bindgen_bitfield_unit.set(16usize, 11u8, {
            let Value: u32 = unsafe { ::std::mem::transmute(Value) };
            Value as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let fBest: u32 = unsafe { ::std::mem::transmute(fBest) };
            fBest as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let fUsed: u32 = unsafe { ::std::mem::transmute(fUsed) };
            fUsed as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let nLeaves: u32 = unsafe { ::std::mem::transmute(nLeaves) };
            nLeaves as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dar_Man_t_ {
    pub pPars: *mut Dar_RwrPar_t,
    pub pAig: *mut Aig_Man_t,
    pub pMemCuts: *mut Aig_MmFixed_t,
    pub pManCnf: *mut ::std::os::raw::c_void,
    pub vCutNodes: *mut Vec_Ptr_t,
    pub vLeavesBest: *mut Vec_Ptr_t,
    pub OutBest: ::std::os::raw::c_int,
    pub OutNumBest: ::std::os::raw::c_int,
    pub GainBest: ::std::os::raw::c_int,
    pub LevelBest: ::std::os::raw::c_int,
    pub ClassBest: ::std::os::raw::c_int,
    pub nTotalSubgs: ::std::os::raw::c_int,
    pub ClassTimes: [::std::os::raw::c_int; 222usize],
    pub ClassGains: [::std::os::raw::c_int; 222usize],
    pub ClassSubgs: [::std::os::raw::c_int; 222usize],
    pub nCutMemUsed: ::std::os::raw::c_int,
    pub nNodesInit: ::std::os::raw::c_int,
    pub nNodesTried: ::std::os::raw::c_int,
    pub nCutsAll: ::std::os::raw::c_int,
    pub nCutsTried: ::std::os::raw::c_int,
    pub nCutsUsed: ::std::os::raw::c_int,
    pub nCutsBad: ::std::os::raw::c_int,
    pub nCutsGood: ::std::os::raw::c_int,
    pub nCutsSkipped: ::std::os::raw::c_int,
    pub timeCuts: abctime,
    pub timeEval: abctime,
    pub timeOther: abctime,
    pub timeTotal: abctime,
    pub time1: abctime,
    pub time2: abctime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dar_Man_t_"][::std::mem::size_of::<Dar_Man_t_>() - 2824usize];
    ["Alignment of Dar_Man_t_"][::std::mem::align_of::<Dar_Man_t_>() - 8usize];
    ["Offset of field: Dar_Man_t_::pPars"][::std::mem::offset_of!(Dar_Man_t_, pPars) - 0usize];
    ["Offset of field: Dar_Man_t_::pAig"][::std::mem::offset_of!(Dar_Man_t_, pAig) - 8usize];
    ["Offset of field: Dar_Man_t_::pMemCuts"]
        [::std::mem::offset_of!(Dar_Man_t_, pMemCuts) - 16usize];
    ["Offset of field: Dar_Man_t_::pManCnf"][::std::mem::offset_of!(Dar_Man_t_, pManCnf) - 24usize];
    ["Offset of field: Dar_Man_t_::vCutNodes"]
        [::std::mem::offset_of!(Dar_Man_t_, vCutNodes) - 32usize];
    ["Offset of field: Dar_Man_t_::vLeavesBest"]
        [::std::mem::offset_of!(Dar_Man_t_, vLeavesBest) - 40usize];
    ["Offset of field: Dar_Man_t_::OutBest"][::std::mem::offset_of!(Dar_Man_t_, OutBest) - 48usize];
    ["Offset of field: Dar_Man_t_::OutNumBest"]
        [::std::mem::offset_of!(Dar_Man_t_, OutNumBest) - 52usize];
    ["Offset of field: Dar_Man_t_::GainBest"]
        [::std::mem::offset_of!(Dar_Man_t_, GainBest) - 56usize];
    ["Offset of field: Dar_Man_t_::LevelBest"]
        [::std::mem::offset_of!(Dar_Man_t_, LevelBest) - 60usize];
    ["Offset of field: Dar_Man_t_::ClassBest"]
        [::std::mem::offset_of!(Dar_Man_t_, ClassBest) - 64usize];
    ["Offset of field: Dar_Man_t_::nTotalSubgs"]
        [::std::mem::offset_of!(Dar_Man_t_, nTotalSubgs) - 68usize];
    ["Offset of field: Dar_Man_t_::ClassTimes"]
        [::std::mem::offset_of!(Dar_Man_t_, ClassTimes) - 72usize];
    ["Offset of field: Dar_Man_t_::ClassGains"]
        [::std::mem::offset_of!(Dar_Man_t_, ClassGains) - 960usize];
    ["Offset of field: Dar_Man_t_::ClassSubgs"]
        [::std::mem::offset_of!(Dar_Man_t_, ClassSubgs) - 1848usize];
    ["Offset of field: Dar_Man_t_::nCutMemUsed"]
        [::std::mem::offset_of!(Dar_Man_t_, nCutMemUsed) - 2736usize];
    ["Offset of field: Dar_Man_t_::nNodesInit"]
        [::std::mem::offset_of!(Dar_Man_t_, nNodesInit) - 2740usize];
    ["Offset of field: Dar_Man_t_::nNodesTried"]
        [::std::mem::offset_of!(Dar_Man_t_, nNodesTried) - 2744usize];
    ["Offset of field: Dar_Man_t_::nCutsAll"]
        [::std::mem::offset_of!(Dar_Man_t_, nCutsAll) - 2748usize];
    ["Offset of field: Dar_Man_t_::nCutsTried"]
        [::std::mem::offset_of!(Dar_Man_t_, nCutsTried) - 2752usize];
    ["Offset of field: Dar_Man_t_::nCutsUsed"]
        [::std::mem::offset_of!(Dar_Man_t_, nCutsUsed) - 2756usize];
    ["Offset of field: Dar_Man_t_::nCutsBad"]
        [::std::mem::offset_of!(Dar_Man_t_, nCutsBad) - 2760usize];
    ["Offset of field: Dar_Man_t_::nCutsGood"]
        [::std::mem::offset_of!(Dar_Man_t_, nCutsGood) - 2764usize];
    ["Offset of field: Dar_Man_t_::nCutsSkipped"]
        [::std::mem::offset_of!(Dar_Man_t_, nCutsSkipped) - 2768usize];
    ["Offset of field: Dar_Man_t_::timeCuts"]
        [::std::mem::offset_of!(Dar_Man_t_, timeCuts) - 2776usize];
    ["Offset of field: Dar_Man_t_::timeEval"]
        [::std::mem::offset_of!(Dar_Man_t_, timeEval) - 2784usize];
    ["Offset of field: Dar_Man_t_::timeOther"]
        [::std::mem::offset_of!(Dar_Man_t_, timeOther) - 2792usize];
    ["Offset of field: Dar_Man_t_::timeTotal"]
        [::std::mem::offset_of!(Dar_Man_t_, timeTotal) - 2800usize];
    ["Offset of field: Dar_Man_t_::time1"][::std::mem::offset_of!(Dar_Man_t_, time1) - 2808usize];
    ["Offset of field: Dar_Man_t_::time2"][::std::mem::offset_of!(Dar_Man_t_, time2) - 2816usize];
};
extern "C" {
    #[link_name = "Dar_ObjCuts_imctk_abc_sys"]
    pub fn Dar_ObjCuts(pObj: *mut Aig_Obj_t) -> *mut Dar_Cut_t;
}
extern "C" {
    #[link_name = "Dar_ObjSetCuts_imctk_abc_sys"]
    pub fn Dar_ObjSetCuts(pObj: *mut Aig_Obj_t, pCuts: *mut Dar_Cut_t);
}
extern "C" {
    pub fn Dar_ManCutsRestart(p: *mut Dar_Man_t, pRoot: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Dar_ManCutsFree(p: *mut Dar_Man_t);
}
extern "C" {
    pub fn Dar_ObjPrepareCuts(p: *mut Dar_Man_t, pObj: *mut Aig_Obj_t) -> *mut Dar_Cut_t;
}
extern "C" {
    pub fn Dar_ObjComputeCuts_rec(p: *mut Dar_Man_t, pObj: *mut Aig_Obj_t) -> *mut Dar_Cut_t;
}
extern "C" {
    pub fn Dar_ObjComputeCuts(
        p: *mut Dar_Man_t,
        pObj: *mut Aig_Obj_t,
        fSkipTtMin: ::std::os::raw::c_int,
    ) -> *mut Dar_Cut_t;
}
extern "C" {
    pub fn Dar_ObjCutPrint(p: *mut Aig_Man_t, pObj: *mut Aig_Obj_t);
}
extern "C" {
    pub fn Dar_LibReadNodes() -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Dar_LibReadOuts() -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Dar_LibReadPrios() -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Dar_LibReturnCanonicals(pCanons: *mut ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Dar_LibEval(
        p: *mut Dar_Man_t,
        pRoot: *mut Aig_Obj_t,
        pCut: *mut Dar_Cut_t,
        Required: ::std::os::raw::c_int,
        pnMffcSize: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Dar_LibBuildBest(p: *mut Dar_Man_t) -> *mut Aig_Obj_t;
}
extern "C" {
    pub fn Dar_ManStart(pAig: *mut Aig_Man_t, pPars: *mut Dar_RwrPar_t) -> *mut Dar_Man_t;
}
extern "C" {
    pub fn Dar_ManStop(p: *mut Dar_Man_t);
}
extern "C" {
    pub fn Dar_ManPrintStats(p: *mut Dar_Man_t);
}
extern "C" {
    pub fn Dar_Permutations(n: ::std::os::raw::c_int) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Dar_Truth4VarNPN(
        puCanons: *mut *mut ::std::os::raw::c_ushort,
        puPhases: *mut *mut ::std::os::raw::c_char,
        puPerms: *mut *mut ::std::os::raw::c_char,
        puMap: *mut *mut ::std::os::raw::c_uchar,
    );
}
pub type Cnf_Man_t = Cnf_Man_t_;
pub type Cnf_Dat_t = Cnf_Dat_t_;
pub type Cnf_Cut_t = Cnf_Cut_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cnf_Dat_t_ {
    pub pMan: *mut Aig_Man_t,
    pub nVars: ::std::os::raw::c_int,
    pub nLiterals: ::std::os::raw::c_int,
    pub nClauses: ::std::os::raw::c_int,
    pub pClauses: *mut *mut ::std::os::raw::c_int,
    pub pVarNums: *mut ::std::os::raw::c_int,
    pub pObj2Clause: *mut ::std::os::raw::c_int,
    pub pObj2Count: *mut ::std::os::raw::c_int,
    pub pClaPols: *mut ::std::os::raw::c_uchar,
    pub vMapping: *mut Vec_Int_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cnf_Dat_t_"][::std::mem::size_of::<Cnf_Dat_t_>() - 72usize];
    ["Alignment of Cnf_Dat_t_"][::std::mem::align_of::<Cnf_Dat_t_>() - 8usize];
    ["Offset of field: Cnf_Dat_t_::pMan"][::std::mem::offset_of!(Cnf_Dat_t_, pMan) - 0usize];
    ["Offset of field: Cnf_Dat_t_::nVars"][::std::mem::offset_of!(Cnf_Dat_t_, nVars) - 8usize];
    ["Offset of field: Cnf_Dat_t_::nLiterals"]
        [::std::mem::offset_of!(Cnf_Dat_t_, nLiterals) - 12usize];
    ["Offset of field: Cnf_Dat_t_::nClauses"]
        [::std::mem::offset_of!(Cnf_Dat_t_, nClauses) - 16usize];
    ["Offset of field: Cnf_Dat_t_::pClauses"]
        [::std::mem::offset_of!(Cnf_Dat_t_, pClauses) - 24usize];
    ["Offset of field: Cnf_Dat_t_::pVarNums"]
        [::std::mem::offset_of!(Cnf_Dat_t_, pVarNums) - 32usize];
    ["Offset of field: Cnf_Dat_t_::pObj2Clause"]
        [::std::mem::offset_of!(Cnf_Dat_t_, pObj2Clause) - 40usize];
    ["Offset of field: Cnf_Dat_t_::pObj2Count"]
        [::std::mem::offset_of!(Cnf_Dat_t_, pObj2Count) - 48usize];
    ["Offset of field: Cnf_Dat_t_::pClaPols"]
        [::std::mem::offset_of!(Cnf_Dat_t_, pClaPols) - 56usize];
    ["Offset of field: Cnf_Dat_t_::vMapping"]
        [::std::mem::offset_of!(Cnf_Dat_t_, vMapping) - 64usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct Cnf_Cut_t_ {
    pub nFanins: ::std::os::raw::c_char,
    pub Cost: ::std::os::raw::c_char,
    pub nWords: ::std::os::raw::c_short,
    pub vIsop: [*mut Vec_Int_t; 2usize],
    pub pFanins: __IncompleteArrayField<::std::os::raw::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cnf_Cut_t_"][::std::mem::size_of::<Cnf_Cut_t_>() - 24usize];
    ["Alignment of Cnf_Cut_t_"][::std::mem::align_of::<Cnf_Cut_t_>() - 8usize];
    ["Offset of field: Cnf_Cut_t_::nFanins"][::std::mem::offset_of!(Cnf_Cut_t_, nFanins) - 0usize];
    ["Offset of field: Cnf_Cut_t_::Cost"][::std::mem::offset_of!(Cnf_Cut_t_, Cost) - 1usize];
    ["Offset of field: Cnf_Cut_t_::nWords"][::std::mem::offset_of!(Cnf_Cut_t_, nWords) - 2usize];
    ["Offset of field: Cnf_Cut_t_::vIsop"][::std::mem::offset_of!(Cnf_Cut_t_, vIsop) - 8usize];
    ["Offset of field: Cnf_Cut_t_::pFanins"][::std::mem::offset_of!(Cnf_Cut_t_, pFanins) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cnf_Man_t_ {
    pub pManAig: *mut Aig_Man_t,
    pub pSopSizes: *mut ::std::os::raw::c_char,
    pub pSops: *mut *mut ::std::os::raw::c_char,
    pub aArea: ::std::os::raw::c_int,
    pub pMemCuts: *mut Aig_MmFlex_t,
    pub nMergeLimit: ::std::os::raw::c_int,
    pub pTruths: [*mut ::std::os::raw::c_uint; 4usize],
    pub vMemory: *mut Vec_Int_t,
    pub timeCuts: abctime,
    pub timeMap: abctime,
    pub timeSave: abctime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cnf_Man_t_"][::std::mem::size_of::<Cnf_Man_t_>() - 112usize];
    ["Alignment of Cnf_Man_t_"][::std::mem::align_of::<Cnf_Man_t_>() - 8usize];
    ["Offset of field: Cnf_Man_t_::pManAig"][::std::mem::offset_of!(Cnf_Man_t_, pManAig) - 0usize];
    ["Offset of field: Cnf_Man_t_::pSopSizes"]
        [::std::mem::offset_of!(Cnf_Man_t_, pSopSizes) - 8usize];
    ["Offset of field: Cnf_Man_t_::pSops"][::std::mem::offset_of!(Cnf_Man_t_, pSops) - 16usize];
    ["Offset of field: Cnf_Man_t_::aArea"][::std::mem::offset_of!(Cnf_Man_t_, aArea) - 24usize];
    ["Offset of field: Cnf_Man_t_::pMemCuts"]
        [::std::mem::offset_of!(Cnf_Man_t_, pMemCuts) - 32usize];
    ["Offset of field: Cnf_Man_t_::nMergeLimit"]
        [::std::mem::offset_of!(Cnf_Man_t_, nMergeLimit) - 40usize];
    ["Offset of field: Cnf_Man_t_::pTruths"][::std::mem::offset_of!(Cnf_Man_t_, pTruths) - 48usize];
    ["Offset of field: Cnf_Man_t_::vMemory"][::std::mem::offset_of!(Cnf_Man_t_, vMemory) - 80usize];
    ["Offset of field: Cnf_Man_t_::timeCuts"]
        [::std::mem::offset_of!(Cnf_Man_t_, timeCuts) - 88usize];
    ["Offset of field: Cnf_Man_t_::timeMap"][::std::mem::offset_of!(Cnf_Man_t_, timeMap) - 96usize];
    ["Offset of field: Cnf_Man_t_::timeSave"]
        [::std::mem::offset_of!(Cnf_Man_t_, timeSave) - 104usize];
};
extern "C" {
    #[link_name = "Dar_ObjBestCut_imctk_abc_sys"]
    pub fn Dar_ObjBestCut(pObj: *mut Aig_Obj_t) -> *mut Dar_Cut_t;
}
extern "C" {
    #[link_name = "Cnf_CutSopCost_imctk_abc_sys"]
    pub fn Cnf_CutSopCost(p: *mut Cnf_Man_t, pCut: *mut Dar_Cut_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Cnf_CutLeaveNum_imctk_abc_sys"]
    pub fn Cnf_CutLeaveNum(pCut: *mut Cnf_Cut_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Cnf_CutLeaves_imctk_abc_sys"]
    pub fn Cnf_CutLeaves(pCut: *mut Cnf_Cut_t) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Cnf_CutTruth_imctk_abc_sys"]
    pub fn Cnf_CutTruth(pCut: *mut Cnf_Cut_t) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "Cnf_ObjBestCut_imctk_abc_sys"]
    pub fn Cnf_ObjBestCut(pObj: *mut Aig_Obj_t) -> *mut Cnf_Cut_t;
}
extern "C" {
    #[link_name = "Cnf_ObjSetBestCut_imctk_abc_sys"]
    pub fn Cnf_ObjSetBestCut(pObj: *mut Aig_Obj_t, pCut: *mut Cnf_Cut_t);
}
extern "C" {
    pub fn Cnf_DeriveMappingArray(pAig: *mut Aig_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Cnf_Derive(pAig: *mut Aig_Man_t, nOutputs: ::std::os::raw::c_int) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DeriveWithMan(
        p: *mut Cnf_Man_t,
        pAig: *mut Aig_Man_t,
        nOutputs: ::std::os::raw::c_int,
    ) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DeriveOther(
        pAig: *mut Aig_Man_t,
        fSkipTtMin: ::std::os::raw::c_int,
    ) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DeriveOtherWithMan(
        p: *mut Cnf_Man_t,
        pAig: *mut Aig_Man_t,
        fSkipTtMin: ::std::os::raw::c_int,
    ) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_ManPrepare();
}
extern "C" {
    pub fn Cnf_ManRead() -> *mut Cnf_Man_t;
}
extern "C" {
    pub fn Cnf_ManFree();
}
extern "C" {
    pub fn Cnf_CutCreate(p: *mut Cnf_Man_t, pObj: *mut Aig_Obj_t) -> *mut Cnf_Cut_t;
}
extern "C" {
    pub fn Cnf_CutPrint(pCut: *mut Cnf_Cut_t);
}
extern "C" {
    pub fn Cnf_CutFree(pCut: *mut Cnf_Cut_t);
}
extern "C" {
    pub fn Cnf_CutUpdateRefs(
        p: *mut Cnf_Man_t,
        pCut: *mut Cnf_Cut_t,
        pCutFan: *mut Cnf_Cut_t,
        pCutRes: *mut Cnf_Cut_t,
    );
}
extern "C" {
    pub fn Cnf_CutCompose(
        p: *mut Cnf_Man_t,
        pCut: *mut Cnf_Cut_t,
        pCutFan: *mut Cnf_Cut_t,
        iFan: ::std::os::raw::c_int,
    ) -> *mut Cnf_Cut_t;
}
extern "C" {
    pub fn Cnf_ReadMsops(
        ppSopSizes: *mut *mut ::std::os::raw::c_char,
        ppSops: *mut *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Cnf_CollectLeaves(
        pRoot: *mut Aig_Obj_t,
        vSuper: *mut Vec_Ptr_t,
        fStopCompl: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Cnf_ComputeClauses(
        p: *mut Aig_Man_t,
        pRoot: *mut Aig_Obj_t,
        vLeaves: *mut Vec_Ptr_t,
        vNodes: *mut Vec_Ptr_t,
        vMap: *mut Vec_Int_t,
        vCover: *mut Vec_Int_t,
        vClauses: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Cnf_DeriveFastMark(p: *mut Aig_Man_t);
}
extern "C" {
    pub fn Cnf_DeriveFast(p: *mut Aig_Man_t, nOutputs: ::std::os::raw::c_int) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_ManStart() -> *mut Cnf_Man_t;
}
extern "C" {
    pub fn Cnf_ManStop(p: *mut Cnf_Man_t);
}
extern "C" {
    pub fn Cnf_DataCollectPiSatNums(pCnf: *mut Cnf_Dat_t, p: *mut Aig_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Cnf_DataAlloc(
        pAig: *mut Aig_Man_t,
        nVars: ::std::os::raw::c_int,
        nClauses: ::std::os::raw::c_int,
        nLiterals: ::std::os::raw::c_int,
    ) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DataDup(p: *mut Cnf_Dat_t) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DataDupCof(p: *mut Cnf_Dat_t, Lit: ::std::os::raw::c_int) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DataDupCofArray(p: *mut Cnf_Dat_t, vLits: *mut Vec_Int_t) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DataFree(p: *mut Cnf_Dat_t);
}
extern "C" {
    pub fn Cnf_DataLift(p: *mut Cnf_Dat_t, nVarsPlus: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Cnf_DataCollectFlipLits(
        p: *mut Cnf_Dat_t,
        iFlipVar: ::std::os::raw::c_int,
        vFlips: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Cnf_DataLiftAndFlipLits(
        p: *mut Cnf_Dat_t,
        nVarsPlus: ::std::os::raw::c_int,
        vLits: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Cnf_DataPrint(p: *mut Cnf_Dat_t, fReadable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Cnf_DataWriteIntoFile(
        p: *mut Cnf_Dat_t,
        pFileName: *mut ::std::os::raw::c_char,
        fReadable: ::std::os::raw::c_int,
        vForAlls: *mut Vec_Int_t,
        vExists: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Cnf_DataWriteIntoFileInv(
        p: *mut Cnf_Dat_t,
        pFileName: *mut ::std::os::raw::c_char,
        fReadable: ::std::os::raw::c_int,
        vExists1: *mut Vec_Int_t,
        vForAlls: *mut Vec_Int_t,
        vExists2: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Cnf_DataWriteIntoSolver(
        p: *mut Cnf_Dat_t,
        nFrames: ::std::os::raw::c_int,
        fInit: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Cnf_DataWriteIntoSolverInt(
        pSat: *mut ::std::os::raw::c_void,
        p: *mut Cnf_Dat_t,
        nFrames: ::std::os::raw::c_int,
        fInit: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Cnf_DataWriteOrClause(
        pSat: *mut ::std::os::raw::c_void,
        pCnf: *mut Cnf_Dat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cnf_DataWriteAndClauses(
        p: *mut ::std::os::raw::c_void,
        pCnf: *mut Cnf_Dat_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cnf_DataTranformPolarity(pCnf: *mut Cnf_Dat_t, fTransformPos: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Cnf_DataAddXorClause(
        pSat: *mut ::std::os::raw::c_void,
        iVarA: ::std::os::raw::c_int,
        iVarB: ::std::os::raw::c_int,
        iVarC: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cnf_DeriveMapping(p: *mut Cnf_Man_t);
}
extern "C" {
    pub fn Cnf_ManMapForCnf(p: *mut Cnf_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cnf_ManTransferCuts(p: *mut Cnf_Man_t);
}
extern "C" {
    pub fn Cnf_ManFreeCuts(p: *mut Cnf_Man_t);
}
extern "C" {
    pub fn Cnf_ManPostprocess(p: *mut Cnf_Man_t);
}
extern "C" {
    pub fn Aig_ManScanMapping(p: *mut Cnf_Man_t, fCollect: ::std::os::raw::c_int)
        -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Cnf_ManScanMapping(
        p: *mut Cnf_Man_t,
        fCollect: ::std::os::raw::c_int,
        fPreorder: ::std::os::raw::c_int,
    ) -> *mut Vec_Ptr_t;
}
extern "C" {
    pub fn Cnf_DataCollectCiSatNums(pCnf: *mut Cnf_Dat_t, p: *mut Aig_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Cnf_DataCollectCoSatNums(pCnf: *mut Cnf_Dat_t, p: *mut Aig_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Cnf_DataDeriveLitPolarities(p: *mut Cnf_Dat_t) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Cnf_DataReadFromFile(pFileName: *mut ::std::os::raw::c_char) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_ManWriteCnfMapping(p: *mut Cnf_Man_t, vMapped: *mut Vec_Ptr_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Cnf_SopConvertToVector(
        pSop: *mut ::std::os::raw::c_char,
        nCubes: ::std::os::raw::c_int,
        vCover: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Cnf_ManWriteCnf(
        p: *mut Cnf_Man_t,
        vMapped: *mut Vec_Ptr_t,
        nOutputs: ::std::os::raw::c_int,
    ) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_ManWriteCnfOther(p: *mut Cnf_Man_t, vMapped: *mut Vec_Ptr_t) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DeriveSimple(p: *mut Aig_Man_t, nOutputs: ::std::os::raw::c_int) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Cnf_DeriveSimpleForRetiming(p: *mut Aig_Man_t) -> *mut Cnf_Dat_t;
}
extern "C" {
    pub fn Hash_DefaultHashFunc(
        key: ::std::os::raw::c_int,
        nBins: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type Hash_Int_t = Hash_Int_t_;
pub type Hash_Int_Entry_t = Hash_Int_Entry_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hash_Int_Entry_t_ {
    pub key: ::std::os::raw::c_int,
    pub data: ::std::os::raw::c_int,
    pub pNext: *mut Hash_Int_Entry_t_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hash_Int_Entry_t_"][::std::mem::size_of::<Hash_Int_Entry_t_>() - 16usize];
    ["Alignment of Hash_Int_Entry_t_"][::std::mem::align_of::<Hash_Int_Entry_t_>() - 8usize];
    ["Offset of field: Hash_Int_Entry_t_::key"]
        [::std::mem::offset_of!(Hash_Int_Entry_t_, key) - 0usize];
    ["Offset of field: Hash_Int_Entry_t_::data"]
        [::std::mem::offset_of!(Hash_Int_Entry_t_, data) - 4usize];
    ["Offset of field: Hash_Int_Entry_t_::pNext"]
        [::std::mem::offset_of!(Hash_Int_Entry_t_, pNext) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hash_Int_t_ {
    pub nSize: ::std::os::raw::c_int,
    pub nBins: ::std::os::raw::c_int,
    pub fHash: ::std::option::Option<
        unsafe extern "C" fn(
            key: ::std::os::raw::c_int,
            nBins: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub pArray: *mut *mut Hash_Int_Entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hash_Int_t_"][::std::mem::size_of::<Hash_Int_t_>() - 24usize];
    ["Alignment of Hash_Int_t_"][::std::mem::align_of::<Hash_Int_t_>() - 8usize];
    ["Offset of field: Hash_Int_t_::nSize"][::std::mem::offset_of!(Hash_Int_t_, nSize) - 0usize];
    ["Offset of field: Hash_Int_t_::nBins"][::std::mem::offset_of!(Hash_Int_t_, nBins) - 4usize];
    ["Offset of field: Hash_Int_t_::fHash"][::std::mem::offset_of!(Hash_Int_t_, fHash) - 8usize];
    ["Offset of field: Hash_Int_t_::pArray"][::std::mem::offset_of!(Hash_Int_t_, pArray) - 16usize];
};
extern "C" {
    #[link_name = "Hash_IntAlloc_imctk_abc_sys"]
    pub fn Hash_IntAlloc(nBins: ::std::os::raw::c_int) -> *mut Hash_Int_t;
}
extern "C" {
    #[link_name = "Hash_IntExists_imctk_abc_sys"]
    pub fn Hash_IntExists(p: *mut Hash_Int_t, key: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hash_IntWriteEntry_imctk_abc_sys"]
    pub fn Hash_IntWriteEntry(
        p: *mut Hash_Int_t,
        key: ::std::os::raw::c_int,
        data: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "Hash_IntEntry_imctk_abc_sys"]
    pub fn Hash_IntEntry(
        p: *mut Hash_Int_t,
        key: ::std::os::raw::c_int,
        fCreate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hash_IntEntryPtr_imctk_abc_sys"]
    pub fn Hash_IntEntryPtr(
        p: *mut Hash_Int_t,
        key: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Hash_IntFree_imctk_abc_sys"]
    pub fn Hash_IntFree(p: *mut Hash_Int_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct veci_t {
    pub cap: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of veci_t"][::std::mem::size_of::<veci_t>() - 16usize];
    ["Alignment of veci_t"][::std::mem::align_of::<veci_t>() - 8usize];
    ["Offset of field: veci_t::cap"][::std::mem::offset_of!(veci_t, cap) - 0usize];
    ["Offset of field: veci_t::size"][::std::mem::offset_of!(veci_t, size) - 4usize];
    ["Offset of field: veci_t::ptr"][::std::mem::offset_of!(veci_t, ptr) - 8usize];
};
pub type veci = veci_t;
extern "C" {
    #[link_name = "veci_new_imctk_abc_sys"]
    pub fn veci_new(v: *mut veci);
}
extern "C" {
    #[link_name = "veci_delete_imctk_abc_sys"]
    pub fn veci_delete(v: *mut veci);
}
extern "C" {
    #[link_name = "veci_begin_imctk_abc_sys"]
    pub fn veci_begin(v: *mut veci) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "veci_size_imctk_abc_sys"]
    pub fn veci_size(v: *mut veci) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "veci_resize_imctk_abc_sys"]
    pub fn veci_resize(v: *mut veci, k: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "veci_pop_imctk_abc_sys"]
    pub fn veci_pop(v: *mut veci) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "veci_push_imctk_abc_sys"]
    pub fn veci_push(v: *mut veci, e: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "veci_remove_imctk_abc_sys"]
    pub fn veci_remove(v: *mut veci, e: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vecp_t {
    pub cap: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub ptr: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vecp_t"][::std::mem::size_of::<vecp_t>() - 16usize];
    ["Alignment of vecp_t"][::std::mem::align_of::<vecp_t>() - 8usize];
    ["Offset of field: vecp_t::cap"][::std::mem::offset_of!(vecp_t, cap) - 0usize];
    ["Offset of field: vecp_t::size"][::std::mem::offset_of!(vecp_t, size) - 4usize];
    ["Offset of field: vecp_t::ptr"][::std::mem::offset_of!(vecp_t, ptr) - 8usize];
};
pub type vecp = vecp_t;
extern "C" {
    #[link_name = "vecp_new_imctk_abc_sys"]
    pub fn vecp_new(v: *mut vecp);
}
extern "C" {
    #[link_name = "vecp_delete_imctk_abc_sys"]
    pub fn vecp_delete(v: *mut vecp);
}
extern "C" {
    #[link_name = "vecp_begin_imctk_abc_sys"]
    pub fn vecp_begin(v: *mut vecp) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "vecp_size_imctk_abc_sys"]
    pub fn vecp_size(v: *mut vecp) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "vecp_resize_imctk_abc_sys"]
    pub fn vecp_resize(v: *mut vecp, k: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "vecp_push_imctk_abc_sys"]
    pub fn vecp_push(v: *mut vecp, e: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "vecp_remove_imctk_abc_sys"]
    pub fn vecp_remove(v: *mut vecp, e: *mut ::std::os::raw::c_void);
}
pub type lit = ::std::os::raw::c_int;
pub type cla = ::std::os::raw::c_int;
pub type lbool = ::std::os::raw::c_char;
pub const var_Undef: ::std::os::raw::c_int = -1;
pub const lit_Undef: lit = -2;
pub const l_Undef: lbool = 0;
pub const l_True: lbool = 1;
pub const l_False: lbool = -1;
extern "C" {
    #[link_name = "toLit_imctk_abc_sys"]
    pub fn toLit(v: ::std::os::raw::c_int) -> lit;
}
extern "C" {
    #[link_name = "toLitCond_imctk_abc_sys"]
    pub fn toLitCond(v: ::std::os::raw::c_int, c: ::std::os::raw::c_int) -> lit;
}
extern "C" {
    #[link_name = "lit_neg_imctk_abc_sys"]
    pub fn lit_neg(l: lit) -> lit;
}
extern "C" {
    #[link_name = "lit_var_imctk_abc_sys"]
    pub fn lit_var(l: lit) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "lit_sign_imctk_abc_sys"]
    pub fn lit_sign(l: lit) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "lit_print_imctk_abc_sys"]
    pub fn lit_print(l: lit) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "lit_read_imctk_abc_sys"]
    pub fn lit_read(s: ::std::os::raw::c_int) -> lit;
}
extern "C" {
    #[link_name = "lit_check_imctk_abc_sys"]
    pub fn lit_check(l: lit, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stats_t {
    pub starts: ::std::os::raw::c_uint,
    pub clauses: ::std::os::raw::c_uint,
    pub learnts: ::std::os::raw::c_uint,
    pub decisions: ABC_INT64_T,
    pub propagations: ABC_INT64_T,
    pub inspects: ABC_INT64_T,
    pub conflicts: ABC_INT64_T,
    pub clauses_literals: ABC_INT64_T,
    pub learnts_literals: ABC_INT64_T,
    pub tot_literals: ABC_INT64_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stats_t"][::std::mem::size_of::<stats_t>() - 72usize];
    ["Alignment of stats_t"][::std::mem::align_of::<stats_t>() - 8usize];
    ["Offset of field: stats_t::starts"][::std::mem::offset_of!(stats_t, starts) - 0usize];
    ["Offset of field: stats_t::clauses"][::std::mem::offset_of!(stats_t, clauses) - 4usize];
    ["Offset of field: stats_t::learnts"][::std::mem::offset_of!(stats_t, learnts) - 8usize];
    ["Offset of field: stats_t::decisions"][::std::mem::offset_of!(stats_t, decisions) - 16usize];
    ["Offset of field: stats_t::propagations"]
        [::std::mem::offset_of!(stats_t, propagations) - 24usize];
    ["Offset of field: stats_t::inspects"][::std::mem::offset_of!(stats_t, inspects) - 32usize];
    ["Offset of field: stats_t::conflicts"][::std::mem::offset_of!(stats_t, conflicts) - 40usize];
    ["Offset of field: stats_t::clauses_literals"]
        [::std::mem::offset_of!(stats_t, clauses_literals) - 48usize];
    ["Offset of field: stats_t::learnts_literals"]
        [::std::mem::offset_of!(stats_t, learnts_literals) - 56usize];
    ["Offset of field: stats_t::tot_literals"]
        [::std::mem::offset_of!(stats_t, tot_literals) - 64usize];
};
pub type clause = clause_t;
#[repr(C)]
#[derive(Debug)]
pub struct clause_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub lits: __IncompleteArrayField<lit>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clause_t"][::std::mem::size_of::<clause_t>() - 4usize];
    ["Alignment of clause_t"][::std::mem::align_of::<clause_t>() - 4usize];
    ["Offset of field: clause_t::lits"][::std::mem::offset_of!(clause_t, lits) - 4usize];
};
impl clause_t {
    #[inline]
    pub fn lrn(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lrn(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mark(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mark(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn partA(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_partA(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lbd(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_lbd(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn size(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lrn: ::std::os::raw::c_uint,
        mark: ::std::os::raw::c_uint,
        partA: ::std::os::raw::c_uint,
        lbd: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lrn: u32 = unsafe { ::std::mem::transmute(lrn) };
            lrn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mark: u32 = unsafe { ::std::mem::transmute(mark) };
            mark as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let partA: u32 = unsafe { ::std::mem::transmute(partA) };
            partA as u64
        });
        __bindgen_bitfield_unit.set(3usize, 8u8, {
            let lbd: u32 = unsafe { ::std::mem::transmute(lbd) };
            lbd as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let size: u32 = unsafe { ::std::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type Sat_Mem_t = Sat_Mem_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sat_Mem_t_ {
    pub nEntries: [::std::os::raw::c_int; 2usize],
    pub BookMarkH: [::std::os::raw::c_int; 2usize],
    pub BookMarkE: [::std::os::raw::c_int; 2usize],
    pub iPage: [::std::os::raw::c_int; 2usize],
    pub nPageSize: ::std::os::raw::c_int,
    pub uPageMask: ::std::os::raw::c_uint,
    pub uLearnedMask: ::std::os::raw::c_uint,
    pub nPagesAlloc: ::std::os::raw::c_int,
    pub pPages: *mut *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Sat_Mem_t_"][::std::mem::size_of::<Sat_Mem_t_>() - 56usize];
    ["Alignment of Sat_Mem_t_"][::std::mem::align_of::<Sat_Mem_t_>() - 8usize];
    ["Offset of field: Sat_Mem_t_::nEntries"]
        [::std::mem::offset_of!(Sat_Mem_t_, nEntries) - 0usize];
    ["Offset of field: Sat_Mem_t_::BookMarkH"]
        [::std::mem::offset_of!(Sat_Mem_t_, BookMarkH) - 8usize];
    ["Offset of field: Sat_Mem_t_::BookMarkE"]
        [::std::mem::offset_of!(Sat_Mem_t_, BookMarkE) - 16usize];
    ["Offset of field: Sat_Mem_t_::iPage"][::std::mem::offset_of!(Sat_Mem_t_, iPage) - 24usize];
    ["Offset of field: Sat_Mem_t_::nPageSize"]
        [::std::mem::offset_of!(Sat_Mem_t_, nPageSize) - 32usize];
    ["Offset of field: Sat_Mem_t_::uPageMask"]
        [::std::mem::offset_of!(Sat_Mem_t_, uPageMask) - 36usize];
    ["Offset of field: Sat_Mem_t_::uLearnedMask"]
        [::std::mem::offset_of!(Sat_Mem_t_, uLearnedMask) - 40usize];
    ["Offset of field: Sat_Mem_t_::nPagesAlloc"]
        [::std::mem::offset_of!(Sat_Mem_t_, nPagesAlloc) - 44usize];
    ["Offset of field: Sat_Mem_t_::pPages"][::std::mem::offset_of!(Sat_Mem_t_, pPages) - 48usize];
};
extern "C" {
    #[link_name = "Sat_MemLimit_imctk_abc_sys"]
    pub fn Sat_MemLimit(p: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemIncLimit_imctk_abc_sys"]
    pub fn Sat_MemIncLimit(
        p: *mut ::std::os::raw::c_int,
        nInts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemWriteLimit_imctk_abc_sys"]
    pub fn Sat_MemWriteLimit(p: *mut ::std::os::raw::c_int, nInts: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Sat_MemHandPage_imctk_abc_sys"]
    pub fn Sat_MemHandPage(p: *mut Sat_Mem_t, h: cla) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemHandShift_imctk_abc_sys"]
    pub fn Sat_MemHandShift(p: *mut Sat_Mem_t, h: cla) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemIntSize_imctk_abc_sys"]
    pub fn Sat_MemIntSize(
        size: ::std::os::raw::c_int,
        lrn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemClauseSize_imctk_abc_sys"]
    pub fn Sat_MemClauseSize(p: *mut clause) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemClauseSize2_imctk_abc_sys"]
    pub fn Sat_MemClauseSize2(p: *mut clause) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemClause_imctk_abc_sys"]
    pub fn Sat_MemClause(
        p: *mut Sat_Mem_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> *mut clause;
}
extern "C" {
    #[link_name = "Sat_MemClauseHand_imctk_abc_sys"]
    pub fn Sat_MemClauseHand(p: *mut Sat_Mem_t, h: cla) -> *mut clause;
}
extern "C" {
    #[link_name = "Sat_MemEntryNum_imctk_abc_sys"]
    pub fn Sat_MemEntryNum(p: *mut Sat_Mem_t, lrn: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemHand_imctk_abc_sys"]
    pub fn Sat_MemHand(
        p: *mut Sat_Mem_t,
        i: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
    ) -> cla;
}
extern "C" {
    #[link_name = "Sat_MemHandCurrent_imctk_abc_sys"]
    pub fn Sat_MemHandCurrent(p: *mut Sat_Mem_t, lrn: ::std::os::raw::c_int) -> cla;
}
extern "C" {
    #[link_name = "Sat_MemClauseUsed_imctk_abc_sys"]
    pub fn Sat_MemClauseUsed(p: *mut Sat_Mem_t, h: cla) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemMemoryHand_imctk_abc_sys"]
    pub fn Sat_MemMemoryHand(p: *mut Sat_Mem_t, h: cla) -> f64;
}
extern "C" {
    #[link_name = "Sat_MemMemoryUsed_imctk_abc_sys"]
    pub fn Sat_MemMemoryUsed(p: *mut Sat_Mem_t, lrn: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "Sat_MemMemoryAllUsed_imctk_abc_sys"]
    pub fn Sat_MemMemoryAllUsed(p: *mut Sat_Mem_t) -> f64;
}
extern "C" {
    #[link_name = "Sat_MemMemoryAll_imctk_abc_sys"]
    pub fn Sat_MemMemoryAll(p: *mut Sat_Mem_t) -> f64;
}
extern "C" {
    #[link_name = "clause_from_lit_imctk_abc_sys"]
    pub fn clause_from_lit(l: lit) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "clause_is_lit_imctk_abc_sys"]
    pub fn clause_is_lit(h: cla) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "clause_read_lit_imctk_abc_sys"]
    pub fn clause_read_lit(h: cla) -> lit;
}
extern "C" {
    #[link_name = "clause_learnt_h_imctk_abc_sys"]
    pub fn clause_learnt_h(p: *mut Sat_Mem_t, h: cla) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "clause_learnt_imctk_abc_sys"]
    pub fn clause_learnt(c: *mut clause) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "clause_id_imctk_abc_sys"]
    pub fn clause_id(c: *mut clause) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "clause_set_id_imctk_abc_sys"]
    pub fn clause_set_id(c: *mut clause, id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "clause_size_imctk_abc_sys"]
    pub fn clause_size(c: *mut clause) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "clause_begin_imctk_abc_sys"]
    pub fn clause_begin(c: *mut clause) -> *mut lit;
}
extern "C" {
    #[link_name = "clause_end_imctk_abc_sys"]
    pub fn clause_end(c: *mut clause) -> *mut lit;
}
extern "C" {
    #[link_name = "clause_print__imctk_abc_sys"]
    pub fn clause_print_(c: *mut clause);
}
extern "C" {
    #[link_name = "Sat_MemCountL_imctk_abc_sys"]
    pub fn Sat_MemCountL(p: *mut Sat_Mem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemAlloc__imctk_abc_sys"]
    pub fn Sat_MemAlloc_(p: *mut Sat_Mem_t, nPageSize: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Sat_MemAlloc_imctk_abc_sys"]
    pub fn Sat_MemAlloc(nPageSize: ::std::os::raw::c_int) -> *mut Sat_Mem_t;
}
extern "C" {
    #[link_name = "Sat_MemRestart_imctk_abc_sys"]
    pub fn Sat_MemRestart(p: *mut Sat_Mem_t);
}
extern "C" {
    #[link_name = "Sat_MemBookMark_imctk_abc_sys"]
    pub fn Sat_MemBookMark(p: *mut Sat_Mem_t);
}
extern "C" {
    #[link_name = "Sat_MemRollBack_imctk_abc_sys"]
    pub fn Sat_MemRollBack(p: *mut Sat_Mem_t);
}
extern "C" {
    #[link_name = "Sat_MemFree__imctk_abc_sys"]
    pub fn Sat_MemFree_(p: *mut Sat_Mem_t);
}
extern "C" {
    #[link_name = "Sat_MemFree_imctk_abc_sys"]
    pub fn Sat_MemFree(p: *mut Sat_Mem_t);
}
extern "C" {
    #[link_name = "Sat_MemAppend_imctk_abc_sys"]
    pub fn Sat_MemAppend(
        p: *mut Sat_Mem_t,
        pArray: *mut ::std::os::raw::c_int,
        nSize: ::std::os::raw::c_int,
        lrn: ::std::os::raw::c_int,
        fPlus1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "Sat_MemShrink_imctk_abc_sys"]
    pub fn Sat_MemShrink(p: *mut Sat_Mem_t, h: ::std::os::raw::c_int, lrn: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "Sat_MemCompactLearned_imctk_abc_sys"]
    pub fn Sat_MemCompactLearned(
        p: *mut Sat_Mem_t,
        fDoMove: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type xdbl = word;
extern "C" {
    #[link_name = "Xdbl_Exp_imctk_abc_sys"]
    pub fn Xdbl_Exp(a: xdbl) -> word;
}
extern "C" {
    #[link_name = "Xdbl_Mnt_imctk_abc_sys"]
    pub fn Xdbl_Mnt(a: xdbl) -> word;
}
extern "C" {
    #[link_name = "Xdbl_Create_imctk_abc_sys"]
    pub fn Xdbl_Create(Exp: word, Mnt: word) -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Const1_imctk_abc_sys"]
    pub fn Xdbl_Const1() -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Const2_imctk_abc_sys"]
    pub fn Xdbl_Const2() -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Const3_imctk_abc_sys"]
    pub fn Xdbl_Const3() -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Const12_imctk_abc_sys"]
    pub fn Xdbl_Const12() -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Const1point5_imctk_abc_sys"]
    pub fn Xdbl_Const1point5() -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Const2point5_imctk_abc_sys"]
    pub fn Xdbl_Const2point5() -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Maximum_imctk_abc_sys"]
    pub fn Xdbl_Maximum() -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_ToDouble_imctk_abc_sys"]
    pub fn Xdbl_ToDouble(a: xdbl) -> f64;
}
extern "C" {
    #[link_name = "Xdbl_FromDouble_imctk_abc_sys"]
    pub fn Xdbl_FromDouble(a: f64) -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Add_imctk_abc_sys"]
    pub fn Xdbl_Add(a: xdbl, b: xdbl) -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Mul_imctk_abc_sys"]
    pub fn Xdbl_Mul(a: xdbl, b: xdbl) -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Div_imctk_abc_sys"]
    pub fn Xdbl_Div(a: xdbl, Deg2: ::std::os::raw::c_uint) -> xdbl;
}
extern "C" {
    #[link_name = "Xdbl_Test_imctk_abc_sys"]
    pub fn Xdbl_Test();
}
pub type sat_solver = sat_solver_t;
extern "C" {
    pub fn sat_solver_new() -> *mut sat_solver;
}
extern "C" {
    pub fn zsat_solver_new_seed(seed: f64) -> *mut sat_solver;
}
extern "C" {
    pub fn sat_solver_delete(s: *mut sat_solver);
}
extern "C" {
    pub fn sat_solver_addclause(
        s: *mut sat_solver,
        begin: *mut lit,
        end: *mut lit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_clause_new(
        s: *mut sat_solver,
        begin: *mut lit,
        end: *mut lit,
        learnt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_simplify(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_solve(
        s: *mut sat_solver,
        begin: *mut lit,
        end: *mut lit,
        nConfLimit: ABC_INT64_T,
        nInsLimit: ABC_INT64_T,
        nConfLimitGlobal: ABC_INT64_T,
        nInsLimitGlobal: ABC_INT64_T,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_solve_internal(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_solve_lexsat(
        s: *mut sat_solver,
        pLits: *mut ::std::os::raw::c_int,
        nLits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_minimize_assumptions(
        s: *mut sat_solver,
        pLits: *mut ::std::os::raw::c_int,
        nLits: ::std::os::raw::c_int,
        nConfLimit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_minimize_assumptions2(
        s: *mut sat_solver,
        pLits: *mut ::std::os::raw::c_int,
        nLits: ::std::os::raw::c_int,
        nConfLimit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_push(s: *mut sat_solver, p: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_pop(s: *mut sat_solver);
}
extern "C" {
    pub fn sat_solver_set_resource_limits(
        s: *mut sat_solver,
        nConfLimit: ABC_INT64_T,
        nInsLimit: ABC_INT64_T,
        nConfLimitGlobal: ABC_INT64_T,
        nInsLimitGlobal: ABC_INT64_T,
    );
}
extern "C" {
    pub fn sat_solver_restart(s: *mut sat_solver);
}
extern "C" {
    pub fn zsat_solver_restart_seed(s: *mut sat_solver, seed: f64);
}
extern "C" {
    pub fn sat_solver_rollback(s: *mut sat_solver);
}
extern "C" {
    pub fn sat_solver_nvars(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_nclauses(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_nconflicts(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_memory(s: *mut sat_solver) -> f64;
}
extern "C" {
    pub fn sat_solver_count_assigned(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_addvar(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_setnvars(s: *mut sat_solver, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sat_solver_get_var_value(
        s: *mut sat_solver,
        v: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sat_solver_set_var_activity(
        s: *mut sat_solver,
        pVars: *mut ::std::os::raw::c_int,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Sat_SolverWriteDimacs(
        p: *mut sat_solver,
        pFileName: *mut ::std::os::raw::c_char,
        assumptionsBegin: *mut lit,
        assumptionsEnd: *mut lit,
        incrementVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Sat_SolverPrintStats(pFile: *mut FILE, p: *mut sat_solver);
}
extern "C" {
    pub fn Sat_SolverGetModel(
        p: *mut sat_solver,
        pVars: *mut ::std::os::raw::c_int,
        nVars: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn Sat_SolverDoubleClauses(p: *mut sat_solver, iVar: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Sat_SolverTraceStart(pSat: *mut sat_solver, pName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Sat_SolverTraceStop(pSat: *mut sat_solver);
}
extern "C" {
    pub fn Sat_SolverTraceWrite(
        pSat: *mut sat_solver,
        pBeg: *mut ::std::os::raw::c_int,
        pEnd: *mut ::std::os::raw::c_int,
        fRoot: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sat_solver_store_alloc(s: *mut sat_solver);
}
extern "C" {
    pub fn sat_solver_store_write(s: *mut sat_solver, pFileName: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn sat_solver_store_free(s: *mut sat_solver);
}
extern "C" {
    pub fn sat_solver_store_mark_roots(s: *mut sat_solver);
}
extern "C" {
    pub fn sat_solver_store_mark_clauses_a(s: *mut sat_solver);
}
extern "C" {
    pub fn sat_solver_store_release(s: *mut sat_solver) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct varinfo_t {
    _unused: [u8; 0],
}
pub type varinfo = varinfo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sat_solver_t {
    pub size: ::std::os::raw::c_int,
    pub cap: ::std::os::raw::c_int,
    pub qhead: ::std::os::raw::c_int,
    pub qtail: ::std::os::raw::c_int,
    pub Mem: Sat_Mem_t,
    pub hLearnts: ::std::os::raw::c_int,
    pub hBinary: ::std::os::raw::c_int,
    pub binary: *mut clause,
    pub wlists: *mut veci,
    pub iVarPivot: ::std::os::raw::c_int,
    pub iTrailPivot: ::std::os::raw::c_int,
    pub hProofPivot: ::std::os::raw::c_int,
    pub VarActType: ::std::os::raw::c_int,
    pub ClaActType: ::std::os::raw::c_int,
    pub var_inc: word,
    pub var_inc2: word,
    pub var_decay: word,
    pub activity: *mut word,
    pub activity2: *mut word,
    pub cla_inc: ::std::os::raw::c_uint,
    pub cla_decay: ::std::os::raw::c_uint,
    pub act_clas: veci,
    pub pFreqs: *mut ::std::os::raw::c_char,
    pub nVarUsed: ::std::os::raw::c_int,
    pub levels: *mut ::std::os::raw::c_int,
    pub assigns: *mut ::std::os::raw::c_char,
    pub polarity: *mut ::std::os::raw::c_char,
    pub tags: *mut ::std::os::raw::c_char,
    pub loads: *mut ::std::os::raw::c_char,
    pub orderpos: *mut ::std::os::raw::c_int,
    pub reasons: *mut ::std::os::raw::c_int,
    pub trail: *mut lit,
    pub tagged: veci,
    pub stack: veci,
    pub order: veci,
    pub trail_lim: veci,
    pub model: *mut ::std::os::raw::c_int,
    pub conf_final: veci,
    pub root_level: ::std::os::raw::c_int,
    pub simpdb_assigns: ::std::os::raw::c_int,
    pub simpdb_props: ::std::os::raw::c_int,
    pub random_seed: f64,
    pub progress_estimate: f64,
    pub verbosity: ::std::os::raw::c_int,
    pub fVerbose: ::std::os::raw::c_int,
    pub fPrintClause: ::std::os::raw::c_int,
    pub stats: stats_t,
    pub nLearntMax: ::std::os::raw::c_int,
    pub nLearntStart: ::std::os::raw::c_int,
    pub nLearntDelta: ::std::os::raw::c_int,
    pub nLearntRatio: ::std::os::raw::c_int,
    pub nDBreduces: ::std::os::raw::c_int,
    pub nConfLimit: ABC_INT64_T,
    pub nInsLimit: ABC_INT64_T,
    pub nRuntimeLimit: abctime,
    pub act_vars: veci,
    pub factors: *mut f64,
    pub nRestarts: ::std::os::raw::c_int,
    pub nCalls: ::std::os::raw::c_int,
    pub nCalls2: ::std::os::raw::c_int,
    pub unit_lits: veci,
    pub pivot_vars: veci,
    pub fSkipSimplify: ::std::os::raw::c_int,
    pub fNotUseRandom: ::std::os::raw::c_int,
    pub fNoRestarts: ::std::os::raw::c_int,
    pub pGlobalVars: *mut ::std::os::raw::c_int,
    pub pStore: *mut ::std::os::raw::c_void,
    pub fSolved: ::std::os::raw::c_int,
    pub pFile: *mut FILE,
    pub nClauses: ::std::os::raw::c_int,
    pub nRoots: ::std::os::raw::c_int,
    pub temp_clause: veci,
    pub user_vars: veci,
    pub user_values: veci,
    pub pCnfMan: *mut ::std::os::raw::c_void,
    pub pCnfFunc: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            arg1: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub RunId: ::std::os::raw::c_int,
    pub pFuncStop: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sat_solver_t"][::std::mem::size_of::<sat_solver_t>() - 728usize];
    ["Alignment of sat_solver_t"][::std::mem::align_of::<sat_solver_t>() - 8usize];
    ["Offset of field: sat_solver_t::size"][::std::mem::offset_of!(sat_solver_t, size) - 0usize];
    ["Offset of field: sat_solver_t::cap"][::std::mem::offset_of!(sat_solver_t, cap) - 4usize];
    ["Offset of field: sat_solver_t::qhead"][::std::mem::offset_of!(sat_solver_t, qhead) - 8usize];
    ["Offset of field: sat_solver_t::qtail"][::std::mem::offset_of!(sat_solver_t, qtail) - 12usize];
    ["Offset of field: sat_solver_t::Mem"][::std::mem::offset_of!(sat_solver_t, Mem) - 16usize];
    ["Offset of field: sat_solver_t::hLearnts"]
        [::std::mem::offset_of!(sat_solver_t, hLearnts) - 72usize];
    ["Offset of field: sat_solver_t::hBinary"]
        [::std::mem::offset_of!(sat_solver_t, hBinary) - 76usize];
    ["Offset of field: sat_solver_t::binary"]
        [::std::mem::offset_of!(sat_solver_t, binary) - 80usize];
    ["Offset of field: sat_solver_t::wlists"]
        [::std::mem::offset_of!(sat_solver_t, wlists) - 88usize];
    ["Offset of field: sat_solver_t::iVarPivot"]
        [::std::mem::offset_of!(sat_solver_t, iVarPivot) - 96usize];
    ["Offset of field: sat_solver_t::iTrailPivot"]
        [::std::mem::offset_of!(sat_solver_t, iTrailPivot) - 100usize];
    ["Offset of field: sat_solver_t::hProofPivot"]
        [::std::mem::offset_of!(sat_solver_t, hProofPivot) - 104usize];
    ["Offset of field: sat_solver_t::VarActType"]
        [::std::mem::offset_of!(sat_solver_t, VarActType) - 108usize];
    ["Offset of field: sat_solver_t::ClaActType"]
        [::std::mem::offset_of!(sat_solver_t, ClaActType) - 112usize];
    ["Offset of field: sat_solver_t::var_inc"]
        [::std::mem::offset_of!(sat_solver_t, var_inc) - 120usize];
    ["Offset of field: sat_solver_t::var_inc2"]
        [::std::mem::offset_of!(sat_solver_t, var_inc2) - 128usize];
    ["Offset of field: sat_solver_t::var_decay"]
        [::std::mem::offset_of!(sat_solver_t, var_decay) - 136usize];
    ["Offset of field: sat_solver_t::activity"]
        [::std::mem::offset_of!(sat_solver_t, activity) - 144usize];
    ["Offset of field: sat_solver_t::activity2"]
        [::std::mem::offset_of!(sat_solver_t, activity2) - 152usize];
    ["Offset of field: sat_solver_t::cla_inc"]
        [::std::mem::offset_of!(sat_solver_t, cla_inc) - 160usize];
    ["Offset of field: sat_solver_t::cla_decay"]
        [::std::mem::offset_of!(sat_solver_t, cla_decay) - 164usize];
    ["Offset of field: sat_solver_t::act_clas"]
        [::std::mem::offset_of!(sat_solver_t, act_clas) - 168usize];
    ["Offset of field: sat_solver_t::pFreqs"]
        [::std::mem::offset_of!(sat_solver_t, pFreqs) - 184usize];
    ["Offset of field: sat_solver_t::nVarUsed"]
        [::std::mem::offset_of!(sat_solver_t, nVarUsed) - 192usize];
    ["Offset of field: sat_solver_t::levels"]
        [::std::mem::offset_of!(sat_solver_t, levels) - 200usize];
    ["Offset of field: sat_solver_t::assigns"]
        [::std::mem::offset_of!(sat_solver_t, assigns) - 208usize];
    ["Offset of field: sat_solver_t::polarity"]
        [::std::mem::offset_of!(sat_solver_t, polarity) - 216usize];
    ["Offset of field: sat_solver_t::tags"][::std::mem::offset_of!(sat_solver_t, tags) - 224usize];
    ["Offset of field: sat_solver_t::loads"]
        [::std::mem::offset_of!(sat_solver_t, loads) - 232usize];
    ["Offset of field: sat_solver_t::orderpos"]
        [::std::mem::offset_of!(sat_solver_t, orderpos) - 240usize];
    ["Offset of field: sat_solver_t::reasons"]
        [::std::mem::offset_of!(sat_solver_t, reasons) - 248usize];
    ["Offset of field: sat_solver_t::trail"]
        [::std::mem::offset_of!(sat_solver_t, trail) - 256usize];
    ["Offset of field: sat_solver_t::tagged"]
        [::std::mem::offset_of!(sat_solver_t, tagged) - 264usize];
    ["Offset of field: sat_solver_t::stack"]
        [::std::mem::offset_of!(sat_solver_t, stack) - 280usize];
    ["Offset of field: sat_solver_t::order"]
        [::std::mem::offset_of!(sat_solver_t, order) - 296usize];
    ["Offset of field: sat_solver_t::trail_lim"]
        [::std::mem::offset_of!(sat_solver_t, trail_lim) - 312usize];
    ["Offset of field: sat_solver_t::model"]
        [::std::mem::offset_of!(sat_solver_t, model) - 328usize];
    ["Offset of field: sat_solver_t::conf_final"]
        [::std::mem::offset_of!(sat_solver_t, conf_final) - 336usize];
    ["Offset of field: sat_solver_t::root_level"]
        [::std::mem::offset_of!(sat_solver_t, root_level) - 352usize];
    ["Offset of field: sat_solver_t::simpdb_assigns"]
        [::std::mem::offset_of!(sat_solver_t, simpdb_assigns) - 356usize];
    ["Offset of field: sat_solver_t::simpdb_props"]
        [::std::mem::offset_of!(sat_solver_t, simpdb_props) - 360usize];
    ["Offset of field: sat_solver_t::random_seed"]
        [::std::mem::offset_of!(sat_solver_t, random_seed) - 368usize];
    ["Offset of field: sat_solver_t::progress_estimate"]
        [::std::mem::offset_of!(sat_solver_t, progress_estimate) - 376usize];
    ["Offset of field: sat_solver_t::verbosity"]
        [::std::mem::offset_of!(sat_solver_t, verbosity) - 384usize];
    ["Offset of field: sat_solver_t::fVerbose"]
        [::std::mem::offset_of!(sat_solver_t, fVerbose) - 388usize];
    ["Offset of field: sat_solver_t::fPrintClause"]
        [::std::mem::offset_of!(sat_solver_t, fPrintClause) - 392usize];
    ["Offset of field: sat_solver_t::stats"]
        [::std::mem::offset_of!(sat_solver_t, stats) - 400usize];
    ["Offset of field: sat_solver_t::nLearntMax"]
        [::std::mem::offset_of!(sat_solver_t, nLearntMax) - 472usize];
    ["Offset of field: sat_solver_t::nLearntStart"]
        [::std::mem::offset_of!(sat_solver_t, nLearntStart) - 476usize];
    ["Offset of field: sat_solver_t::nLearntDelta"]
        [::std::mem::offset_of!(sat_solver_t, nLearntDelta) - 480usize];
    ["Offset of field: sat_solver_t::nLearntRatio"]
        [::std::mem::offset_of!(sat_solver_t, nLearntRatio) - 484usize];
    ["Offset of field: sat_solver_t::nDBreduces"]
        [::std::mem::offset_of!(sat_solver_t, nDBreduces) - 488usize];
    ["Offset of field: sat_solver_t::nConfLimit"]
        [::std::mem::offset_of!(sat_solver_t, nConfLimit) - 496usize];
    ["Offset of field: sat_solver_t::nInsLimit"]
        [::std::mem::offset_of!(sat_solver_t, nInsLimit) - 504usize];
    ["Offset of field: sat_solver_t::nRuntimeLimit"]
        [::std::mem::offset_of!(sat_solver_t, nRuntimeLimit) - 512usize];
    ["Offset of field: sat_solver_t::act_vars"]
        [::std::mem::offset_of!(sat_solver_t, act_vars) - 520usize];
    ["Offset of field: sat_solver_t::factors"]
        [::std::mem::offset_of!(sat_solver_t, factors) - 536usize];
    ["Offset of field: sat_solver_t::nRestarts"]
        [::std::mem::offset_of!(sat_solver_t, nRestarts) - 544usize];
    ["Offset of field: sat_solver_t::nCalls"]
        [::std::mem::offset_of!(sat_solver_t, nCalls) - 548usize];
    ["Offset of field: sat_solver_t::nCalls2"]
        [::std::mem::offset_of!(sat_solver_t, nCalls2) - 552usize];
    ["Offset of field: sat_solver_t::unit_lits"]
        [::std::mem::offset_of!(sat_solver_t, unit_lits) - 560usize];
    ["Offset of field: sat_solver_t::pivot_vars"]
        [::std::mem::offset_of!(sat_solver_t, pivot_vars) - 576usize];
    ["Offset of field: sat_solver_t::fSkipSimplify"]
        [::std::mem::offset_of!(sat_solver_t, fSkipSimplify) - 592usize];
    ["Offset of field: sat_solver_t::fNotUseRandom"]
        [::std::mem::offset_of!(sat_solver_t, fNotUseRandom) - 596usize];
    ["Offset of field: sat_solver_t::fNoRestarts"]
        [::std::mem::offset_of!(sat_solver_t, fNoRestarts) - 600usize];
    ["Offset of field: sat_solver_t::pGlobalVars"]
        [::std::mem::offset_of!(sat_solver_t, pGlobalVars) - 608usize];
    ["Offset of field: sat_solver_t::pStore"]
        [::std::mem::offset_of!(sat_solver_t, pStore) - 616usize];
    ["Offset of field: sat_solver_t::fSolved"]
        [::std::mem::offset_of!(sat_solver_t, fSolved) - 624usize];
    ["Offset of field: sat_solver_t::pFile"]
        [::std::mem::offset_of!(sat_solver_t, pFile) - 632usize];
    ["Offset of field: sat_solver_t::nClauses"]
        [::std::mem::offset_of!(sat_solver_t, nClauses) - 640usize];
    ["Offset of field: sat_solver_t::nRoots"]
        [::std::mem::offset_of!(sat_solver_t, nRoots) - 644usize];
    ["Offset of field: sat_solver_t::temp_clause"]
        [::std::mem::offset_of!(sat_solver_t, temp_clause) - 648usize];
    ["Offset of field: sat_solver_t::user_vars"]
        [::std::mem::offset_of!(sat_solver_t, user_vars) - 664usize];
    ["Offset of field: sat_solver_t::user_values"]
        [::std::mem::offset_of!(sat_solver_t, user_values) - 680usize];
    ["Offset of field: sat_solver_t::pCnfMan"]
        [::std::mem::offset_of!(sat_solver_t, pCnfMan) - 696usize];
    ["Offset of field: sat_solver_t::pCnfFunc"]
        [::std::mem::offset_of!(sat_solver_t, pCnfFunc) - 704usize];
    ["Offset of field: sat_solver_t::RunId"]
        [::std::mem::offset_of!(sat_solver_t, RunId) - 712usize];
    ["Offset of field: sat_solver_t::pFuncStop"]
        [::std::mem::offset_of!(sat_solver_t, pFuncStop) - 720usize];
};
extern "C" {
    #[link_name = "clause_read_imctk_abc_sys"]
    pub fn clause_read(s: *mut sat_solver, h: cla) -> *mut clause;
}
extern "C" {
    #[link_name = "sat_solver_var_value_imctk_abc_sys"]
    pub fn sat_solver_var_value(
        s: *mut sat_solver,
        v: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_var_literal_imctk_abc_sys"]
    pub fn sat_solver_var_literal(
        s: *mut sat_solver,
        v: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_flip_print_clause_imctk_abc_sys"]
    pub fn sat_solver_flip_print_clause(s: *mut sat_solver);
}
extern "C" {
    #[link_name = "sat_solver_act_var_clear_imctk_abc_sys"]
    pub fn sat_solver_act_var_clear(s: *mut sat_solver);
}
extern "C" {
    #[link_name = "sat_solver_compress_imctk_abc_sys"]
    pub fn sat_solver_compress(s: *mut sat_solver);
}
extern "C" {
    #[link_name = "sat_solver_delete_p_imctk_abc_sys"]
    pub fn sat_solver_delete_p(ps: *mut *mut sat_solver);
}
extern "C" {
    #[link_name = "sat_solver_clean_polarity_imctk_abc_sys"]
    pub fn sat_solver_clean_polarity(
        s: *mut sat_solver,
        pVars: *mut ::std::os::raw::c_int,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "sat_solver_set_polarity_imctk_abc_sys"]
    pub fn sat_solver_set_polarity(
        s: *mut sat_solver,
        pVars: *mut ::std::os::raw::c_int,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "sat_solver_set_literal_polarity_imctk_abc_sys"]
    pub fn sat_solver_set_literal_polarity(
        s: *mut sat_solver,
        pLits: *mut ::std::os::raw::c_int,
        nLits: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "sat_solver_final_imctk_abc_sys"]
    pub fn sat_solver_final(
        s: *mut sat_solver,
        ppArray: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_randomize_imctk_abc_sys"]
    pub fn sat_solver_randomize(
        pSat: *mut sat_solver,
        iVar: ::std::os::raw::c_int,
        nVars: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "sat_solver_set_runtime_limit_imctk_abc_sys"]
    pub fn sat_solver_set_runtime_limit(s: *mut sat_solver, Limit: abctime) -> abctime;
}
extern "C" {
    #[link_name = "sat_solver_set_random_imctk_abc_sys"]
    pub fn sat_solver_set_random(
        s: *mut sat_solver,
        fNotUseRandom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_bookmark_imctk_abc_sys"]
    pub fn sat_solver_bookmark(s: *mut sat_solver);
}
extern "C" {
    #[link_name = "sat_solver_set_pivot_variables_imctk_abc_sys"]
    pub fn sat_solver_set_pivot_variables(
        s: *mut sat_solver,
        pPivots: *mut ::std::os::raw::c_int,
        nPivots: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "sat_solver_count_usedvars_imctk_abc_sys"]
    pub fn sat_solver_count_usedvars(s: *mut sat_solver) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_set_runid_imctk_abc_sys"]
    pub fn sat_solver_set_runid(s: *mut sat_solver, id: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "sat_solver_set_stop_func_imctk_abc_sys"]
    pub fn sat_solver_set_stop_func(
        s: *mut sat_solver,
        fnct: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "sat_solver_add_const_imctk_abc_sys"]
    pub fn sat_solver_add_const(
        pSat: *mut sat_solver,
        iVar: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_buffer_imctk_abc_sys"]
    pub fn sat_solver_add_buffer(
        pSat: *mut sat_solver,
        iVarA: ::std::os::raw::c_int,
        iVarB: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_buffer_enable_imctk_abc_sys"]
    pub fn sat_solver_add_buffer_enable(
        pSat: *mut sat_solver,
        iVarA: ::std::os::raw::c_int,
        iVarB: ::std::os::raw::c_int,
        iVarEn: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_and_imctk_abc_sys"]
    pub fn sat_solver_add_and(
        pSat: *mut sat_solver,
        iVar: ::std::os::raw::c_int,
        iVar0: ::std::os::raw::c_int,
        iVar1: ::std::os::raw::c_int,
        fCompl0: ::std::os::raw::c_int,
        fCompl1: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_xor_imctk_abc_sys"]
    pub fn sat_solver_add_xor(
        pSat: *mut sat_solver,
        iVarA: ::std::os::raw::c_int,
        iVarB: ::std::os::raw::c_int,
        iVarC: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_mux_imctk_abc_sys"]
    pub fn sat_solver_add_mux(
        pSat: *mut sat_solver,
        iVarZ: ::std::os::raw::c_int,
        iVarC: ::std::os::raw::c_int,
        iVarT: ::std::os::raw::c_int,
        iVarE: ::std::os::raw::c_int,
        iComplC: ::std::os::raw::c_int,
        iComplT: ::std::os::raw::c_int,
        iComplE: ::std::os::raw::c_int,
        iComplZ: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_mux41_imctk_abc_sys"]
    pub fn sat_solver_add_mux41(
        pSat: *mut sat_solver,
        iVarZ: ::std::os::raw::c_int,
        iVarC0: ::std::os::raw::c_int,
        iVarC1: ::std::os::raw::c_int,
        iVarD0: ::std::os::raw::c_int,
        iVarD1: ::std::os::raw::c_int,
        iVarD2: ::std::os::raw::c_int,
        iVarD3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_xor_and_imctk_abc_sys"]
    pub fn sat_solver_add_xor_and(
        pSat: *mut sat_solver,
        iVarF: ::std::os::raw::c_int,
        iVarA: ::std::os::raw::c_int,
        iVarB: ::std::os::raw::c_int,
        iVarC: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_constraint_imctk_abc_sys"]
    pub fn sat_solver_add_constraint(
        pSat: *mut sat_solver,
        iVar: ::std::os::raw::c_int,
        iVar2: ::std::os::raw::c_int,
        fCompl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sat_solver_add_half_sorter_imctk_abc_sys"]
    pub fn sat_solver_add_half_sorter(
        pSat: *mut sat_solver,
        iVarA: ::std::os::raw::c_int,
        iVarB: ::std::os::raw::c_int,
        iVar0: ::std::os::raw::c_int,
        iVar1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Txs_Man_t_ {
    _unused: [u8; 0],
}
pub type Txs_Man_t = Txs_Man_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Txs3_Man_t_ {
    _unused: [u8; 0],
}
pub type Txs3_Man_t = Txs3_Man_t_;
pub type Pdr_Set_t = Pdr_Set_t_;
#[repr(C)]
#[derive(Debug)]
pub struct Pdr_Set_t_ {
    pub Sign: word,
    pub nRefs: ::std::os::raw::c_int,
    pub iBound: ::std::os::raw::c_int,
    pub nTotal: ::std::os::raw::c_int,
    pub nLits: ::std::os::raw::c_int,
    pub Lits: __IncompleteArrayField<::std::os::raw::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pdr_Set_t_"][::std::mem::size_of::<Pdr_Set_t_>() - 24usize];
    ["Alignment of Pdr_Set_t_"][::std::mem::align_of::<Pdr_Set_t_>() - 8usize];
    ["Offset of field: Pdr_Set_t_::Sign"][::std::mem::offset_of!(Pdr_Set_t_, Sign) - 0usize];
    ["Offset of field: Pdr_Set_t_::nRefs"][::std::mem::offset_of!(Pdr_Set_t_, nRefs) - 8usize];
    ["Offset of field: Pdr_Set_t_::iBound"][::std::mem::offset_of!(Pdr_Set_t_, iBound) - 12usize];
    ["Offset of field: Pdr_Set_t_::nTotal"][::std::mem::offset_of!(Pdr_Set_t_, nTotal) - 16usize];
    ["Offset of field: Pdr_Set_t_::nLits"][::std::mem::offset_of!(Pdr_Set_t_, nLits) - 20usize];
    ["Offset of field: Pdr_Set_t_::Lits"][::std::mem::offset_of!(Pdr_Set_t_, Lits) - 24usize];
};
pub type Pdr_Obl_t = Pdr_Obl_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pdr_Obl_t_ {
    pub iFrame: ::std::os::raw::c_int,
    pub prio: ::std::os::raw::c_int,
    pub nRefs: ::std::os::raw::c_int,
    pub pState: *mut Pdr_Set_t,
    pub pNext: *mut Pdr_Obl_t,
    pub pLink: *mut Pdr_Obl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pdr_Obl_t_"][::std::mem::size_of::<Pdr_Obl_t_>() - 40usize];
    ["Alignment of Pdr_Obl_t_"][::std::mem::align_of::<Pdr_Obl_t_>() - 8usize];
    ["Offset of field: Pdr_Obl_t_::iFrame"][::std::mem::offset_of!(Pdr_Obl_t_, iFrame) - 0usize];
    ["Offset of field: Pdr_Obl_t_::prio"][::std::mem::offset_of!(Pdr_Obl_t_, prio) - 4usize];
    ["Offset of field: Pdr_Obl_t_::nRefs"][::std::mem::offset_of!(Pdr_Obl_t_, nRefs) - 8usize];
    ["Offset of field: Pdr_Obl_t_::pState"][::std::mem::offset_of!(Pdr_Obl_t_, pState) - 16usize];
    ["Offset of field: Pdr_Obl_t_::pNext"][::std::mem::offset_of!(Pdr_Obl_t_, pNext) - 24usize];
    ["Offset of field: Pdr_Obl_t_::pLink"][::std::mem::offset_of!(Pdr_Obl_t_, pLink) - 32usize];
};
pub type Pdr_Man_t = Pdr_Man_t_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pdr_Man_t_ {
    pub pPars: *mut Pdr_Par_t,
    pub pAig: *mut Aig_Man_t,
    pub pGia: *mut Gia_Man_t,
    pub pCnfMan: *mut Cnf_Man_t,
    pub pCnf1: *mut Cnf_Dat_t,
    pub vVar2Reg: *mut Vec_Int_t,
    pub pCnf2: *mut Cnf_Dat_t,
    pub pvId2Vars: *mut Vec_Int_t,
    pub vVar2Ids: Vec_Ptr_t,
    pub vVLits: *mut Vec_Wec_t,
    pub iOutCur: ::std::os::raw::c_int,
    pub nPrioShift: ::std::os::raw::c_int,
    pub vCexes: *mut Vec_Ptr_t,
    pub vSolvers: *mut Vec_Ptr_t,
    pub vClauses: *mut Vec_Vec_t,
    pub pQueue: *mut Pdr_Obl_t,
    pub pOrder: *mut ::std::os::raw::c_int,
    pub vActVars: *mut Vec_Int_t,
    pub iUseFrame: ::std::os::raw::c_int,
    pub nAbsFlops: ::std::os::raw::c_int,
    pub vAbsFlops: *mut Vec_Int_t,
    pub vMapFf2Ppi: *mut Vec_Int_t,
    pub vMapPpi2Ff: *mut Vec_Int_t,
    pub nCexes: ::std::os::raw::c_int,
    pub nCexesTotal: ::std::os::raw::c_int,
    pub pTxs3: *mut Txs3_Man_t,
    pub vPrio: *mut Vec_Int_t,
    pub vLits: *mut Vec_Int_t,
    pub vCiObjs: *mut Vec_Int_t,
    pub vCoObjs: *mut Vec_Int_t,
    pub vCiVals: *mut Vec_Int_t,
    pub vCoVals: *mut Vec_Int_t,
    pub vNodes: *mut Vec_Int_t,
    pub vUndo: *mut Vec_Int_t,
    pub vVisits: *mut Vec_Int_t,
    pub vCi2Rem: *mut Vec_Int_t,
    pub vRes: *mut Vec_Int_t,
    pub pTime4Outs: *mut abctime,
    pub vInfCubes: *mut Vec_Ptr_t,
    pub nBlocks: ::std::os::raw::c_int,
    pub nObligs: ::std::os::raw::c_int,
    pub nCubes: ::std::os::raw::c_int,
    pub nCalls: ::std::os::raw::c_int,
    pub nCallsS: ::std::os::raw::c_int,
    pub nCallsU: ::std::os::raw::c_int,
    pub nStarts: ::std::os::raw::c_int,
    pub nFrames: ::std::os::raw::c_int,
    pub nCasesSS: ::std::os::raw::c_int,
    pub nCasesSU: ::std::os::raw::c_int,
    pub nCasesUS: ::std::os::raw::c_int,
    pub nCasesUU: ::std::os::raw::c_int,
    pub nQueCur: ::std::os::raw::c_int,
    pub nQueMax: ::std::os::raw::c_int,
    pub nQueLim: ::std::os::raw::c_int,
    pub nQueLimStep: ::std::os::raw::c_int,
    pub nXsimRuns: ::std::os::raw::c_int,
    pub nXsimLits: ::std::os::raw::c_int,
    pub nInfClauses: ::std::os::raw::c_int,
    pub fNewInfClauses: ::std::os::raw::c_int,
    pub timeToStop: abctime,
    pub timeToStopOne: abctime,
    pub tSat: abctime,
    pub tSatSat: abctime,
    pub tSatUnsat: abctime,
    pub tGeneral: abctime,
    pub tPush: abctime,
    pub tTsim: abctime,
    pub tContain: abctime,
    pub tCnf: abctime,
    pub tAbs: abctime,
    pub tTotal: abctime,
    pub tStart: abctime,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Pdr_Man_t_"][::std::mem::size_of::<Pdr_Man_t_>() - 480usize];
    ["Alignment of Pdr_Man_t_"][::std::mem::align_of::<Pdr_Man_t_>() - 8usize];
    ["Offset of field: Pdr_Man_t_::pPars"][::std::mem::offset_of!(Pdr_Man_t_, pPars) - 0usize];
    ["Offset of field: Pdr_Man_t_::pAig"][::std::mem::offset_of!(Pdr_Man_t_, pAig) - 8usize];
    ["Offset of field: Pdr_Man_t_::pGia"][::std::mem::offset_of!(Pdr_Man_t_, pGia) - 16usize];
    ["Offset of field: Pdr_Man_t_::pCnfMan"][::std::mem::offset_of!(Pdr_Man_t_, pCnfMan) - 24usize];
    ["Offset of field: Pdr_Man_t_::pCnf1"][::std::mem::offset_of!(Pdr_Man_t_, pCnf1) - 32usize];
    ["Offset of field: Pdr_Man_t_::vVar2Reg"]
        [::std::mem::offset_of!(Pdr_Man_t_, vVar2Reg) - 40usize];
    ["Offset of field: Pdr_Man_t_::pCnf2"][::std::mem::offset_of!(Pdr_Man_t_, pCnf2) - 48usize];
    ["Offset of field: Pdr_Man_t_::pvId2Vars"]
        [::std::mem::offset_of!(Pdr_Man_t_, pvId2Vars) - 56usize];
    ["Offset of field: Pdr_Man_t_::vVar2Ids"]
        [::std::mem::offset_of!(Pdr_Man_t_, vVar2Ids) - 64usize];
    ["Offset of field: Pdr_Man_t_::vVLits"][::std::mem::offset_of!(Pdr_Man_t_, vVLits) - 80usize];
    ["Offset of field: Pdr_Man_t_::iOutCur"][::std::mem::offset_of!(Pdr_Man_t_, iOutCur) - 88usize];
    ["Offset of field: Pdr_Man_t_::nPrioShift"]
        [::std::mem::offset_of!(Pdr_Man_t_, nPrioShift) - 92usize];
    ["Offset of field: Pdr_Man_t_::vCexes"][::std::mem::offset_of!(Pdr_Man_t_, vCexes) - 96usize];
    ["Offset of field: Pdr_Man_t_::vSolvers"]
        [::std::mem::offset_of!(Pdr_Man_t_, vSolvers) - 104usize];
    ["Offset of field: Pdr_Man_t_::vClauses"]
        [::std::mem::offset_of!(Pdr_Man_t_, vClauses) - 112usize];
    ["Offset of field: Pdr_Man_t_::pQueue"][::std::mem::offset_of!(Pdr_Man_t_, pQueue) - 120usize];
    ["Offset of field: Pdr_Man_t_::pOrder"][::std::mem::offset_of!(Pdr_Man_t_, pOrder) - 128usize];
    ["Offset of field: Pdr_Man_t_::vActVars"]
        [::std::mem::offset_of!(Pdr_Man_t_, vActVars) - 136usize];
    ["Offset of field: Pdr_Man_t_::iUseFrame"]
        [::std::mem::offset_of!(Pdr_Man_t_, iUseFrame) - 144usize];
    ["Offset of field: Pdr_Man_t_::nAbsFlops"]
        [::std::mem::offset_of!(Pdr_Man_t_, nAbsFlops) - 148usize];
    ["Offset of field: Pdr_Man_t_::vAbsFlops"]
        [::std::mem::offset_of!(Pdr_Man_t_, vAbsFlops) - 152usize];
    ["Offset of field: Pdr_Man_t_::vMapFf2Ppi"]
        [::std::mem::offset_of!(Pdr_Man_t_, vMapFf2Ppi) - 160usize];
    ["Offset of field: Pdr_Man_t_::vMapPpi2Ff"]
        [::std::mem::offset_of!(Pdr_Man_t_, vMapPpi2Ff) - 168usize];
    ["Offset of field: Pdr_Man_t_::nCexes"][::std::mem::offset_of!(Pdr_Man_t_, nCexes) - 176usize];
    ["Offset of field: Pdr_Man_t_::nCexesTotal"]
        [::std::mem::offset_of!(Pdr_Man_t_, nCexesTotal) - 180usize];
    ["Offset of field: Pdr_Man_t_::pTxs3"][::std::mem::offset_of!(Pdr_Man_t_, pTxs3) - 184usize];
    ["Offset of field: Pdr_Man_t_::vPrio"][::std::mem::offset_of!(Pdr_Man_t_, vPrio) - 192usize];
    ["Offset of field: Pdr_Man_t_::vLits"][::std::mem::offset_of!(Pdr_Man_t_, vLits) - 200usize];
    ["Offset of field: Pdr_Man_t_::vCiObjs"]
        [::std::mem::offset_of!(Pdr_Man_t_, vCiObjs) - 208usize];
    ["Offset of field: Pdr_Man_t_::vCoObjs"]
        [::std::mem::offset_of!(Pdr_Man_t_, vCoObjs) - 216usize];
    ["Offset of field: Pdr_Man_t_::vCiVals"]
        [::std::mem::offset_of!(Pdr_Man_t_, vCiVals) - 224usize];
    ["Offset of field: Pdr_Man_t_::vCoVals"]
        [::std::mem::offset_of!(Pdr_Man_t_, vCoVals) - 232usize];
    ["Offset of field: Pdr_Man_t_::vNodes"][::std::mem::offset_of!(Pdr_Man_t_, vNodes) - 240usize];
    ["Offset of field: Pdr_Man_t_::vUndo"][::std::mem::offset_of!(Pdr_Man_t_, vUndo) - 248usize];
    ["Offset of field: Pdr_Man_t_::vVisits"]
        [::std::mem::offset_of!(Pdr_Man_t_, vVisits) - 256usize];
    ["Offset of field: Pdr_Man_t_::vCi2Rem"]
        [::std::mem::offset_of!(Pdr_Man_t_, vCi2Rem) - 264usize];
    ["Offset of field: Pdr_Man_t_::vRes"][::std::mem::offset_of!(Pdr_Man_t_, vRes) - 272usize];
    ["Offset of field: Pdr_Man_t_::pTime4Outs"]
        [::std::mem::offset_of!(Pdr_Man_t_, pTime4Outs) - 280usize];
    ["Offset of field: Pdr_Man_t_::vInfCubes"]
        [::std::mem::offset_of!(Pdr_Man_t_, vInfCubes) - 288usize];
    ["Offset of field: Pdr_Man_t_::nBlocks"]
        [::std::mem::offset_of!(Pdr_Man_t_, nBlocks) - 296usize];
    ["Offset of field: Pdr_Man_t_::nObligs"]
        [::std::mem::offset_of!(Pdr_Man_t_, nObligs) - 300usize];
    ["Offset of field: Pdr_Man_t_::nCubes"][::std::mem::offset_of!(Pdr_Man_t_, nCubes) - 304usize];
    ["Offset of field: Pdr_Man_t_::nCalls"][::std::mem::offset_of!(Pdr_Man_t_, nCalls) - 308usize];
    ["Offset of field: Pdr_Man_t_::nCallsS"]
        [::std::mem::offset_of!(Pdr_Man_t_, nCallsS) - 312usize];
    ["Offset of field: Pdr_Man_t_::nCallsU"]
        [::std::mem::offset_of!(Pdr_Man_t_, nCallsU) - 316usize];
    ["Offset of field: Pdr_Man_t_::nStarts"]
        [::std::mem::offset_of!(Pdr_Man_t_, nStarts) - 320usize];
    ["Offset of field: Pdr_Man_t_::nFrames"]
        [::std::mem::offset_of!(Pdr_Man_t_, nFrames) - 324usize];
    ["Offset of field: Pdr_Man_t_::nCasesSS"]
        [::std::mem::offset_of!(Pdr_Man_t_, nCasesSS) - 328usize];
    ["Offset of field: Pdr_Man_t_::nCasesSU"]
        [::std::mem::offset_of!(Pdr_Man_t_, nCasesSU) - 332usize];
    ["Offset of field: Pdr_Man_t_::nCasesUS"]
        [::std::mem::offset_of!(Pdr_Man_t_, nCasesUS) - 336usize];
    ["Offset of field: Pdr_Man_t_::nCasesUU"]
        [::std::mem::offset_of!(Pdr_Man_t_, nCasesUU) - 340usize];
    ["Offset of field: Pdr_Man_t_::nQueCur"]
        [::std::mem::offset_of!(Pdr_Man_t_, nQueCur) - 344usize];
    ["Offset of field: Pdr_Man_t_::nQueMax"]
        [::std::mem::offset_of!(Pdr_Man_t_, nQueMax) - 348usize];
    ["Offset of field: Pdr_Man_t_::nQueLim"]
        [::std::mem::offset_of!(Pdr_Man_t_, nQueLim) - 352usize];
    ["Offset of field: Pdr_Man_t_::nQueLimStep"]
        [::std::mem::offset_of!(Pdr_Man_t_, nQueLimStep) - 356usize];
    ["Offset of field: Pdr_Man_t_::nXsimRuns"]
        [::std::mem::offset_of!(Pdr_Man_t_, nXsimRuns) - 360usize];
    ["Offset of field: Pdr_Man_t_::nXsimLits"]
        [::std::mem::offset_of!(Pdr_Man_t_, nXsimLits) - 364usize];
    ["Offset of field: Pdr_Man_t_::nInfClauses"]
        [::std::mem::offset_of!(Pdr_Man_t_, nInfClauses) - 368usize];
    ["Offset of field: Pdr_Man_t_::fNewInfClauses"]
        [::std::mem::offset_of!(Pdr_Man_t_, fNewInfClauses) - 372usize];
    ["Offset of field: Pdr_Man_t_::timeToStop"]
        [::std::mem::offset_of!(Pdr_Man_t_, timeToStop) - 376usize];
    ["Offset of field: Pdr_Man_t_::timeToStopOne"]
        [::std::mem::offset_of!(Pdr_Man_t_, timeToStopOne) - 384usize];
    ["Offset of field: Pdr_Man_t_::tSat"][::std::mem::offset_of!(Pdr_Man_t_, tSat) - 392usize];
    ["Offset of field: Pdr_Man_t_::tSatSat"]
        [::std::mem::offset_of!(Pdr_Man_t_, tSatSat) - 400usize];
    ["Offset of field: Pdr_Man_t_::tSatUnsat"]
        [::std::mem::offset_of!(Pdr_Man_t_, tSatUnsat) - 408usize];
    ["Offset of field: Pdr_Man_t_::tGeneral"]
        [::std::mem::offset_of!(Pdr_Man_t_, tGeneral) - 416usize];
    ["Offset of field: Pdr_Man_t_::tPush"][::std::mem::offset_of!(Pdr_Man_t_, tPush) - 424usize];
    ["Offset of field: Pdr_Man_t_::tTsim"][::std::mem::offset_of!(Pdr_Man_t_, tTsim) - 432usize];
    ["Offset of field: Pdr_Man_t_::tContain"]
        [::std::mem::offset_of!(Pdr_Man_t_, tContain) - 440usize];
    ["Offset of field: Pdr_Man_t_::tCnf"][::std::mem::offset_of!(Pdr_Man_t_, tCnf) - 448usize];
    ["Offset of field: Pdr_Man_t_::tAbs"][::std::mem::offset_of!(Pdr_Man_t_, tAbs) - 456usize];
    ["Offset of field: Pdr_Man_t_::tTotal"][::std::mem::offset_of!(Pdr_Man_t_, tTotal) - 464usize];
    ["Offset of field: Pdr_Man_t_::tStart"][::std::mem::offset_of!(Pdr_Man_t_, tStart) - 472usize];
};
extern "C" {
    #[link_name = "Pdr_ManSolver_imctk_abc_sys"]
    pub fn Pdr_ManSolver(p: *mut Pdr_Man_t, k: ::std::os::raw::c_int) -> *mut sat_solver;
}
extern "C" {
    #[link_name = "Pdr_ManTimeLimit_imctk_abc_sys"]
    pub fn Pdr_ManTimeLimit(p: *mut Pdr_Man_t) -> abctime;
}
extern "C" {
    pub fn Pdr_ObjSatVar(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        Pol: ::std::os::raw::c_int,
        pObj: *mut Aig_Obj_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_ObjRegNum(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        iSatVar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_ManFreeVar(p: *mut Pdr_Man_t, k: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_ManNewSolver(
        pSat: *mut sat_solver,
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        fInit: ::std::os::raw::c_int,
    ) -> *mut sat_solver;
}
extern "C" {
    pub fn Pdr_ManCheckContainment(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        pSet: *mut Pdr_Set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_ManCountFlopsInv(p: *mut Pdr_Man_t) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Pdr_ManPrintProgress(p: *mut Pdr_Man_t, fClose: ::std::os::raw::c_int, Time: abctime);
}
extern "C" {
    pub fn Pdr_ManPrintClauses(p: *mut Pdr_Man_t, kStart: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Pdr_ManDumpClauses(
        p: *mut Pdr_Man_t,
        pFileName: *mut ::std::os::raw::c_char,
        fProved: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Pdr_ManDumpString(p: *mut Pdr_Man_t) -> *mut Vec_Str_t;
}
extern "C" {
    pub fn Pdr_ManReportInvariant(p: *mut Pdr_Man_t);
}
extern "C" {
    pub fn Pdr_ManVerifyInvariant(p: *mut Pdr_Man_t);
}
extern "C" {
    pub fn Pdr_ManDeriveInfinityClauses(
        p: *mut Pdr_Man_t,
        fReduce: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Pdr_ManStart(
        pAig: *mut Aig_Man_t,
        pPars: *mut Pdr_Par_t,
        vPrioInit: *mut Vec_Int_t,
    ) -> *mut Pdr_Man_t;
}
extern "C" {
    pub fn Pdr_ManStop(p: *mut Pdr_Man_t);
}
extern "C" {
    pub fn Pdr_ManDeriveCex(p: *mut Pdr_Man_t) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Pdr_ManDeriveCexAbs(p: *mut Pdr_Man_t) -> *mut Abc_Cex_t;
}
extern "C" {
    pub fn Pdr_ManCreateSolver(p: *mut Pdr_Man_t, k: ::std::os::raw::c_int) -> *mut sat_solver;
}
extern "C" {
    pub fn Pdr_ManFetchSolver(p: *mut Pdr_Man_t, k: ::std::os::raw::c_int) -> *mut sat_solver;
}
extern "C" {
    pub fn Pdr_ManSetPropertyOutput(p: *mut Pdr_Man_t, k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Pdr_ManCubeToLits(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        pCube: *mut Pdr_Set_t,
        fCompl: ::std::os::raw::c_int,
        fNext: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Pdr_ManLitsToCube(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        pArray: *mut ::std::os::raw::c_int,
        nArray: ::std::os::raw::c_int,
    ) -> *mut Vec_Int_t;
}
extern "C" {
    pub fn Pdr_ManSolverAddClause(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        pCube: *mut Pdr_Set_t,
    );
}
extern "C" {
    pub fn Pdr_ManCollectValues(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        vObjIds: *mut Vec_Int_t,
        vValues: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Pdr_ManCheckCubeCs(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        pCube: *mut Pdr_Set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_ManCheckCube(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        pCube: *mut Pdr_Set_t,
        ppPred: *mut *mut Pdr_Set_t,
        nConfLimit: ::std::os::raw::c_int,
        fTryConf: ::std::os::raw::c_int,
        fUseLit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_ManTernarySim(
        p: *mut Pdr_Man_t,
        k: ::std::os::raw::c_int,
        pCube: *mut Pdr_Set_t,
    ) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Txs_ManStart(
        pMan: *mut Pdr_Man_t,
        pAig: *mut Aig_Man_t,
        vPrio: *mut Vec_Int_t,
    ) -> *mut Txs_Man_t;
}
extern "C" {
    pub fn Txs_ManStop(arg1: *mut Txs_Man_t);
}
extern "C" {
    pub fn Txs_ManTernarySim(
        p: *mut Txs_Man_t,
        k: ::std::os::raw::c_int,
        pCube: *mut Pdr_Set_t,
    ) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Txs3_ManStart(
        pMan: *mut Pdr_Man_t,
        pAig: *mut Aig_Man_t,
        vPrio: *mut Vec_Int_t,
    ) -> *mut Txs3_Man_t;
}
extern "C" {
    pub fn Txs3_ManStop(arg1: *mut Txs3_Man_t);
}
extern "C" {
    pub fn Txs3_ManTernarySim(
        p: *mut Txs3_Man_t,
        k: ::std::os::raw::c_int,
        pCube: *mut Pdr_Set_t,
    ) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetAlloc(nSize: ::std::os::raw::c_int) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetCreate(vLits: *mut Vec_Int_t, vPiLits: *mut Vec_Int_t) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetCreateFrom(
        pSet: *mut Pdr_Set_t,
        iRemove: ::std::os::raw::c_int,
    ) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetCreateSubset(
        pSet: *mut Pdr_Set_t,
        pLits: *mut ::std::os::raw::c_int,
        nLits: ::std::os::raw::c_int,
    ) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetDup(pSet: *mut Pdr_Set_t) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetRef(p: *mut Pdr_Set_t) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetDeref(p: *mut Pdr_Set_t);
}
extern "C" {
    pub fn ZPdr_SetIntersection(
        p1: *mut Pdr_Set_t,
        p2: *mut Pdr_Set_t,
        keep: *mut Hash_Int_t,
    ) -> *mut Pdr_Set_t;
}
extern "C" {
    pub fn Pdr_SetContains(pOld: *mut Pdr_Set_t, pNew: *mut Pdr_Set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_SetContainsSimple(
        pOld: *mut Pdr_Set_t,
        pNew: *mut Pdr_Set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_SetIsInit(
        p: *mut Pdr_Set_t,
        iRemove: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ZPdr_SetIsInit(p: *mut Pdr_Set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_SetPrint(
        pFile: *mut FILE,
        p: *mut Pdr_Set_t,
        nRegs: ::std::os::raw::c_int,
        vFlopCounts: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn ZPdr_SetPrint(p: *mut Pdr_Set_t);
}
extern "C" {
    pub fn Pdr_SetPrintStr(
        vStr: *mut Vec_Str_t,
        p: *mut Pdr_Set_t,
        nRegs: ::std::os::raw::c_int,
        vFlopCounts: *mut Vec_Int_t,
    );
}
extern "C" {
    pub fn Pdr_SetCompare(
        pp1: *mut *mut Pdr_Set_t,
        pp2: *mut *mut Pdr_Set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_SetBoundSizeLextCompare(
        pp1: *mut *mut Pdr_Set_t,
        pp2: *mut *mut Pdr_Set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_OblStart(
        k: ::std::os::raw::c_int,
        prio: ::std::os::raw::c_int,
        pState: *mut Pdr_Set_t,
        pNext: *mut Pdr_Obl_t,
    ) -> *mut Pdr_Obl_t;
}
extern "C" {
    pub fn Pdr_OblRef(p: *mut Pdr_Obl_t) -> *mut Pdr_Obl_t;
}
extern "C" {
    pub fn Pdr_OblDeref(p: *mut Pdr_Obl_t);
}
extern "C" {
    pub fn Pdr_QueueIsEmpty(p: *mut Pdr_Man_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Pdr_QueueHead(p: *mut Pdr_Man_t) -> *mut Pdr_Obl_t;
}
extern "C" {
    pub fn Pdr_QueuePop(p: *mut Pdr_Man_t) -> *mut Pdr_Obl_t;
}
extern "C" {
    pub fn Pdr_QueueClean(p: *mut Pdr_Man_t);
}
extern "C" {
    pub fn Pdr_QueuePush(p: *mut Pdr_Man_t, pObl: *mut Pdr_Obl_t);
}
extern "C" {
    pub fn Pdr_QueuePrint(p: *mut Pdr_Man_t);
}
extern "C" {
    pub fn Pdr_QueueStop(p: *mut Pdr_Man_t);
}
extern "C" {
    pub fn imctk_abc_glucose2_init() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn imctk_abc_glucose2_release(s: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn imctk_abc_glucose2_reset(s: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn imctk_abc_glucose2_set_incremental_mode(s: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn imctk_abc_glucose2_new_var(s: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_nvars(s: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_add_clause(
        s: *mut ::std::os::raw::c_void,
        lits: *const ::std::os::raw::c_int,
        nlits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_solve_limited(
        s: *mut ::std::os::raw::c_void,
        lits: *const ::std::os::raw::c_int,
        nlits: ::std::os::raw::c_int,
        do_simp: ::std::os::raw::c_int,
        turn_off_simp: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_get_cex(s: *mut ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_produce_inner_model(
        s: *mut ::std::os::raw::c_void,
        produce_inner: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn imctk_abc_glucose2_model_value(
        s: *mut ::std::os::raw::c_void,
        var: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_markapprox(
        s: *mut ::std::os::raw::c_void,
        v0: ::std::os::raw::c_int,
        v1: ::std::os::raw::c_int,
        nlim: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn imctk_abc_glucose2_jftr(s: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_set_jftr(s: *mut ::std::os::raw::c_void, jftr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imctk_abc_glucose2_set_var_fanin_lit(
        s: *mut ::std::os::raw::c_void,
        var: ::std::os::raw::c_int,
        lit0: ::std::os::raw::c_int,
        lit1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn imctk_abc_glucose2_start_new_round(s: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn imctk_abc_glucose2_mark_cone(s: *mut ::std::os::raw::c_void, var: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imctk_abc_glucose2_mark_var(s: *mut ::std::os::raw::c_void, var: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imctk_abc_glucose2_prelocate(
        s: *mut ::std::os::raw::c_void,
        var_num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn imctk_abc_glucose2_conflicts(s: *mut ::std::os::raw::c_void) -> i64;
}
extern "C" {
    pub fn imctk_abc_glucose2_set_conf_budget(s: *mut ::std::os::raw::c_void, budget: i64);
}
extern "C" {
    pub fn imctk_abc_glucose2_budget_off(s: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn imctk_abc_glucose2_start_proof_trace(
        s: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        learnt_clause: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                lits: *const ::std::os::raw::c_int,
                nlits: ::std::os::raw::c_int,
                tags: *const u32,
                ntags: ::std::os::raw::c_int,
                units: *const ::std::os::raw::c_int,
                nunits: ::std::os::raw::c_int,
            ) -> u32,
        >,
        learnt_unit: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                lit: ::std::os::raw::c_int,
                tag: u32,
                units: *const ::std::os::raw::c_int,
                nunits: ::std::os::raw::c_int,
            ),
        >,
        conflict: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                lits: *const ::std::os::raw::c_int,
                nlits: ::std::os::raw::c_int,
                tags: *const u32,
                ntags: ::std::os::raw::c_int,
                units: *const ::std::os::raw::c_int,
                nunits: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn imctk_abc_glucose2_stop_proof_trace(s: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn imctk_abc_glucose2_proof_trace_set_default_tag(s: *mut ::std::os::raw::c_void, tag: u32);
}
extern "C" {
    pub fn imctk_abc_glucose2_proof_trace_default_tag(s: *mut ::std::os::raw::c_void) -> u32;
}
extern "C" {
    pub fn imctk_abc_glucose2_conflict_size(
        s: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imctk_abc_glucose2_conflict_lits(
        s: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_int;
}
extern "C" {
    pub static mut enable_dbg_outs: ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Cec4_ManSetParams(pPars: *mut Cec_ParFra_t);
}
extern "C" {
    pub fn Cec5_ManSimulateTest(
        p: *mut Gia_Man_t,
        pPars: *mut Cec_ParFra_t,
        fCbs: ::std::os::raw::c_int,
        approxLim: ::std::os::raw::c_int,
        subBatchSz: ::std::os::raw::c_int,
        adaRecycle: ::std::os::raw::c_int,
    ) -> *mut Gia_Man_t;
}
extern "C" {
    pub fn imctk_abc_line_buffer_stdout();
}
